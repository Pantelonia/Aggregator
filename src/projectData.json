{
  "id": 4888518,
  "name": "Flights",
  "description": "",
  "created_at": "2017-12-13T17:01:34.336Z",
  "web_url": "https://gitlab.com/korsa719/Flights",
  "avatar_url": null,
  "creator_id": 1608560,
  "creator": {
    "id": 1608560,
    "name": "Kostyantyn Matlayev",
    "username": "korsa719",
    "web_url": "https://gitlab.com/korsa719",
    "avatar_url": "https://secure.gravatar.com/avatar/1d5ac6c74636668c15907e41342c9b2b?s=80&d=identicon"
  },
  "commits": [
    {
      "id": "eafdfb7d43d69fc1e8100b63631af453b6cbc657",
      "project_id": 4888518,
      "message": "PRIMARY KEY changed for tickets table in schema.sql\n",
      "title": "PRIMARY KEY changed for tickets table in schema.sql",
      "short_id": "eafdfb7d",
      "author_name": "full.iron",
      "branches": null,
      "created_at": "2018-01-17T18:52:18Z",
      "diffs": [
        {
          "diff": "@@ -16,8 +16,8 @@ CREATE TABLE  IF NOT EXISTS HOTELS(\n );\n \n CREATE TABLE  IF NOT EXISTS TICKETS(\n-  `ID` BIGINT AUTO_INCREMENT,\n-  `CUSTOMER_ID` BIGINT PRIMARY KEY NOT NULL,\n+  `ID` BIGINT PRIMARY KEY AUTO_INCREMENT,\n+  `CUSTOMER_ID` BIGINT  NOT NULL,\n   `FROM` VARCHAR(255) NOT NULL,\n   `TO` VARCHAR(255) NOT NULL\n );\n\\ No newline at end of file\n",
          "old_path": "flights-app/resources/schema.sql",
          "new_path": "flights-app/resources/schema.sql",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "eafdfb7d"
        }
      ]
    },
    {
      "id": "0d97421f783d0a563c8d4e65cde990cbb502cf3f",
      "project_id": 4888518,
      "message": "Merge branch '40-create-database-schema' into 'master'\n\nResolve \"Create database schema\" - ADD TICKETS table\n\nCloses #40\n\nSee merge request korsa719/Flights!15",
      "title": "Merge branch '40-create-database-schema' into 'master'",
      "short_id": "0d97421f",
      "author_name": "Volodymyr Derkach",
      "branches": null,
      "created_at": "2018-01-15T20:08:04Z",
      "diffs": [
        {
          "diff": "@@ -10,7 +10,14 @@ CREATE TABLE  IF NOT EXISTS FLIGHTS(\n \n CREATE TABLE  IF NOT EXISTS HOTELS(\n   `ID` BIGINT PRIMARY KEY AUTO_INCREMENT,\n-  `HOTELNAME` VARCHAR(255) NOT NULL ,\n+  `HOTELNAME` VARCHAR(255) NOT NULL,\n   `HOTELCITY` VARCHAR(255) NOT NULL,\n   `HOTELSTARRATING` BIGINT NOT NULL\n+);\n+\n+CREATE TABLE  IF NOT EXISTS TICKETS(\n+  `ID` BIGINT AUTO_INCREMENT,\n+  `CUSTOMER_ID` BIGINT PRIMARY KEY NOT NULL,\n+  `FROM` VARCHAR(255) NOT NULL,\n+  `TO` VARCHAR(255) NOT NULL\n );\n\\ No newline at end of file\n",
          "old_path": "flights-app/resources/schema.sql",
          "new_path": "flights-app/resources/schema.sql",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "0d97421f"
        },
        {
          "diff": "@@ -0,0 +1,33 @@\n+package ua.danit.application.dao;\n+\n+\n+import ua.danit.application.model.Flight;\n+import ua.danit.application.model.Tickets;\n+import ua.danit.framework.utils.EntityUtils;\n+\n+\n+public class TicketsDao {\n+\n+    public Iterable<Tickets> getTopTickets(int limit) {\n+        String sql = \"select ID as id, `CUSTOMER_ID` as `customer_id`, \" +\n+                \" `DESTINATION_CITY` as `to`,\" +\n+                \"`DEPARTURE_CITY` as `from`,\" +\n+                \"from TICKETS\";\n+        return EntityUtils.nativeQuery(sql, Tickets.class);\n+    }\n+\n+\n+    public Iterable<Tickets> searchTickets(Long id) {\n+        if (id != null) {\n+            String sql = \"select ID as id, `CUSTOMER_ID` as `customer_id`, \" +\n+                    \" `DESTINATION_CITY` as `to`,\" +\n+                    \"`DEPARTURE_CITY` as `from`,\" +\n+                    \"from TICKETS\" +\n+                    \"where `DEPARTURE_CITY` like'\" + id + \"%' \" +\n+                    \"or `DESTINATION_CITY` like '\" + id + \"%'\";\n+            return EntityUtils.nativeQuery(sql, Tickets.class);\n+        }\n+        return null;\n+    }\n+\n+}\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/dao/TicketsDao.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/dao/TicketsDao.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "0d97421f"
        },
        {
          "diff": "@@ -0,0 +1,33 @@\n+package ua.danit.application.model;\n+\n+public class Tickets {\n+    private Long id;\n+    private Long customer_id;\n+    private String from;\n+    private String to;\n+\n+\n+    public Tickets(){\n+    }\n+\n+    public Tickets(Long id, long customer_id, String from, String to){\n+        this.id = id;\n+        this.customer_id = customer_id;\n+        this.from = from;\n+        this.to = to;\n+    }\n+\n+    public Long getId() { return id; }\n+\n+    public long getCustomerId() {\n+        return customer_id;\n+    }\n+\n+    public String getFrom() {\n+        return from;\n+    }\n+\n+    public String getTo() {\n+        return to;\n+    }\n+}\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/model/Tickets.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/model/Tickets.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "0d97421f"
        },
        {
          "diff": "@@ -0,0 +1,41 @@\n+package ua.danit.application.resources;\n+\n+import org.codehaus.jackson.map.ObjectMapper;\n+import ua.danit.application.dao.HotelDao;\n+import ua.danit.application.dao.TicketsDao;\n+import ua.danit.application.model.Hotel;\n+import ua.danit.application.model.Tickets;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.QueryParam;\n+import java.io.IOException;\n+\n+public class TicketsResource {\n+\n+    private TicketsDao ticketsDao;\n+\n+    @Path(\"/tickets/\")\n+    @GET\n+    public String getTickets() throws IOException {\n+        if (ticketsDao == null) {\n+            ticketsDao = new TicketsDao();\n+        }\n+\n+        Iterable<Tickets> tickets = ticketsDao.getTopTickets(5);\n+        ObjectMapper mapper = new ObjectMapper();\n+        return mapper.writeValueAsString(tickets);\n+    }\n+\n+    @Path(\"/hotels/search\")\n+    @GET\n+    public String getSearchTickets(@QueryParam(\"search\") Long search) throws IOException {\n+        if (ticketsDao == null) {\n+            ticketsDao = new TicketsDao();\n+        }\n+\n+        Iterable<Tickets> tickets = ticketsDao.searchTickets(search);\n+        ObjectMapper mapper = new ObjectMapper();\n+        return mapper.writeValueAsString(tickets);\n+    }\n+}\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/resources/TicketsResource.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/resources/TicketsResource.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "0d97421f"
        }
      ]
    },
    {
      "id": "c6bd84c5f92c1bcab6b96f27e7c417a20dc67c63",
      "project_id": 4888518,
      "message": "Update README.md",
      "title": "Update README.md",
      "short_id": "c6bd84c5",
      "author_name": "Volodymyr Derkach",
      "branches": null,
      "created_at": "2018-01-15T20:04:11Z",
      "diffs": [
        {
          "diff": "@@ -1,14 +1,39 @@\n-## Web application\n-\n-### Goal\n+# FS1\n+\n+Mini tutorials: [Git](https://gitlab.com/korsa719/Flights/blob/master/docs/tutorials/GIT.md), \n+[Maven](https://gitlab.com/korsa719/Flights/blob/master/docs/tutorials/MAVEN.md),\n+[Linux Aliases](https://gitlab.com/korsa719/Flights/blob/master/docs/tutorials/LINUX_ALIASES.md).\n+\n+## Instagram\n+\n+### Tasks\n+\n+1. Create new project.\n+2. Create DB schema.\n+3. Add User as a entity.\n+4. Insert User into database.\n+5. Select User with in JDBC.\n+6. Integrate Hibernate into project.\n+7. Utilize Transactions for DB operations.\n+8. Integrate Spring Data.\n+9. Integrate String Boot, IoC into project.\n+10. Integrate Spring Security.\n+11. Integrate Spring MVC.\n+12. Write down server endpoint that serve users from DB as Json.\n+13. Login page.\n+14. Add User registration.\n+\n+## Flights\n+\n+#### Goal\n Create rest application that shows airport's shedule flights.\n \n-### Tools\n+#### Tools\n * [Apache Maven](https://maven.apache.org/) is a software project management and comprehension tool.\n * [Eclipse Jetty](https://www.eclipse.org/jetty) provides a Web server and javax.servlet container, plus support for HTTP/2, WebSocket, OSGi, JMX, JNDI, JAAS and many other integrations.\n * [JUnit ](http://junit.org/junit4) is a simple framework to write repeatable tests. It is an instance of the xUnit architecture for unit testing frameworks. \n \n-### Installiation and Execution\n+#### Installiation and Execution\n To start rest application open your *Terminal* and type `bash start.sh` in it.\n \n ``$ cd {working directory}``   \n@@ -16,10 +41,10 @@ To start rest application open your *Terminal* and type `bash start.sh` in it.\n \n Open your browser and type `localhost:8080` in address field, if you see \" Welcome to British airport \" that means your application is working.\n \n-### Rules for contributors\n+#### Rules for contributors\n The big request to participants not to write in the file README.md any crap and dregs, add only useful text.\n \n-## REST framework\n+#### REST framework\n \n Framework that implements [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) standard in java.\n Standart called [JAX-RS](https://jcp.org/en/jsr/detail?id=339) and reference implementation called [Jersey](https://jersey.github.io/).\n",
          "old_path": "README.md",
          "new_path": "README.md",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c6bd84c5"
        }
      ]
    },
    {
      "id": "1b42e81e7857a3d48fde89cfe0aac93400a94914",
      "project_id": 4888518,
      "message": "tickets table + ticketsDAO + ticketsResources 2\n",
      "title": "tickets table + ticketsDAO + ticketsResources 2",
      "short_id": "1b42e81e",
      "author_name": "full.iron",
      "branches": null,
      "created_at": "2018-01-15T20:03:48Z",
      "diffs": [
        {
          "diff": "@@ -10,7 +10,7 @@ CREATE TABLE  IF NOT EXISTS FLIGHTS(\n \n CREATE TABLE  IF NOT EXISTS HOTELS(\n   `ID` BIGINT PRIMARY KEY AUTO_INCREMENT,\n-  `HOTELNAME` VARCHAR(255) NOT NULL ,\n+  `HOTELNAME` VARCHAR(255) NOT NULL,\n   `HOTELCITY` VARCHAR(255) NOT NULL,\n   `HOTELSTARRATING` BIGINT NOT NULL\n );\n",
          "old_path": "flights-app/resources/schema.sql",
          "new_path": "flights-app/resources/schema.sql",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "1b42e81e"
        }
      ]
    },
    {
      "id": "bdec87cf0cd4f8d9b633accd1456abb55a40b2c6",
      "project_id": 4888518,
      "message": "Merge remote-tracking branch 'origin/40-create-database-schema' into 40-create-database-schema\n\n# Conflicts:\n#\tflights-app/resources/schema.sql\n",
      "title": "Merge remote-tracking branch 'origin/40-create-database-schema' into 40-create-database-schema",
      "short_id": "bdec87cf",
      "author_name": "full.iron",
      "branches": null,
      "created_at": "2018-01-15T20:01:37Z",
      "diffs": []
    },
    {
      "id": "99fd624cb7b459753b2d118a6b589dc5fc9f05ba",
      "project_id": 4888518,
      "message": "tickets table + ticketsDAO + ticketsResources\n",
      "title": "tickets table + ticketsDAO + ticketsResources",
      "short_id": "99fd624c",
      "author_name": "full.iron",
      "branches": null,
      "created_at": "2018-01-15T20:00:50Z",
      "diffs": [
        {
          "diff": "@@ -13,4 +13,11 @@ CREATE TABLE  IF NOT EXISTS HOTELS(\n   `HOTELNAME` VARCHAR(255) NOT NULL ,\n   `HOTELCITY` VARCHAR(255) NOT NULL,\n   `HOTELSTARRATING` BIGINT NOT NULL\n+);\n+\n+CREATE TABLE  IF NOT EXISTS TICKETS(\n+  `ID` BIGINT AUTO_INCREMENT,\n+  `CUSTOMER_ID` BIGINT PRIMARY KEY NOT NULL,\n+  `FROM` VARCHAR(255) NOT NULL,\n+  `TO` VARCHAR(255) NOT NULL\n );\n\\ No newline at end of file\n",
          "old_path": "flights-app/resources/schema.sql",
          "new_path": "flights-app/resources/schema.sql",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "99fd624c"
        },
        {
          "diff": "@@ -0,0 +1,33 @@\n+package ua.danit.application.dao;\n+\n+\n+import ua.danit.application.model.Flight;\n+import ua.danit.application.model.Tickets;\n+import ua.danit.framework.utils.EntityUtils;\n+\n+\n+public class TicketsDao {\n+\n+    public Iterable<Tickets> getTopTickets(int limit) {\n+        String sql = \"select ID as id, `CUSTOMER_ID` as `customer_id`, \" +\n+                \" `DESTINATION_CITY` as `to`,\" +\n+                \"`DEPARTURE_CITY` as `from`,\" +\n+                \"from TICKETS\";\n+        return EntityUtils.nativeQuery(sql, Tickets.class);\n+    }\n+\n+\n+    public Iterable<Tickets> searchTickets(Long id) {\n+        if (id != null) {\n+            String sql = \"select ID as id, `CUSTOMER_ID` as `customer_id`, \" +\n+                    \" `DESTINATION_CITY` as `to`,\" +\n+                    \"`DEPARTURE_CITY` as `from`,\" +\n+                    \"from TICKETS\" +\n+                    \"where `DEPARTURE_CITY` like'\" + id + \"%' \" +\n+                    \"or `DESTINATION_CITY` like '\" + id + \"%'\";\n+            return EntityUtils.nativeQuery(sql, Tickets.class);\n+        }\n+        return null;\n+    }\n+\n+}\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/dao/TicketsDao.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/dao/TicketsDao.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "99fd624c"
        },
        {
          "diff": "@@ -0,0 +1,33 @@\n+package ua.danit.application.model;\n+\n+public class Tickets {\n+    private Long id;\n+    private Long customer_id;\n+    private String from;\n+    private String to;\n+\n+\n+    public Tickets(){\n+    }\n+\n+    public Tickets(Long id, long customer_id, String from, String to){\n+        this.id = id;\n+        this.customer_id = customer_id;\n+        this.from = from;\n+        this.to = to;\n+    }\n+\n+    public Long getId() { return id; }\n+\n+    public long getCustomerId() {\n+        return customer_id;\n+    }\n+\n+    public String getFrom() {\n+        return from;\n+    }\n+\n+    public String getTo() {\n+        return to;\n+    }\n+}\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/model/Tickets.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/model/Tickets.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "99fd624c"
        },
        {
          "diff": "@@ -0,0 +1,41 @@\n+package ua.danit.application.resources;\n+\n+import org.codehaus.jackson.map.ObjectMapper;\n+import ua.danit.application.dao.HotelDao;\n+import ua.danit.application.dao.TicketsDao;\n+import ua.danit.application.model.Hotel;\n+import ua.danit.application.model.Tickets;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.QueryParam;\n+import java.io.IOException;\n+\n+public class TicketsResource {\n+\n+    private TicketsDao ticketsDao;\n+\n+    @Path(\"/tickets/\")\n+    @GET\n+    public String getTickets() throws IOException {\n+        if (ticketsDao == null) {\n+            ticketsDao = new TicketsDao();\n+        }\n+\n+        Iterable<Tickets> tickets = ticketsDao.getTopTickets(5);\n+        ObjectMapper mapper = new ObjectMapper();\n+        return mapper.writeValueAsString(tickets);\n+    }\n+\n+    @Path(\"/hotels/search\")\n+    @GET\n+    public String getSearchTickets(@QueryParam(\"search\") Long search) throws IOException {\n+        if (ticketsDao == null) {\n+            ticketsDao = new TicketsDao();\n+        }\n+\n+        Iterable<Tickets> tickets = ticketsDao.searchTickets(search);\n+        ObjectMapper mapper = new ObjectMapper();\n+        return mapper.writeValueAsString(tickets);\n+    }\n+}\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/resources/TicketsResource.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/resources/TicketsResource.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "99fd624c"
        }
      ]
    },
    {
      "id": "6bcaab1a5f8a87a252144f30c5288ab95fee8732",
      "project_id": 4888518,
      "message": "Merge branch 'master' of gitlab.com:korsa719/Flights\n",
      "title": "Merge branch 'master' of gitlab.com:korsa719/Flights",
      "short_id": "6bcaab1a",
      "author_name": "V0L0DYMYR",
      "branches": null,
      "created_at": "2018-01-15T19:44:40Z",
      "diffs": [
        {
          "diff": "@@ -21,4 +21,69 @@ public class Airline {\n    412,\"Aerolineas Argentinas\",\\N,\"AR\",\"ARG\",\"ARGENTINA\",\"Argentina\",\"Y\"\n    413,\"Arrowhead Airways\",\\N,\"\",\"ARH\",\"ARROWHEAD\",\"United States\",\"N\"\n    */\n+  public Airline(){\n+  }\n+\n+  public Airline(int airlineID, String name, String alias, String iATA, String iCAO, String callsign, String country, char active) {\n+      this.airlineID = airlineID;\n+      this.name = name;\n+      this.alias = alias;\n+      this.iATA = iATA;\n+      this.iCAO = iCAO;\n+      this.callsign = callsign;\n+      this.country = country;\n+      this.active = active;\n+  }\n+\n+  private long airlineID;\n+\n+  private String name;\n+\n+  private String alias;\n+\n+  private String iATA;\n+\n+  private String iCAO;\n+\n+  private String callsign;\n+\n+  private String country;\n+\n+  private char active;\n+\n+    public long getAirlineID() {\n+        return airlineID;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getAlias() {\n+        return alias;\n+    }\n+\n+    public String getiATA() {\n+        return iATA;\n+    }\n+\n+    public String getiCAO() {\n+        return iCAO;\n+    }\n+\n+    public String getCallsign() {\n+        return callsign;\n+    }\n+\n+    public String getCountry() {\n+        return country;\n+    }\n+\n+    public char getActive() {\n+        return active;\n+    }\n+\n+\n+\n+\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/model/Airline.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/model/Airline.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "6bcaab1a"
        },
        {
          "diff": "@@ -28,4 +28,115 @@ Sample entries\n 3127,\"Pokhara Airport\",\"Pokhara\",\"Nepal\",\"PKR\",\"VNPK\",28.200899124145508,83.98210144042969,2712,5.75,\"N\",\"Asia/Katmandu\",\"airport\",\"OurAirports\"\n 8810,\"Hamburg Hbf\",\"Hamburg\",\"Germany\",\"ZMB\",\\N,53.552776,10.006683,30,1,\"E\",\"Europe/Berlin\",\"station\",\"User\"\n    */\n+\n+  public Airport() {\n+  }\n+\n+    public Airport(long airportID, String name, String city, String country, String iATA, String iCAO, long latitude, long longitude, long altitude, long timezone, long daylightSavingsTime, String databaseTimeZone, String type, String callsign, String source) {\n+        this.airportID = airportID;\n+        this.name = name;\n+        this.city = city;\n+        this.country = country;\n+        this.iATA = iATA;\n+        this.iCAO = iCAO;\n+        this.latitude = latitude;\n+        this.longitude = longitude;\n+        this.altitude = altitude;\n+        this.timezone = timezone;\n+        this.daylightSavingsTime = daylightSavingsTime;\n+        this.databaseTimeZone = databaseTimeZone;\n+        this.type = type;\n+        this.callsign = callsign;\n+        this.source = source;\n+    }\n+\n+    public long getAirportID() {\n+        return airportID;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getCity() {\n+        return city;\n+    }\n+\n+    public String getCountry() {\n+        return country;\n+    }\n+\n+    public String getiATA() {\n+        return iATA;\n+    }\n+\n+    public String getiCAO() {\n+        return iCAO;\n+    }\n+\n+    public long getLatitude() {\n+        return latitude;\n+    }\n+\n+    public long getLongitude() {\n+        return longitude;\n+    }\n+\n+    public long getAltitude() {\n+        return altitude;\n+    }\n+\n+    public long getTimezone() {\n+        return timezone;\n+    }\n+\n+    public long getDaylightSavingsTime() {\n+        return daylightSavingsTime;\n+    }\n+\n+    public String getDatabaseTimeZone() {\n+        return databaseTimeZone;\n+    }\n+\n+    public String getType() {\n+        return type;\n+    }\n+\n+    public String getCallsign() {\n+        return callsign;\n+    }\n+\n+    public String getSource() {\n+        return source;\n+    }\n+\n+    private long airportID;\n+\n+    private String name;\n+\n+    private String city;\n+\n+    private String country;\n+\n+    private String iATA;\n+\n+    private String iCAO;\n+\n+    private long latitude;\n+\n+    private long longitude;\n+\n+    private long altitude;\n+\n+    private long timezone;\n+\n+    private long daylightSavingsTime;\n+\n+    private String databaseTimeZone;\n+\n+    private String type;\n+\n+    private String callsign;\n+\n+    private String source;\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/model/Airport.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/model/Airport.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "6bcaab1a"
        }
      ]
    },
    {
      "id": "7c26ca05d575d50e1b55819b69990753976d77ce",
      "project_id": 4888518,
      "message": "docs\n",
      "title": "docs",
      "short_id": "7c26ca05",
      "author_name": "V0L0DYMYR",
      "branches": null,
      "created_at": "2018-01-15T19:44:21Z",
      "diffs": [
        {
          "diff": "@@ -0,0 +1,39 @@\n+## Git Tutorial\n+\n+### Зкачати проект\n+`git clone <url_to_get_repo>`\n+\n+### Внести зміни\n+\n+Створюємо новий пустий файл.  \n+`touch file.txt`\n+\n+Дивимося статус локального репозиторія, він покаже які файли були модифіковані.  \n+`git status`\n+\n+Додати файл до коміта.  \n+`git add file.txt`\n+\n+Всі додані файли зберігаємо локально в одному пакеті зміт(коміті).  \n+`git commit -m \"commit message\"`\n+\n+відправляємо зміни на сервер.  \n+`git push`\n+\n+### Останні зміна з сервера  \n+`git pull`\n+\n+### Переключання на віддалену вірку\n+\n+Оновлюємо інформацію про вітки.  \n+`git fetch --all`\n+\n+Дивимося список віток.  \n+`git branch -a`\n+\n+Переходимо на нову вітку.  \n+`git checkout -t <path_to_remote_branch>`\n+\n+### Переключення між локальними вітками\n+\n+`git checkout master`\n",
          "old_path": "docs/tutorials/GIT.md",
          "new_path": "docs/tutorials/GIT.md",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "7c26ca05"
        },
        {
          "diff": "@@ -0,0 +1,56 @@\n+# Linux Aliases\n+\n+### git \n+Щоб зберегти зміни проекта в GitLab необхідно виконати\n+\n+`cd path/to/project` \n+`git add .`  \n+`git commit -m \"Message for this commit\"`  \n+`git push`  \n+\n+### alias\n+Можна зекономити час і набирати значно коротші команди, наприклад\n+\n+`go2proj`  \n+`ga .`  \n+`gc Mesage for this commit`  \n+`gp`\n+\n+### .bashrc\n+для цього треба відредагувати файл `~/.bashrc` на MacOS `~/.profile`.\n+\n+ Перший варіант:  \n+ `echo 'alias go2chess=\"cd /path/to/project/chess\"' >> ~/.bashrc` \n+ ми додали рядок. Перевіримо\n+ `tail ~/.bashrc`\n+ \n+ Другий варіант:  \n+ `vi ~/.bashrc`  \n+ натискаємо `i`  \n+ пишемо `alias go2chess=\"cd /path/to/project/chess\"`  \n+ `Esc`  `Shift :`  `wq`  `Enter`\n+ \n+### Тестуємо\n+ Відкриваємо **новий термінал**  \n+ пишемо `go2chess` і нас має перекинути на директорію проекта.\n+ Або `go2` натискаємо `tab + tab` і у нас доповнюється команда або показуються всі варіанти,\n+ що починаються з go2.\n+ \n+ Щоб зміни спрацювати в тому ж терміналі, треба виконати  \n+ `source ~/.bashrc`\n+ \n+### Більше варіантів\n+\n+Додаво в той же файт інші синоніми\n+\n+```bash\n+alias go2chess=\"cd /path/to/chess/project\"\n+alias ga=\"git add $@\"\n+alias gc=\"git commit -m $@\"\n+alias gc=\"git push\"\n+alias gs=\"git status\"\n+alias gsave=\"git add . && git commit -m 'update' && git push\"\n+alias ll=\"ls -la -G\" # show all files with colors\n+alias gd=\"git diff\"\n+```\n+ \n",
          "old_path": "docs/tutorials/LINUX_ALIASES.md",
          "new_path": "docs/tutorials/LINUX_ALIASES.md",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "7c26ca05"
        },
        {
          "diff": "@@ -0,0 +1,34 @@\n+## Maven \n+\n+### Встановлення на Linux\n+\n+Переходимо в папку з програмами.  \n+`cd ~/utils`\n+\n+Качаємо архів.  \n+`wget http://apache.ip-connect.vn.ua/maven/maven-3/3.5.2/binaries/apache-maven-3.5.2-bin.zip`\n+\n+Розархівація  \n+`unzip apache-maven-3.5.2-bin.zip`\n+\n+Архів можна видалити \n+`rm apache-maven-3.5.2-bin.zip`\n+\n+Пропишемо, в системі, шлях до виконуваного файлу  \n+`echo \"export PATH=$PATH:/home/user/utils/apache-maven-3.5.2/bin\" >> ~/.bashrc`\n+\n+Запустимо новий термінал і виконаємо  \n+`mvn --version`\n+\n+### Створити новий проект\n+\n+Наберемо в консолі  \n+`mvn archetype:generate`\n+\n+Введемо groupId: ua.danit  \n+    artifactId: new_project  \n+Все інше виберемо варіант за замовчуванням.\n+\n+### Зібрати проект\n+\n+`mvn clean package`\n",
          "old_path": "docs/tutorials/MAVEN.md",
          "new_path": "docs/tutorials/MAVEN.md",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "7c26ca05"
        }
      ]
    },
    {
      "id": "9a3a17b4f4bacf2f3daee5b7d40e9d91e0ca6836",
      "project_id": 4888518,
      "message": "Merge branch 'ivanNewModels' into 'master'\n\nNew instances in Airport and Airline\n\nSee merge request korsa719/Flights!21",
      "title": "Merge branch 'ivanNewModels' into 'master'",
      "short_id": "9a3a17b4",
      "author_name": "Volodymyr Derkach",
      "branches": null,
      "created_at": "2018-01-15T19:10:57Z",
      "diffs": [
        {
          "diff": "@@ -21,4 +21,69 @@ public class Airline {\n    412,\"Aerolineas Argentinas\",\\N,\"AR\",\"ARG\",\"ARGENTINA\",\"Argentina\",\"Y\"\n    413,\"Arrowhead Airways\",\\N,\"\",\"ARH\",\"ARROWHEAD\",\"United States\",\"N\"\n    */\n+  public Airline(){\n+  }\n+\n+  public Airline(int airlineID, String name, String alias, String iATA, String iCAO, String callsign, String country, char active) {\n+      this.airlineID = airlineID;\n+      this.name = name;\n+      this.alias = alias;\n+      this.iATA = iATA;\n+      this.iCAO = iCAO;\n+      this.callsign = callsign;\n+      this.country = country;\n+      this.active = active;\n+  }\n+\n+  private long airlineID;\n+\n+  private String name;\n+\n+  private String alias;\n+\n+  private String iATA;\n+\n+  private String iCAO;\n+\n+  private String callsign;\n+\n+  private String country;\n+\n+  private char active;\n+\n+    public long getAirlineID() {\n+        return airlineID;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getAlias() {\n+        return alias;\n+    }\n+\n+    public String getiATA() {\n+        return iATA;\n+    }\n+\n+    public String getiCAO() {\n+        return iCAO;\n+    }\n+\n+    public String getCallsign() {\n+        return callsign;\n+    }\n+\n+    public String getCountry() {\n+        return country;\n+    }\n+\n+    public char getActive() {\n+        return active;\n+    }\n+\n+\n+\n+\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/model/Airline.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/model/Airline.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "9a3a17b4"
        },
        {
          "diff": "@@ -28,4 +28,115 @@ Sample entries\n 3127,\"Pokhara Airport\",\"Pokhara\",\"Nepal\",\"PKR\",\"VNPK\",28.200899124145508,83.98210144042969,2712,5.75,\"N\",\"Asia/Katmandu\",\"airport\",\"OurAirports\"\n 8810,\"Hamburg Hbf\",\"Hamburg\",\"Germany\",\"ZMB\",\\N,53.552776,10.006683,30,1,\"E\",\"Europe/Berlin\",\"station\",\"User\"\n    */\n+\n+  public Airport() {\n+  }\n+\n+    public Airport(long airportID, String name, String city, String country, String iATA, String iCAO, long latitude, long longitude, long altitude, long timezone, long daylightSavingsTime, String databaseTimeZone, String type, String callsign, String source) {\n+        this.airportID = airportID;\n+        this.name = name;\n+        this.city = city;\n+        this.country = country;\n+        this.iATA = iATA;\n+        this.iCAO = iCAO;\n+        this.latitude = latitude;\n+        this.longitude = longitude;\n+        this.altitude = altitude;\n+        this.timezone = timezone;\n+        this.daylightSavingsTime = daylightSavingsTime;\n+        this.databaseTimeZone = databaseTimeZone;\n+        this.type = type;\n+        this.callsign = callsign;\n+        this.source = source;\n+    }\n+\n+    public long getAirportID() {\n+        return airportID;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getCity() {\n+        return city;\n+    }\n+\n+    public String getCountry() {\n+        return country;\n+    }\n+\n+    public String getiATA() {\n+        return iATA;\n+    }\n+\n+    public String getiCAO() {\n+        return iCAO;\n+    }\n+\n+    public long getLatitude() {\n+        return latitude;\n+    }\n+\n+    public long getLongitude() {\n+        return longitude;\n+    }\n+\n+    public long getAltitude() {\n+        return altitude;\n+    }\n+\n+    public long getTimezone() {\n+        return timezone;\n+    }\n+\n+    public long getDaylightSavingsTime() {\n+        return daylightSavingsTime;\n+    }\n+\n+    public String getDatabaseTimeZone() {\n+        return databaseTimeZone;\n+    }\n+\n+    public String getType() {\n+        return type;\n+    }\n+\n+    public String getCallsign() {\n+        return callsign;\n+    }\n+\n+    public String getSource() {\n+        return source;\n+    }\n+\n+    private long airportID;\n+\n+    private String name;\n+\n+    private String city;\n+\n+    private String country;\n+\n+    private String iATA;\n+\n+    private String iCAO;\n+\n+    private long latitude;\n+\n+    private long longitude;\n+\n+    private long altitude;\n+\n+    private long timezone;\n+\n+    private long daylightSavingsTime;\n+\n+    private String databaseTimeZone;\n+\n+    private String type;\n+\n+    private String callsign;\n+\n+    private String source;\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/model/Airport.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/model/Airport.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "9a3a17b4"
        }
      ]
    },
    {
      "id": "c09f510ca810af320528f9aab3deb7b2503e8302",
      "project_id": 4888518,
      "message": "New instances in Airport and Airline\n",
      "title": "New instances in Airport and Airline",
      "short_id": "c09f510c",
      "author_name": "VV",
      "branches": null,
      "created_at": "2018-01-15T17:09:52Z",
      "diffs": [
        {
          "diff": "@@ -21,4 +21,69 @@ public class Airline {\n    412,\"Aerolineas Argentinas\",\\N,\"AR\",\"ARG\",\"ARGENTINA\",\"Argentina\",\"Y\"\n    413,\"Arrowhead Airways\",\\N,\"\",\"ARH\",\"ARROWHEAD\",\"United States\",\"N\"\n    */\n+  public Airline(){\n+  }\n+\n+  public Airline(int airlineID, String name, String alias, String iATA, String iCAO, String callsign, String country, char active) {\n+      this.airlineID = airlineID;\n+      this.name = name;\n+      this.alias = alias;\n+      this.iATA = iATA;\n+      this.iCAO = iCAO;\n+      this.callsign = callsign;\n+      this.country = country;\n+      this.active = active;\n+  }\n+\n+  private long airlineID;\n+\n+  private String name;\n+\n+  private String alias;\n+\n+  private String iATA;\n+\n+  private String iCAO;\n+\n+  private String callsign;\n+\n+  private String country;\n+\n+  private char active;\n+\n+    public long getAirlineID() {\n+        return airlineID;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getAlias() {\n+        return alias;\n+    }\n+\n+    public String getiATA() {\n+        return iATA;\n+    }\n+\n+    public String getiCAO() {\n+        return iCAO;\n+    }\n+\n+    public String getCallsign() {\n+        return callsign;\n+    }\n+\n+    public String getCountry() {\n+        return country;\n+    }\n+\n+    public char getActive() {\n+        return active;\n+    }\n+\n+\n+\n+\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/model/Airline.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/model/Airline.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c09f510c"
        },
        {
          "diff": "@@ -28,4 +28,115 @@ Sample entries\n 3127,\"Pokhara Airport\",\"Pokhara\",\"Nepal\",\"PKR\",\"VNPK\",28.200899124145508,83.98210144042969,2712,5.75,\"N\",\"Asia/Katmandu\",\"airport\",\"OurAirports\"\n 8810,\"Hamburg Hbf\",\"Hamburg\",\"Germany\",\"ZMB\",\\N,53.552776,10.006683,30,1,\"E\",\"Europe/Berlin\",\"station\",\"User\"\n    */\n+\n+  public Airport() {\n+  }\n+\n+    public Airport(long airportID, String name, String city, String country, String iATA, String iCAO, long latitude, long longitude, long altitude, long timezone, long daylightSavingsTime, String databaseTimeZone, String type, String callsign, String source) {\n+        this.airportID = airportID;\n+        this.name = name;\n+        this.city = city;\n+        this.country = country;\n+        this.iATA = iATA;\n+        this.iCAO = iCAO;\n+        this.latitude = latitude;\n+        this.longitude = longitude;\n+        this.altitude = altitude;\n+        this.timezone = timezone;\n+        this.daylightSavingsTime = daylightSavingsTime;\n+        this.databaseTimeZone = databaseTimeZone;\n+        this.type = type;\n+        this.callsign = callsign;\n+        this.source = source;\n+    }\n+\n+    public long getAirportID() {\n+        return airportID;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getCity() {\n+        return city;\n+    }\n+\n+    public String getCountry() {\n+        return country;\n+    }\n+\n+    public String getiATA() {\n+        return iATA;\n+    }\n+\n+    public String getiCAO() {\n+        return iCAO;\n+    }\n+\n+    public long getLatitude() {\n+        return latitude;\n+    }\n+\n+    public long getLongitude() {\n+        return longitude;\n+    }\n+\n+    public long getAltitude() {\n+        return altitude;\n+    }\n+\n+    public long getTimezone() {\n+        return timezone;\n+    }\n+\n+    public long getDaylightSavingsTime() {\n+        return daylightSavingsTime;\n+    }\n+\n+    public String getDatabaseTimeZone() {\n+        return databaseTimeZone;\n+    }\n+\n+    public String getType() {\n+        return type;\n+    }\n+\n+    public String getCallsign() {\n+        return callsign;\n+    }\n+\n+    public String getSource() {\n+        return source;\n+    }\n+\n+    private long airportID;\n+\n+    private String name;\n+\n+    private String city;\n+\n+    private String country;\n+\n+    private String iATA;\n+\n+    private String iCAO;\n+\n+    private long latitude;\n+\n+    private long longitude;\n+\n+    private long altitude;\n+\n+    private long timezone;\n+\n+    private long daylightSavingsTime;\n+\n+    private String databaseTimeZone;\n+\n+    private String type;\n+\n+    private String callsign;\n+\n+    private String source;\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/model/Airport.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/model/Airport.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c09f510c"
        }
      ]
    },
    {
      "id": "ab80390dabd289148c4d3e9a80f749cfe865ac24",
      "project_id": 4888518,
      "message": "Hotels\n",
      "title": "Hotels",
      "short_id": "ab80390d",
      "author_name": "V0L0DYMYR",
      "branches": null,
      "created_at": "2018-01-15T13:54:17Z",
      "diffs": [
        {
          "diff": "Binary files /dev/null and b/flights-app/res.tar differ\n",
          "old_path": "flights-app/res.tar",
          "new_path": "flights-app/res.tar",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "ab80390d"
        },
        {
          "diff": "@@ -0,0 +1,84 @@\n+<!DOCTYPE html>\n+<html>\n+<head>\n+  <title>hotels Search</title>\n+  <link rel=\"stylesheet\" href=\"/bootstrap.css\" type=\"text/css\">\n+</head>\n+<body>\n+\n+<div class=\"container\">\n+\n+  <div class=\"row\">\n+    <a class=\"btn btn-link\" href=\"/search\">Flights</a>\n+  </div>\n+\n+  <div class=\"row\">\n+\n+    <div class=\"col pb-3\">\n+      <div class=\"form-inline\">\n+\n+        <div class=\"input-group w-100\">\n+          <input type=\"text\" class=\"form-control\" name=\"city\" placeholder=\"City ...\">\n+          <button id=\"searchBtn\"\n+                  class=\"btn btn-primary input-group-addon\">Search\n+          </button>\n+        </div>\n+\n+      </div>\n+    </div>\n+  </div>\n+\n+  <div class=\"row\">\n+    <div class=\"col\">\n+      <div id=\"hotelsContainer\"></div>\n+    </div>\n+  </div>\n+</div>\n+\n+<script id=\"hotelsTemplate\" type=\"text/x-jQuery-tmpl\">\n+  <div class=\"card\">\n+    <table class=\"table\">\n+      <thead>\n+      <tr>\n+        <th>#</th>\n+        <th>Name</th>\n+        <th>City</th>\n+        <th>Stars</th>\n+      </tr>\n+      </thead>\n+\n+      {{each hotels}}\n+      <tr>\n+        <td>${id}</td>\n+        <td>${hotelName}</td>\n+        <td>${hotelCity}</td>\n+        <td>${hotelStarRating}</td>\n+      </tr>\n+      {{/each}}\n+    </table>\n+  </div>\n+</script>\n+\n+<script src=\"/jquery.min.js\"></script>\n+<script type=\"text/javascript\"\n+        src=\"http://ajax.aspnetcdn.com/ajax/jquery.templates/beta1/jquery.tmpl.js\"></script>\n+<script>\n+  $(document).ready(function () {\n+\n+    $('#searchBtn').click(function () {\n+      var city = $(\"input[name=city]\").val();\n+      $.get('/hotels/search?search=' + city, handlehotels);\n+    });\n+\n+    $.get('/hotels/top', handlehotels);\n+\n+    function handlehotels(data) {\n+      var hotels = JSON.parse(data);\n+      $(\"#hotelsContainer\").empty();\n+      $(\"#hotelsTemplate\").tmpl({hotels: hotels}).appendTo(\"#hotelsContainer\");\n+    }\n+  });\n+</script>\n+\n+</body>\n+</html>\n",
          "old_path": "flights-app/resources/hotels.html",
          "new_path": "flights-app/resources/hotels.html",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "ab80390d"
        },
        {
          "diff": "@@ -1,8 +1,16 @@\n \n-CREATE TABLE  IF NOT EXISTS FLIGHTS (\n+CREATE TABLE  IF NOT EXISTS FLIGHTS(\n   `ID` BIGINT PRIMARY KEY AUTO_INCREMENT,\n   `DEPARTURE_TIME` BIGINT NOT NULL,\n   `FROM` VARCHAR(255) NOT NULL ,\n   `TO` VARCHAR(255) NOT NULL,\n   `ARRIVAL_TIME` BIGINT NOT NULL\n+);\n+\n+\n+CREATE TABLE  IF NOT EXISTS HOTELS(\n+  `ID` BIGINT PRIMARY KEY AUTO_INCREMENT,\n+  `HOTELNAME` VARCHAR(255) NOT NULL ,\n+  `HOTELCITY` VARCHAR(255) NOT NULL,\n+  `HOTELSTARRATING` BIGINT NOT NULL\n );\n\\ No newline at end of file\n",
          "old_path": "flights-app/resources/schema.sql",
          "new_path": "flights-app/resources/schema.sql",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "ab80390d"
        },
        {
          "diff": "@@ -8,6 +8,12 @@\n \n <div class=\"container\">\n \n+  <div class=\"row\">\n+    <div class=\"col\">\n+      <a class=\"btn btn-link\" href=\"/hotels\">Hotels</a>\n+    </div>\n+  </div>\n+\n   <div class=\"row\">\n     <div class=\"col pt-3\">\n       <div class=\"jumbotron w-100 centered\">\n@@ -91,5 +97,6 @@\n     }\n   });\n </script>\n+\n </body>\n </html>\n",
          "old_path": "flights-app/resources/search.html",
          "new_path": "flights-app/resources/search.html",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "ab80390d"
        },
        {
          "diff": "@@ -6,47 +6,50 @@ import java.io.IOException;\n import org.eclipse.jetty.server.Server;\n import org.eclipse.jetty.servlet.ServletContextHandler;\n import org.eclipse.jetty.servlet.ServletHolder;\n+import ua.danit.application.dao.FlightDao;\n import ua.danit.application.resources.FlightResource;\n+import ua.danit.application.resources.HotelResource;\n import ua.danit.framework.DispatcherServlet;\n import ua.danit.framework.LoginServlet;\n import ua.danit.framework.LogoutServlet;\n \n public class WebApp {\n \n-  /**\n-   * This method is the entry point of our application ...\n-   * creates a server, creates a handler, parser classes\n-   */\n+    /**\n+     * This method is the entry point of our application ...\n+     * creates a server, creates a handler, parser classes\n+     */\n \n-  public static void main(String[] args) throws Exception {\n+    public static void main(String[] args) throws Exception {\n \n-    Server server = new Server(8080);\n-    ServletContextHandler handler = new ServletContextHandler();\n+        Server server = new Server(8080);\n+        ServletContextHandler handler = new ServletContextHandler();\n \n-    DispatcherServlet servlet = new DispatcherServlet(Resource.class)\n-        .addFileMapping(\"/\", new File(\"flights-app/resources/search.html\"))\n-//                .addFileMapping(\"/login\", new File(\"flights-app/resources/login.html\"))\n-        .addFileMapping(\"/search\", new File(\"flights-app/resources/search.html\"))\n-        .addFileMapping(\"/bootstrap.css\", new File(\"flights-app/resources/bootstrap.min.css\"))\n-        .addFileMapping(\"/jquery.min.js\", new File(\"flights-app/resources/js/jquery.min.js\"));\n+        DispatcherServlet servlet = new DispatcherServlet(Resource.class)\n+                .addFileMapping(\"/\", new File(\"flights-app/resources/search.html\"))\n+                .addFileMapping(\"/search\", new File(\"flights-app/resources/search.html\"))\n+                .addFileMapping(\"/hotels\", new File(\"flights-app/resources/hotels.html\"))\n+                .addFileMapping(\"/bootstrap.css\", new File(\"flights-app/resources/bootstrap.min.css\"))\n+                .addFileMapping(\"/jquery.min.js\", new File(\"flights-app/resources/js/jquery.min.js\"));\n \n-    servlet.addResource(FlightResource.class);\n+        servlet.addResource(FlightResource.class)\n+        .addResource(HotelResource.class);\n \n-    handler.addServlet(new ServletHolder(servlet), \"/*\");\n+        handler.addServlet(new ServletHolder(servlet), \"/*\");\n \n-    LoginServlet loginServlet = new LoginServlet();\n-    handler.addServlet(new ServletHolder(loginServlet), \"/login\");\n+        LoginServlet loginServlet = new LoginServlet();\n+        handler.addServlet(new ServletHolder(loginServlet), \"/login\");\n \n-    LogoutServlet logoutServlet = new LogoutServlet();\n-    handler.addServlet(new ServletHolder(logoutServlet), \"/logout\");\n+        LogoutServlet logoutServlet = new LogoutServlet();\n+        handler.addServlet(new ServletHolder(logoutServlet), \"/logout\");\n \n-    server.setHandler(handler);\n-    server.start();\n-    server.join();\n-  }\n+        server.setHandler(handler);\n+        server.start();\n+        server.join();\n+    }\n \n-  public static void main1(String[] args) throws IOException {\n+    public static void main1(String[] args) throws IOException {\n //    String flights = new FlightResource(new FlightDao()).getTopFlights();\n //    System.out.println(flights);\n-  }\n+    }\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "ab80390d"
        },
        {
          "diff": "@@ -0,0 +1,26 @@\n+package ua.danit.application.dao;\n+\n+\n+import ua.danit.application.model.Hotel;\n+import ua.danit.framework.utils.EntityUtils;\n+\n+public class HotelDao {\n+    public Iterable<Hotel> getTopHotel(int limit) {\n+        String sql = \"select ID as id, \" +\n+                \"`HOTELNAME` as `hotelName`, \" +\n+                \"`HOTELCITY` as `hotelCity`,\"+\n+                \"`HOTELSTARRATING` as `hotelStarRating` \"+\n+                \"from HOTELS\";\n+        return EntityUtils.nativeQuery(sql, Hotel.class);\n+    }\n+    public Iterable<Hotel> searchHotels(String str) {\n+        String sql =\"select ID as id, \" +\n+                \"`HOTELNAME` as `hotel`, \" +\n+                \"`HOTELCITY` as `city`,\"+\n+                \"`HOTELSTARRATING` as `stars` \"+\n+                \"from HOTELS \" +\n+                \"where `HOTELNAME` like'\" + str + \"%' \";\n+\n+        return EntityUtils.nativeQuery(sql, Hotel.class);\n+    }\n+}\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/dao/HotelDao.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/dao/HotelDao.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "ab80390d"
        },
        {
          "diff": "@@ -0,0 +1,32 @@\n+package ua.danit.application.model;\n+\n+public class Hotel {\n+    private Long id;\n+    private String hotelName;\n+    private String hotelCity;\n+    private Long hotelStarRating;\n+\n+    public Hotel(){\n+    }\n+\n+   public Hotel(Long id, String hotelName, String hotelCity, Long hotelStarRating, boolean freeRooms ){\n+        this.id = id;\n+        this.hotelName = hotelName;\n+        this.hotelCity = hotelCity;\n+        this.hotelStarRating = hotelStarRating;\n+   }\n+\n+    public Long getId() { return id; }\n+\n+    public String getHotelName() {\n+        return hotelName;\n+    }\n+\n+    public String getHotelCity() {\n+        return hotelCity;\n+    }\n+\n+    public Long getHotelStarRating() {\n+        return hotelStarRating;\n+    }\n+}\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/model/Hotel.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/model/Hotel.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "ab80390d"
        },
        {
          "diff": "@@ -7,15 +7,15 @@ import javax.persistence.Table;\n @Table(name = \"ROUTES\")\n public class Route {\n \n-  String airline;  // 2-letter (IATA) or 3-letter (ICAO) code of the airline.\n-  Integer airlineId;  //Unique OpenFlights identifier for airline (see Airline).\n-  String sourceAirport;  //3-letter (IATA) or 4-letter (ICAO) code of the source airport.\n+  String airline;\t// 2-letter (IATA) or 3-letter (ICAO) code of the airline.\n+  Integer airlineId;\t//Unique OpenFlights identifier for airline (see Airline).\n+  String sourceAirport;\t//3-letter (IATA) or 4-letter (ICAO) code of the source airport.\n   Integer sourceAirportId; //ID\tUnique OpenFlights identifier for source airport (see Airport)\n-  String destinationAirport;  //3-letter (IATA) or 4-letter (ICAO) code of the destination airport.\n-  Integer destinationAirportId;  //Unique OpenFlights identifier for destination airport (see Airport)\n-  Boolean codeshare;  //\"Y\" if this flight is a codeshare (that is, not operated by Airline, but another carrier), empty otherwise.\n-  Integer stops;  //Number of stops on this flight (\"0\" for direct)\n-  String equipment;  //3-letter codes for plane type(s) generally used on this flight, separated by spaces\n+  String destinationAirport;\t//3-letter (IATA) or 4-letter (ICAO) code of the destination airport.\n+  Integer destinationAirportId;\t//Unique OpenFlights identifier for destination airport (see Airport)\n+  Boolean codeshare;\t//\"Y\" if this flight is a codeshare (that is, not operated by Airline, but another carrier), empty otherwise.\n+  Integer stops;\t//Number of stops on this flight (\"0\" for direct)\n+  String equipment;\t//3-letter codes for plane type(s) generally used on this flight, separated by spaces\n \n   /**\n    Sample entries\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/model/Route.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/model/Route.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "ab80390d"
        },
        {
          "diff": "@@ -0,0 +1,38 @@\n+package ua.danit.application.resources;\n+\n+import org.codehaus.jackson.map.ObjectMapper;\n+import ua.danit.application.dao.HotelDao;\n+import ua.danit.application.model.Hotel;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.QueryParam;\n+import java.io.IOException;\n+\n+public class HotelResource {\n+\n+private HotelDao hotelDao;\n+\n+    @Path(\"/hotels/top\")\n+    @GET\n+    public String getTopHotels() throws IOException {\n+        if (hotelDao == null) {\n+            hotelDao = new HotelDao();\n+        }\n+\n+        Iterable<Hotel> hotels = hotelDao.getTopHotel(5);\n+        ObjectMapper mapper = new ObjectMapper();\n+        return mapper.writeValueAsString(hotels);\n+    }\n+\n+    @Path(\"/hotels/search\")\n+    @GET\n+    public String getSearchHotels(@QueryParam(\"search\") String search) throws IOException {\n+        if (hotelDao == null) {\n+            hotelDao = new HotelDao();\n+        }\n+\n+        Iterable<Hotel> hotels = hotelDao.searchHotels(search);\n+        ObjectMapper mapper = new ObjectMapper();\n+        return mapper.writeValueAsString(hotels);\n+    }\n+}\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/resources/HotelResource.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/resources/HotelResource.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "ab80390d"
        },
        {
          "diff": "@@ -39,8 +39,9 @@ public class DispatcherServlet extends HttpServlet {\n     }\n   }\n \n-  public void addResource(Class<?> rClass) {\n+  public DispatcherServlet addResource(Class<?> rClass) {\n     this.resources.putAll(Parser.getClassInvocations(rClass));\n+    return this;\n   }\n \n \n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "ab80390d"
        },
        {
          "diff": "@@ -1,19 +1,14 @@\n package ua.danit.framework.utils;\n \n+import com.google.common.collect.Lists;\n+\n import java.lang.reflect.Field;\n-import java.sql.Connection;\n-import java.sql.DriverManager;\n-import java.sql.ResultSet;\n-import java.sql.ResultSetMetaData;\n-import java.sql.SQLException;\n-import java.sql.Statement;\n+import java.sql.*;\n import java.util.List;\n \n-import com.google.common.collect.Lists;\n-\n public class EntityUtils {\n \n-  public static <T> List<T> nativeQuery(String sql, Class<T> clazz) {\n+  public static  <T> List<T> nativeQuery(String sql, Class<T> clazz) {\n     List<T> result = Lists.newArrayList();\n \n \n@@ -27,7 +22,7 @@ public class EntityUtils {\n       ResultSet resultSet = statement.executeQuery(sql);\n       ResultSetMetaData metaData = resultSet.getMetaData();\n \n-      while(resultSet.next()) {\n+      while (resultSet.next()) {\n \n         T flight1 = getInstance(clazz, resultSet, metaData);\n         result.add(flight1);\n@@ -44,12 +39,11 @@ public class EntityUtils {\n     return result;\n   }\n \n-  public static <T> T getInstance(Class<T> clazz, ResultSet resultSet, ResultSetMetaData metaData)\n-      throws InstantiationException, IllegalAccessException, SQLException, NoSuchFieldException {\n+  public static  <T> T getInstance(Class<T> clazz, ResultSet resultSet, ResultSetMetaData metaData) throws InstantiationException, IllegalAccessException, SQLException, NoSuchFieldException {\n     T instance = clazz.newInstance();\n     int columnCount = metaData.getColumnCount();\n \n-    for (int i = 1; i<=columnCount; i++) {\n+    for (int i = 1; i <= columnCount; i++) {\n \n       String columnLabel = metaData.getColumnLabel(i);\n       Field field = clazz.getDeclaredField(columnLabel);\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/utils/EntityUtils.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/utils/EntityUtils.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "ab80390d"
        },
        {
          "diff": "@@ -23,10 +23,11 @@\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-compiler-plugin</artifactId>\n                 <configuration>\n-                    <target>${target.java}</target>\n-                    <source>${target.java}</source>\n+                    <target>1.8</target>\n+                    <source>1.8</source>\n                 </configuration>\n             </plugin>\n+<!--\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-checkstyle-plugin</artifactId>\n@@ -56,6 +57,7 @@\n                     </execution>\n                 </executions>\n             </plugin>\n+-->\n         </plugins>\n \n     </build>\n",
          "old_path": "pom.xml",
          "new_path": "pom.xml",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "ab80390d"
        }
      ]
    },
    {
      "id": "e13edabc9a5724bd098f0d8429f71385f3fbd816",
      "project_id": 4888518,
      "message": "frontend for hotels\n",
      "title": "frontend for hotels",
      "short_id": "e13edabc",
      "author_name": "V0L0DYMYR",
      "branches": null,
      "created_at": "2018-01-15T13:46:02Z",
      "diffs": [
        {
          "diff": "@@ -0,0 +1,84 @@\n+<!DOCTYPE html>\n+<html>\n+<head>\n+  <title>hotels Search</title>\n+  <link rel=\"stylesheet\" href=\"/bootstrap.css\" type=\"text/css\">\n+</head>\n+<body>\n+\n+<div class=\"container\">\n+\n+  <div class=\"row\">\n+    <a class=\"btn btn-link\" href=\"/search\">Flights</a>\n+  </div>\n+\n+  <div class=\"row\">\n+\n+    <div class=\"col pb-3\">\n+      <div class=\"form-inline\">\n+\n+        <div class=\"input-group w-100\">\n+          <input type=\"text\" class=\"form-control\" name=\"city\" placeholder=\"City ...\">\n+          <button id=\"searchBtn\"\n+                  class=\"btn btn-primary input-group-addon\">Search\n+          </button>\n+        </div>\n+\n+      </div>\n+    </div>\n+  </div>\n+\n+  <div class=\"row\">\n+    <div class=\"col\">\n+      <div id=\"hotelsContainer\"></div>\n+    </div>\n+  </div>\n+</div>\n+\n+<script id=\"hotelsTemplate\" type=\"text/x-jQuery-tmpl\">\n+  <div class=\"card\">\n+    <table class=\"table\">\n+      <thead>\n+      <tr>\n+        <th>#</th>\n+        <th>Name</th>\n+        <th>City</th>\n+        <th>Stars</th>\n+      </tr>\n+      </thead>\n+\n+      {{each hotels}}\n+      <tr>\n+        <td>${id}</td>\n+        <td>${hotelName}</td>\n+        <td>${hotelCity}</td>\n+        <td>${hotelStarRating}</td>\n+      </tr>\n+      {{/each}}\n+    </table>\n+  </div>\n+</script>\n+\n+<script src=\"/jquery.min.js\"></script>\n+<script type=\"text/javascript\"\n+        src=\"http://ajax.aspnetcdn.com/ajax/jquery.templates/beta1/jquery.tmpl.js\"></script>\n+<script>\n+  $(document).ready(function () {\n+\n+    $('#searchBtn').click(function () {\n+      var city = $(\"input[name=city]\").val();\n+      $.get('/hotels/search?search=' + city, handlehotels);\n+    });\n+\n+    $.get('/hotels/top', handlehotels);\n+\n+    function handlehotels(data) {\n+      var hotels = JSON.parse(data);\n+      $(\"#hotelsContainer\").empty();\n+      $(\"#hotelsTemplate\").tmpl({hotels: hotels}).appendTo(\"#hotelsContainer\");\n+    }\n+  });\n+</script>\n+\n+</body>\n+</html>\n",
          "old_path": "flights-app/resources/hotels.html",
          "new_path": "flights-app/resources/hotels.html",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "e13edabc"
        },
        {
          "diff": "@@ -8,6 +8,12 @@\n \n <div class=\"container\">\n \n+  <div class=\"row\">\n+    <div class=\"col\">\n+      <a class=\"btn btn-link\" href=\"/hotels\">Hotels</a>\n+    </div>\n+  </div>\n+\n   <div class=\"row\">\n     <div class=\"col pt-3\">\n       <div class=\"jumbotron w-100 centered\">\n",
          "old_path": "flights-app/resources/search.html",
          "new_path": "flights-app/resources/search.html",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "e13edabc"
        },
        {
          "diff": "@@ -8,6 +8,7 @@ import org.eclipse.jetty.servlet.ServletContextHandler;\n import org.eclipse.jetty.servlet.ServletHolder;\n import ua.danit.application.dao.FlightDao;\n import ua.danit.application.resources.FlightResource;\n+import ua.danit.application.resources.HotelResource;\n import ua.danit.framework.DispatcherServlet;\n import ua.danit.framework.LoginServlet;\n import ua.danit.framework.LogoutServlet;\n@@ -26,12 +27,13 @@ public class WebApp {\n \n         DispatcherServlet servlet = new DispatcherServlet(Resource.class)\n                 .addFileMapping(\"/\", new File(\"flights-app/resources/search.html\"))\n-//                .addFileMapping(\"/login\", new File(\"flights-app/resources/login.html\"))\n                 .addFileMapping(\"/search\", new File(\"flights-app/resources/search.html\"))\n+                .addFileMapping(\"/hotels\", new File(\"flights-app/resources/hotels.html\"))\n                 .addFileMapping(\"/bootstrap.css\", new File(\"flights-app/resources/bootstrap.min.css\"))\n                 .addFileMapping(\"/jquery.min.js\", new File(\"flights-app/resources/js/jquery.min.js\"));\n \n-        servlet.addResource(FlightResource.class);\n+        servlet.addResource(FlightResource.class)\n+        .addResource(HotelResource.class);\n \n         handler.addServlet(new ServletHolder(servlet), \"/*\");\n \n",
          "old_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "e13edabc"
        },
        {
          "diff": "@@ -7,9 +7,9 @@ import ua.danit.framework.utils.EntityUtils;\n public class HotelDao {\n     public Iterable<Hotel> getTopHotel(int limit) {\n         String sql = \"select ID as id, \" +\n-                \"`HOTELNAME` as `hotel`, \" +\n-                \"`HOTELCITY` as `city`,\"+\n-                \"`HOTELSTARRATING` as `stars`,\"+\n+                \"`HOTELNAME` as `hotelName`, \" +\n+                \"`HOTELCITY` as `hotelCity`,\"+\n+                \"`HOTELSTARRATING` as `hotelStarRating` \"+\n                 \"from HOTELS\";\n         return EntityUtils.nativeQuery(sql, Hotel.class);\n     }\n@@ -17,8 +17,8 @@ public class HotelDao {\n         String sql =\"select ID as id, \" +\n                 \"`HOTELNAME` as `hotel`, \" +\n                 \"`HOTELCITY` as `city`,\"+\n-                \"`HOTELSTARRATING` as `stars`,\"+\n-                \"from HOTELS\" +\n+                \"`HOTELSTARRATING` as `stars` \"+\n+                \"from HOTELS \" +\n                 \"where `HOTELNAME` like'\" + str + \"%' \";\n \n         return EntityUtils.nativeQuery(sql, Hotel.class);\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/dao/HotelDao.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/dao/HotelDao.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "e13edabc"
        },
        {
          "diff": "@@ -39,8 +39,9 @@ public class DispatcherServlet extends HttpServlet {\n     }\n   }\n \n-  public void addResource(Class<?> rClass) {\n+  public DispatcherServlet addResource(Class<?> rClass) {\n     this.resources.putAll(Parser.getClassInvocations(rClass));\n+    return this;\n   }\n \n \n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "e13edabc"
        }
      ]
    },
    {
      "id": "d2b649c135d8e1027790538727e570445060c886",
      "project_id": 4888518,
      "message": "port 8082 -> 8080\n",
      "title": "port 8082 -> 8080",
      "short_id": "d2b649c1",
      "author_name": "Oleksandr Rodiuk",
      "branches": null,
      "created_at": "2018-01-15T13:46:01Z",
      "diffs": [
        {
          "diff": "@@ -21,7 +21,7 @@ public class WebApp {\n \n     public static void main(String[] args) throws Exception {\n \n-        Server server = new Server(8082);\n+        Server server = new Server(8080);\n         ServletContextHandler handler = new ServletContextHandler();\n \n         DispatcherServlet servlet = new DispatcherServlet(Resource.class)\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "d2b649c1"
        }
      ]
    },
    {
      "id": "01a4768036721489093dae09e5e29c5358615eba",
      "project_id": 4888518,
      "message": "add Hotel HotelDao HotelResource\n",
      "title": "add Hotel HotelDao HotelResource",
      "short_id": "01a47680",
      "author_name": "Oleksandr Rodiuk",
      "branches": null,
      "created_at": "2018-01-15T13:46:01Z",
      "diffs": [
        {
          "diff": "Binary files /dev/null and b/flights-app/res.tar differ\n",
          "old_path": "flights-app/res.tar",
          "new_path": "flights-app/res.tar",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "01a47680"
        },
        {
          "diff": "@@ -1,8 +1,16 @@\n \n-CREATE TABLE  IF NOT EXISTS FLIGHTS (\n+CREATE TABLE  IF NOT EXISTS FLIGHTS(\n   `ID` BIGINT PRIMARY KEY AUTO_INCREMENT,\n   `DEPARTURE_TIME` BIGINT NOT NULL,\n   `FROM` VARCHAR(255) NOT NULL ,\n   `TO` VARCHAR(255) NOT NULL,\n   `ARRIVAL_TIME` BIGINT NOT NULL\n+);\n+\n+\n+CREATE TABLE  IF NOT EXISTS HOTELS(\n+  `ID` BIGINT PRIMARY KEY AUTO_INCREMENT,\n+  `HOTELNAME` VARCHAR(255) NOT NULL ,\n+  `HOTELCITY` VARCHAR(255) NOT NULL,\n+  `HOTELSTARRATING` BIGINT NOT NULL\n );\n\\ No newline at end of file\n",
          "old_path": "flights-app/resources/schema.sql",
          "new_path": "flights-app/resources/schema.sql",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "01a47680"
        },
        {
          "diff": "@@ -91,5 +91,6 @@\n     }\n   });\n </script>\n+\n </body>\n </html>\n",
          "old_path": "flights-app/resources/search.html",
          "new_path": "flights-app/resources/search.html",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "01a47680"
        },
        {
          "diff": "@@ -21,7 +21,7 @@ public class WebApp {\n \n     public static void main(String[] args) throws Exception {\n \n-        Server server = new Server(8080);\n+        Server server = new Server(8082);\n         ServletContextHandler handler = new ServletContextHandler();\n \n         DispatcherServlet servlet = new DispatcherServlet(Resource.class)\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "01a47680"
        },
        {
          "diff": "@@ -0,0 +1,26 @@\n+package ua.danit.application.dao;\n+\n+\n+import ua.danit.application.model.Hotel;\n+import ua.danit.framework.utils.EntityUtils;\n+\n+public class HotelDao {\n+    public Iterable<Hotel> getTopHotel(int limit) {\n+        String sql = \"select ID as id, \" +\n+                \"`HOTELNAME` as `hotel`, \" +\n+                \"`HOTELCITY` as `city`,\"+\n+                \"`HOTELSTARRATING` as `stars`,\"+\n+                \"from HOTELS\";\n+        return EntityUtils.nativeQuery(sql, Hotel.class);\n+    }\n+    public Iterable<Hotel> searchHotels(String str) {\n+        String sql =\"select ID as id, \" +\n+                \"`HOTELNAME` as `hotel`, \" +\n+                \"`HOTELCITY` as `city`,\"+\n+                \"`HOTELSTARRATING` as `stars`,\"+\n+                \"from HOTELS\" +\n+                \"where `HOTELNAME` like'\" + str + \"%' \";\n+\n+        return EntityUtils.nativeQuery(sql, Hotel.class);\n+    }\n+}\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/dao/HotelDao.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/dao/HotelDao.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "01a47680"
        },
        {
          "diff": "@@ -0,0 +1,32 @@\n+package ua.danit.application.model;\n+\n+public class Hotel {\n+    private Long id;\n+    private String hotelName;\n+    private String hotelCity;\n+    private Long hotelStarRating;\n+\n+    public Hotel(){\n+    }\n+\n+   public Hotel(Long id, String hotelName, String hotelCity, Long hotelStarRating, boolean freeRooms ){\n+        this.id = id;\n+        this.hotelName = hotelName;\n+        this.hotelCity = hotelCity;\n+        this.hotelStarRating = hotelStarRating;\n+   }\n+\n+    public Long getId() { return id; }\n+\n+    public String getHotelName() {\n+        return hotelName;\n+    }\n+\n+    public String getHotelCity() {\n+        return hotelCity;\n+    }\n+\n+    public Long getHotelStarRating() {\n+        return hotelStarRating;\n+    }\n+}\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/model/Hotel.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/model/Hotel.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "01a47680"
        },
        {
          "diff": "@@ -0,0 +1,38 @@\n+package ua.danit.application.resources;\n+\n+import org.codehaus.jackson.map.ObjectMapper;\n+import ua.danit.application.dao.HotelDao;\n+import ua.danit.application.model.Hotel;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.QueryParam;\n+import java.io.IOException;\n+\n+public class HotelResource {\n+\n+private HotelDao hotelDao;\n+\n+    @Path(\"/hotels/top\")\n+    @GET\n+    public String getTopHotels() throws IOException {\n+        if (hotelDao == null) {\n+            hotelDao = new HotelDao();\n+        }\n+\n+        Iterable<Hotel> hotels = hotelDao.getTopHotel(5);\n+        ObjectMapper mapper = new ObjectMapper();\n+        return mapper.writeValueAsString(hotels);\n+    }\n+\n+    @Path(\"/hotels/search\")\n+    @GET\n+    public String getSearchHotels(@QueryParam(\"search\") String search) throws IOException {\n+        if (hotelDao == null) {\n+            hotelDao = new HotelDao();\n+        }\n+\n+        Iterable<Hotel> hotels = hotelDao.searchHotels(search);\n+        ObjectMapper mapper = new ObjectMapper();\n+        return mapper.writeValueAsString(hotels);\n+    }\n+}\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/resources/HotelResource.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/resources/HotelResource.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "01a47680"
        },
        {
          "diff": "@@ -23,10 +23,11 @@\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-compiler-plugin</artifactId>\n                 <configuration>\n-                    <target>${target.java}</target>\n-                    <source>${target.java}</source>\n+                    <target>1.8</target>\n+                    <source>1.8</source>\n                 </configuration>\n             </plugin>\n+<!--\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-checkstyle-plugin</artifactId>\n@@ -56,6 +57,7 @@\n                     </execution>\n                 </executions>\n             </plugin>\n+-->\n         </plugins>\n \n     </build>\n",
          "old_path": "pom.xml",
          "new_path": "pom.xml",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "01a47680"
        }
      ]
    },
    {
      "id": "07abf48756157a6c1edd84cd7714626f6878e135",
      "project_id": 4888518,
      "message": "add departure time and arrival time\nchange in the MySQL row to DEPARTURE_CITY DESTINATION_CITY DEPARTURE_TIME ARRIVAL_TIME\n",
      "title": "add departure time and arrival time",
      "short_id": "07abf487",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2018-01-15T13:46:01Z",
      "diffs": [
        {
          "diff": "@@ -11,18 +11,23 @@ import java.util.List;\n public class FlightDao {\n \n   public Iterable<Flight> getTopFlight(int limit) {\n-    String sql = \"select ID as id, `DEPARTURE CITY` as `from`, \" +\n-        \" `DESTINATION CITY` as `to`  from FLIGHTS\";\n+    String sql = \"select ID as id, `DEPARTURE_CITY` as `from`, \" +\n+        \" `DESTINATION_CITY` as `to`,\"+\n+        \"`DEPARTURE_TIME` as `departureTime`,\"+\n+        \"`ARRIVAL_TIME` as `arrivalTime`\"+\n+        \"from FLIGHTS\";\n     return EntityUtils.nativeQuery(sql, Flight.class);\n   }\n \n \n   public Iterable<Flight> searchFlights(String str) {\n-    String sql = \"select ID as id, `DEPARTURE CITY` as `from`, \" +\n-        \"`DESTINATION CITY` as `to` \" +\n+    String sql = \"select ID as id, `DEPARTURE_CITY` as `from`, \" +\n+        \" `DESTINATION_CITY` as `to`,\"+\n+        \"`DEPARTURE_TIME` as `departureTime`,\"+\n+        \"`ARRIVAL_TIME` as `arrivalTime`\"+\n         \"from FLIGHTS \" +\n-        \"where `DEPARTURE CITY` like'\" + str + \"%' \" +\n-        \"or `DESTINATION CITY` like '\" + str + \"%'\";\n+        \"where `DEPARTURE_CITY` like'\" + str + \"%' \" +\n+        \"or `DESTINATION_CITY` like '\" + str + \"%'\";\n     return EntityUtils.nativeQuery(sql, Flight.class);\n   }\n \n",
          "old_path": "flights-app/src/main/java/ua/danit/application/dao/FlightDao.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/dao/FlightDao.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "07abf487"
        }
      ]
    },
    {
      "id": "14b51a71f271c6e3e5ff39fa50458b4c39bf2448",
      "project_id": 4888518,
      "message": "added UntityUtils\n",
      "title": "added UntityUtils",
      "short_id": "14b51a71",
      "author_name": "Volodymyr Derkach",
      "branches": null,
      "created_at": "2018-01-15T13:46:01Z",
      "diffs": [
        {
          "diff": "@@ -50,6 +50,7 @@\n   <table class=\"table\">\n     <thead>\n     <tr>\n+      <th>#</th>\n       <th>From</th>\n       <th>To</th>\n       <th>Departure Time</th>\n@@ -59,6 +60,7 @@\n \n     {{each flights}}\n     <tr>\n+      <td>${id}</td>\n       <td>${from}</td>\n       <td>${to}</td>\n       <td>${departureTime}</td>\n",
          "old_path": "flights-app/resources/search.html",
          "new_path": "flights-app/resources/search.html",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "14b51a71"
        },
        {
          "diff": "@@ -2,6 +2,7 @@ package ua.danit.application.dao;\n \n import com.google.common.collect.Lists;\n import ua.danit.application.model.Flight;\n+import ua.danit.framework.utils.EntityUtils;\n \n import java.lang.reflect.Field;\n import java.sql.*;\n@@ -10,101 +11,19 @@ import java.util.List;\n public class FlightDao {\n \n   public Iterable<Flight> getTopFlight(int limit) {\n-      String sql = \"select `DEPARTURE CITY` as `from` from FLIGHTS\";\n-\n-    List<Flight> result = Lists.newArrayList();\n-\n-\n-    String PASSWD = \"danit1\";\n-    String DB_URL = \"jdbc:mysql://mysql8.db4free.net:3307/danit_flights?useSSL=false\";\n-    String USER = \"danit1\";\n-\n-    try {\n-      Connection con = DriverManager.getConnection(DB_URL,USER,PASSWD);\n-      Statement statement = con.createStatement();\n-      ResultSet resultSet = statement.executeQuery(sql);\n-      ResultSetMetaData metaData = resultSet.getMetaData();\n-\n-      while (resultSet.next()) {\n-\n-/*\n-        Long id = resultSet.getLong(\"id\");\n-        Long departureTime = resultSet.getLong(\"DEPARTURE TIME\");\n-        Long arrivalTime = resultSet.getLong(\"ARRIVAL TIME\");\n-        String from = resultSet.getString(\"DEPARTURE CITY\");\n-        String to = resultSet.getString(\"DESTINATION CITY\");\n-\n-\n-        Flight flight = new Flight(id, from, to, departureTime, arrivalTime);\n-\n-        Flight.class.getFields();\n-*/\n-\n-        Flight flight1 = Flight.class.newInstance();\n-\n-        String columnLabel = metaData.getColumnLabel(1);\n-        Field field = Flight.class.getDeclaredField(columnLabel);\n-        Object values = resultSet.getObject(1, field.getType());\n-\n-        field.setAccessible(true);\n-        field.set(flight1, values);\n-\n-\n-\n-\n-\n-        result.add(flight1);\n-      }\n-\n-      resultSet.close();\n-      statement.close();\n-      con.close();\n-\n-\n-    } catch (Exception e) {\n-      throw new RuntimeException(e);\n-    }\n-\n-\n-    return result;\n+    String sql = \"select ID as id, `DEPARTURE CITY` as `from`, \" +\n+        \" `DESTINATION CITY` as `to`  from FLIGHTS\";\n+    return EntityUtils.nativeQuery(sql, Flight.class);\n   }\n-  public Iterable<Flight> searchFlights(String str) {\n-    List<Flight> result = Lists.newArrayList();\n-\n-\n-    String PASSWD = \"danit1\";\n-    String DB_URL = \"jdbc:mysql://mysql8.db4free.net:3307/danit_flights?useSSL=false\";\n-    String USER = \"danit1\";\n-    try {\n-      Connection con = DriverManager.getConnection(DB_URL,USER,PASSWD);\n-      String sql = \"select * from FLIGHTS where `DEPARTURE CITY` like'\"+str+\"%' or `DESTINATION CITY` like '\"+str+\"%'\";\n-      Statement statement = con.createStatement();\n-      ResultSet resultSet = statement.executeQuery(sql);\n \n-      while (resultSet.next()) {\n \n-        Long id = resultSet.getLong(\"id\");\n-        Long departureTime = resultSet.getLong(\"DEPARTURE TIME\");\n-        Long arrivalTime = resultSet.getLong(\"ARRIVAL TIME\");\n-        String from = resultSet.getString(\"DEPARTURE CITY\");\n-        String to = resultSet.getString(\"DESTINATION CITY\");\n-\n-\n-        Flight flight = new Flight(id, from, to, departureTime, arrivalTime);\n-        result.add(flight);\n-      }\n-\n-      resultSet.close();\n-      statement.close();\n-      con.close();\n-\n-\n-    } catch (SQLException e) {\n-      throw new RuntimeException(e);\n-    }\n-\n-\n-    return result;\n+  public Iterable<Flight> searchFlights(String str) {\n+    String sql = \"select ID as id, `DEPARTURE CITY` as `from`, \" +\n+        \"`DESTINATION CITY` as `to` \" +\n+        \"from FLIGHTS \" +\n+        \"where `DEPARTURE CITY` like'\" + str + \"%' \" +\n+        \"or `DESTINATION CITY` like '\" + str + \"%'\";\n+    return EntityUtils.nativeQuery(sql, Flight.class);\n   }\n \n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/dao/FlightDao.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/dao/FlightDao.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "14b51a71"
        },
        {
          "diff": "@@ -0,0 +1,58 @@\n+package ua.danit.framework.utils;\n+\n+import com.google.common.collect.Lists;\n+\n+import java.lang.reflect.Field;\n+import java.sql.*;\n+import java.util.List;\n+\n+public class EntityUtils {\n+\n+  public static  <T> List<T> nativeQuery(String sql, Class<T> clazz) {\n+    List<T> result = Lists.newArrayList();\n+\n+\n+    String PASSWD = \"danit1\";\n+    String DB_URL = \"jdbc:mysql://mysql8.db4free.net:3307/danit_flights?useSSL=false\";\n+    String USER = \"danit1\";\n+\n+    try {\n+      Connection con = DriverManager.getConnection(DB_URL, USER, PASSWD);\n+      Statement statement = con.createStatement();\n+      ResultSet resultSet = statement.executeQuery(sql);\n+      ResultSetMetaData metaData = resultSet.getMetaData();\n+\n+      while (resultSet.next()) {\n+\n+        T flight1 = getInstance(clazz, resultSet, metaData);\n+        result.add(flight1);\n+      }\n+\n+      resultSet.close();\n+      statement.close();\n+      con.close();\n+\n+\n+    } catch (Exception e) {\n+      throw new RuntimeException(e);\n+    }\n+    return result;\n+  }\n+\n+  public static  <T> T getInstance(Class<T> clazz, ResultSet resultSet, ResultSetMetaData metaData) throws InstantiationException, IllegalAccessException, SQLException, NoSuchFieldException {\n+    T instance = clazz.newInstance();\n+    int columnCount = metaData.getColumnCount();\n+\n+    for (int i = 1; i <= columnCount; i++) {\n+\n+      String columnLabel = metaData.getColumnLabel(i);\n+      Field field = clazz.getDeclaredField(columnLabel);\n+      Object values = resultSet.getObject(i, field.getType());\n+\n+      field.setAccessible(true);\n+      field.set(instance, values);\n+    }\n+\n+    return instance;\n+  }\n+}\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/utils/EntityUtils.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/utils/EntityUtils.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "14b51a71"
        }
      ]
    },
    {
      "id": "5d6a8fe32b9c7ef03dc36a949de94161fca7696c",
      "project_id": 4888518,
      "message": "reflection in jdbc\n",
      "title": "reflection in jdbc",
      "short_id": "5d6a8fe3",
      "author_name": "Volodymyr Derkach",
      "branches": null,
      "created_at": "2018-01-15T13:46:01Z",
      "diffs": [
        {
          "diff": "@@ -3,26 +3,31 @@ package ua.danit.application.dao;\n import com.google.common.collect.Lists;\n import ua.danit.application.model.Flight;\n \n+import java.lang.reflect.Field;\n import java.sql.*;\n import java.util.List;\n \n public class FlightDao {\n \n   public Iterable<Flight> getTopFlight(int limit) {\n+      String sql = \"select `DEPARTURE CITY` as `from` from FLIGHTS\";\n+\n     List<Flight> result = Lists.newArrayList();\n \n \n     String PASSWD = \"danit1\";\n     String DB_URL = \"jdbc:mysql://mysql8.db4free.net:3307/danit_flights?useSSL=false\";\n     String USER = \"danit1\";\n+\n     try {\n       Connection con = DriverManager.getConnection(DB_URL,USER,PASSWD);\n-      String sql = \"select * from FLIGHTS\";\n       Statement statement = con.createStatement();\n       ResultSet resultSet = statement.executeQuery(sql);\n+      ResultSetMetaData metaData = resultSet.getMetaData();\n \n       while (resultSet.next()) {\n \n+/*\n         Long id = resultSet.getLong(\"id\");\n         Long departureTime = resultSet.getLong(\"DEPARTURE TIME\");\n         Long arrivalTime = resultSet.getLong(\"ARRIVAL TIME\");\n@@ -31,7 +36,24 @@ public class FlightDao {\n \n \n         Flight flight = new Flight(id, from, to, departureTime, arrivalTime);\n-        result.add(flight);\n+\n+        Flight.class.getFields();\n+*/\n+\n+        Flight flight1 = Flight.class.newInstance();\n+\n+        String columnLabel = metaData.getColumnLabel(1);\n+        Field field = Flight.class.getDeclaredField(columnLabel);\n+        Object values = resultSet.getObject(1, field.getType());\n+\n+        field.setAccessible(true);\n+        field.set(flight1, values);\n+\n+\n+\n+\n+\n+        result.add(flight1);\n       }\n \n       resultSet.close();\n@@ -39,7 +61,7 @@ public class FlightDao {\n       con.close();\n \n \n-    } catch (SQLException e) {\n+    } catch (Exception e) {\n       throw new RuntimeException(e);\n     }\n \n",
          "old_path": "flights-app/src/main/java/ua/danit/application/dao/FlightDao.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/dao/FlightDao.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "5d6a8fe3"
        },
        {
          "diff": "@@ -7,6 +7,9 @@ public class Flight {\n   private String to;\n   private Long arrivalTime;\n \n+  public Flight() {\n+  }\n+\n   public Flight(Long id, String from, String to, Long departureTime, Long arrivalTime) {\n     this.id = id;\n     this.from = from;\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/model/Flight.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/model/Flight.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "5d6a8fe3"
        }
      ]
    },
    {
      "id": "974a7922601c4498f56d6cee95f52425c077defd",
      "project_id": 4888518,
      "message": "real data\n",
      "title": "real data",
      "short_id": "974a7922",
      "author_name": "V0L0DYMYR",
      "branches": null,
      "created_at": "2018-01-15T13:46:00Z",
      "diffs": [
        {
          "diff": "",
          "old_path": "flights-app/resources/data/airlines.dat.csv",
          "new_path": "flights-app/resources/data/airlines.dat.csv",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "974a7922"
        },
        {
          "diff": "",
          "old_path": "flights-app/resources/data/airports.dat.csv",
          "new_path": "flights-app/resources/data/airports.dat.csv",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "974a7922"
        },
        {
          "diff": "",
          "old_path": "flights-app/resources/data/routes.dat.csv",
          "new_path": "flights-app/resources/data/routes.dat.csv",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "974a7922"
        },
        {
          "diff": "@@ -0,0 +1,24 @@\n+package ua.danit.application.model;\n+\n+public class Airline {\n+  /**\n+\n+   Airline ID\tUnique OpenFlights identifier for this airline.\n+   Name\tName of the airline.\n+   Alias\tAlias of the airline. For example, All Nippon Airways is commonly known as \"ANA\".\n+   IATA\t2-letter IATA code, if available.\n+   ICAO\t3-letter ICAO code, if available.\n+   Callsign\tAirline callsign.\n+   Country\tCountry or territory where airline is incorporated.\n+   Active\t\"Y\" if the airline is or has until recently been operational, \"N\" if it is defunct. This field is not reliable: in particular, major airlines that stopped flying long ago, but have not had their IATA code reassigned (eg. Ansett/AN), will incorrectly show as \"Y\".\n+   The data is ISO 8859-1 (Latin-1) encoded. The special value \\N is used for \"NULL\" to indicate that no value is available, and is understood automatically by MySQL if imported.\n+\n+   Notes: Airlines with null codes/callsigns/countries generally represent user-added airlines. Since the data is intended primarily for current flights, defunct IATA codes are generally not included. For example, \"Sabena\" is not listed with a SN IATA code, since \"SN\" is presently used by its successor Brussels Airlines.\n+\n+   Sample entries\n+\n+   324,\"All Nippon Airways\",\"ANA All Nippon Airways\",\"NH\",\"ANA\",\"ALL NIPPON\",\"Japan\",\"Y\"\n+   412,\"Aerolineas Argentinas\",\\N,\"AR\",\"ARG\",\"ARGENTINA\",\"Argentina\",\"Y\"\n+   413,\"Arrowhead Airways\",\\N,\"\",\"ARH\",\"ARROWHEAD\",\"United States\",\"N\"\n+   */\n+}\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/model/Airline.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/model/Airline.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "974a7922"
        },
        {
          "diff": "@@ -0,0 +1,31 @@\n+package ua.danit.application.model;\n+\n+public class Airport {\n+  /*\n+\n+  Airport ID\tUnique OpenFlights identifier for this airport.\n+Name\tName of airport. May or may not contain the City name.\n+City\tMain city served by airport. May be spelled differently from Name.\n+Country\tCountry or territory where airport is located. See countries.dat to cross-reference to ISO 3166-1 codes.\n+IATA\t3-letter IATA code. Null if not assigned/unknown.\n+ICAO\t4-letter ICAO code.\n+Null if not assigned.\n+Latitude\tDecimal degrees, usually to six significant digits. Negative is South, positive is North.\n+Longitude\tDecimal degrees, usually to six significant digits. Negative is West, positive is East.\n+Altitude\tIn feet.\n+Timezone\tHours offset from UTC. Fractional hours are expressed as decimals, eg. India is 5.5.\n+DST\tDaylight savings time. One of E (Europe), A (US/Canada), S (South America), O (Australia), Z (New Zealand), N (None) or U (Unknown). See also: Help: Time\n+Tz database time zone\tTimezone in \"tz\" (Olson) format, eg. \"America/Los_Angeles\".\n+Type\tType of the airport. Value \"airport\" for air terminals, \"station\" for train stations, \"port\" for ferry terminals and \"unknown\" if not known. In airports.csv, only type=airport is included.\n+Source\tSource of this data. \"OurAirports\" for data sourced from OurAirports, \"Legacy\" for old data not matched to OurAirports (mostly DAFIF), \"User\" for unverified user contributions. In airports.csv, only source=OurAirports is included.\n+The data is UTF-8 (Unicode) encoded.\n+\n+Note: Rules for daylight savings time change from year to year and from country to country. The current data is an approximation for 2009, built on a country level. Most airports in DST-less regions in countries that generally observe DST (eg. AL, HI in the USA, NT, QL in Australia, parts of Canada) are marked incorrectly.\n+\n+Sample entries\n+507,\"London Heathrow Airport\",\"London\",\"United Kingdom\",\"LHR\",\"EGLL\",51.4706,-0.461941,83,0,\"E\",\"Europe/London\",\"airport\",\"OurAirports\"\n+26,\"Kugaaruk Airport\",\"Pelly Bay\",\"Canada\",\"YBB\",\"CYBB\",68.534401,-89.808098,56,-7,\"A\",\"America/Edmonton\",\"airport\",\"OurAirports\"\n+3127,\"Pokhara Airport\",\"Pokhara\",\"Nepal\",\"PKR\",\"VNPK\",28.200899124145508,83.98210144042969,2712,5.75,\"N\",\"Asia/Katmandu\",\"airport\",\"OurAirports\"\n+8810,\"Hamburg Hbf\",\"Hamburg\",\"Germany\",\"ZMB\",\\N,53.552776,10.006683,30,1,\"E\",\"Europe/Berlin\",\"station\",\"User\"\n+   */\n+}\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/model/Airport.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/model/Airport.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "974a7922"
        },
        {
          "diff": "@@ -0,0 +1,27 @@\n+package ua.danit.application.model;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"ROUTES\")\n+public class Route {\n+\n+  String airline;\t// 2-letter (IATA) or 3-letter (ICAO) code of the airline.\n+  Integer airlineId;\t//Unique OpenFlights identifier for airline (see Airline).\n+  String sourceAirport;\t//3-letter (IATA) or 4-letter (ICAO) code of the source airport.\n+  Integer sourceAirportId; //ID\tUnique OpenFlights identifier for source airport (see Airport)\n+  String destinationAirport;\t//3-letter (IATA) or 4-letter (ICAO) code of the destination airport.\n+  Integer destinationAirportId;\t//Unique OpenFlights identifier for destination airport (see Airport)\n+  Boolean codeshare;\t//\"Y\" if this flight is a codeshare (that is, not operated by Airline, but another carrier), empty otherwise.\n+  Integer stops;\t//Number of stops on this flight (\"0\" for direct)\n+  String equipment;\t//3-letter codes for plane type(s) generally used on this flight, separated by spaces\n+\n+  /**\n+   Sample entries\n+\n+   BA,1355,SIN,3316,LHR,507,,0,744 777\n+   BA,1355,SIN,3316,MEL,3339,Y,0,744\n+   TOM,5013,ACE,1055,BFS,465,,0,320\n+   */\n+}\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/model/Route.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/model/Route.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "974a7922"
        }
      ]
    },
    {
      "id": "0aa80c2f47d627c9eed9c882c56e0644e06acbf2",
      "project_id": 4888518,
      "message": "UI updates\n",
      "title": "UI updates",
      "short_id": "0aa80c2f",
      "author_name": "V0L0DYMYR",
      "branches": null,
      "created_at": "2018-01-15T13:46:00Z",
      "diffs": [
        {
          "diff": "@@ -1,22 +1,31 @@\n <!DOCTYPE html>\n <html>\n <head>\n-    <title>Flights Search</title>\n-    <link rel=\"stylesheet\" href=\"/bootstrap.css\" type=\"text/css\">\n+  <title>Flights Search</title>\n+  <link rel=\"stylesheet\" href=\"/bootstrap.css\" type=\"text/css\">\n </head>\n <body>\n \n <div class=\"container\">\n \n-    <div class=\"jumbotron centered\">\n-        <h1>Flights Search</h1>\n-        <p class=\"lead\">Find all tickets in one place.</p>\n-        <form method=\"post\" action=\"/login\" class=\"col-4\">\n-            <input name=\"login\" class=\"form-control\" type=\"text\"><br>\n-            <input name=\"password\" class=\"form-control\"  type=\"password\"><br>\n-            <button class=\"btn btn-lg btn-success\" type=\"submit\">Login</button><br>\n-        </form>\n+  <div class=\"jumbotron centered\">\n+\n+    <div class=\"col-4\">\n+      <h1>Flights Search</h1>\n+\n+      <p class=\"lead\">Find all tickets in one place.</p>\n+\n+      <form class=\"form\" method=\"post\" action=\"/login\">\n+        <div class=\"form-group\">\n+          <input name=\"login\" class=\"form-control\" type=\"text\">\n+        </div>\n+        <div class=\"form-group\">\n+          <input name=\"password\" class=\"form-control\" type=\"password\">\n+        </div>\n+        <button class=\"btn btn-lg btn-success\" type=\"submit\">Login</button>\n+      </form>\n     </div>\n+  </div>\n </div>\n </body>\n-</html>\n+</html>\n\\ No newline at end of file\n",
          "old_path": "flights-app/resources/login.html",
          "new_path": "flights-app/resources/login.html",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "0aa80c2f"
        },
        {
          "diff": "@@ -1,95 +1,93 @@\n <!DOCTYPE html>\n <html>\n <head>\n-    <title>Flights Search</title>\n-    <link rel=\"stylesheet\" href=\"/bootstrap.css\" type=\"text/css\">\n+  <title>Flights Search</title>\n+  <link rel=\"stylesheet\" href=\"/bootstrap.css\" type=\"text/css\">\n </head>\n <body>\n \n <div class=\"container\">\n \n-    <div class=\"row\">\n-        <div class=\"jumbotron w-100 centered\">\n-            <h1>Flights Search</h1>\n+  <div class=\"row\">\n+    <div class=\"col pt-3\">\n+      <div class=\"jumbotron w-100 centered\">\n+        <h1>Flights Search</h1>\n \n-            <p class=\"lead\">Find all tickets in one place.</p>\n+        <p class=\"lead\">Find all tickets in one place.</p>\n \n-            <p>\n-                <a class=\"btn btn-lg btn-danger\" href=\"/logout\" role=\"button\">Logout</a>\n-            </p>\n-        </div>\n+        <p>\n+          <a class=\"btn btn-lg btn-danger\" href=\"/logout\" role=\"button\">Logout</a>\n+        </p>\n+      </div>\n     </div>\n+  </div>\n \n-    <div class=\"row\">\n-\n-        <div class=\"form\">\n+  <div class=\"row\">\n \n-            <div class=\"input-group w-100\">\n-                <input type=\"text\" class=\"form-control\" name=\"city\" placeholder=\"City ...\">\n-                <button id=\"searchBtn\"\n-                        class=\"btn btn-primary input-group-addon\">Search</button>\n-            </div>\n+    <div class=\"col pb-3\">\n+      <div class=\"form-inline\">\n \n+        <div class=\"input-group w-100\">\n+          <input type=\"text\" class=\"form-control\" name=\"city\" placeholder=\"City ...\">\n+          <button id=\"searchBtn\"\n+                  class=\"btn btn-primary input-group-addon\">Search\n+          </button>\n         </div>\n-    </div>\n \n-    <div class=\"row\">\n-        <div class=\"w-100\">\n-            <table class=\"table\">\n-                <thead>\n-                <tr>\n-                    <th>From</th>\n-                    <th>To</th>\n-                    <th>Departure Time</th>\n-                    <th>Arrival Time</th>\n-                </tr>\n-                </thead>\n-\n-                <tbody id=\"flightsContainer\"></tbody>\n-            </table>\n+      </div>\n+    </div>\n+  </div>\n \n-        </div>\n+  <div class=\"row\">\n+    <div class=\"col\">\n+      <div id=\"flightsContainer\"></div>\n     </div>\n+  </div>\n+</div>\n+\n+<script id=\"flightsTemplate\" type=\"text/x-jQuery-tmpl\">\n+  <div class=\"card\">\n+  <table class=\"table\">\n+    <thead>\n+    <tr>\n+      <th>From</th>\n+      <th>To</th>\n+      <th>Departure Time</th>\n+      <th>Arrival Time</th>\n+    </tr>\n+    </thead>\n \n-    <script id=\"flightsTemplate\" type=\"text/x-jQuery-tmpl\">\n+    {{each flights}}\n     <tr>\n       <td>${from}</td>\n       <td>${to}</td>\n       <td>${departureTime}</td>\n       <td>${arrivalTime}</td>\n     </tr>\n-  </script>\n+    {{/each}}\n+  </table>\n+  </div>\n+</script>\n \n-</div>\n <script src=\"/jquery.min.js\"></script>\n <script type=\"text/javascript\"\n         src=\"http://ajax.aspnetcdn.com/ajax/jquery.templates/beta1/jquery.tmpl.js\"></script>\n-</body>\n-</html>\n <script>\n   $(document).ready(function () {\n \n-    $('#searchBtn').click(function() {\n-       var city = $(\"input[name=city]\").val();\n-\n-      $.ajax({\n-\n-        url: '/flights/search?search=' + city,\n-        type: 'GET',\n-        success: handleFlights\n-      });\n-\n+    $('#searchBtn').click(function () {\n+      var city = $(\"input[name=city]\").val();\n+      $.get('/flights/search?search=' + city, handleFlights);\n     });\n \n-    $.ajax({\n-      url: '/flights/top',\n-      type: 'GET',\n-      success: handleFlights\n-    });\n+    $.get('/flights/top', handleFlights);\n \n     function handleFlights(data) {\n-        var flights = JSON.parse(data);\n-        $(\"#flightsTemplate\").tmpl(flights).appendTo(\"#flightsContainer\");\n+      var flights = JSON.parse(data);\n+      $(\"#flightsContainer\").empty();\n+      $(\"#flightsTemplate\").tmpl({flights: flights}).appendTo(\"#flightsContainer\");\n     }\n   });\n-</script>\n\\ No newline at end of file\n+</script>\n+</body>\n+</html>\n",
          "old_path": "flights-app/resources/search.html",
          "new_path": "flights-app/resources/search.html",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "0aa80c2f"
        }
      ]
    },
    {
      "id": "8c551f7ed29b59ab461fd56e3544f4c20ca95f4c",
      "project_id": 4888518,
      "message": "some\n",
      "title": "some",
      "short_id": "8c551f7e",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2018-01-15T13:46:00Z",
      "diffs": [
        {
          "diff": "@@ -73,7 +73,8 @@\n        var city = $(\"input[name=city]\").val();\n \n       $.ajax({\n-        url: '/search?city=' + city,\n+\n+        url: '/flights/search?search=' + city,\n         type: 'GET',\n         success: handleFlights\n       });\n",
          "old_path": "flights-app/resources/search.html",
          "new_path": "flights-app/resources/search.html",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "8c551f7e"
        }
      ]
    },
    {
      "id": "3e91b2a17d0cb46f551db0426cf9b0fe57765cdf",
      "project_id": 4888518,
      "message": "search field\n",
      "title": "search field",
      "short_id": "3e91b2a1",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2018-01-15T13:46:00Z",
      "diffs": [
        {
          "diff": "@@ -20,6 +20,19 @@\n         </div>\n     </div>\n \n+    <div class=\"row\">\n+\n+        <div class=\"form\">\n+\n+            <div class=\"input-group w-100\">\n+                <input type=\"text\" class=\"form-control\" name=\"city\" placeholder=\"City ...\">\n+                <button id=\"searchBtn\"\n+                        class=\"btn btn-primary input-group-addon\">Search</button>\n+            </div>\n+\n+        </div>\n+    </div>\n+\n     <div class=\"row\">\n         <div class=\"w-100\">\n             <table class=\"table\">\n@@ -56,16 +69,26 @@\n <script>\n   $(document).ready(function () {\n \n+    $('#searchBtn').click(function() {\n+       var city = $(\"input[name=city]\").val();\n+\n       $.ajax({\n-        url: '/flights/top',\n+        url: '/search?city=' + city,\n         type: 'GET',\n-        success: function (data) {\n+        success: handleFlights\n+      });\n \n-          var flights = JSON.parse(data);\n+    });\n \n-          $(\"#flightsTemplate\").tmpl(flights).appendTo(\"#flightsContainer\");\n-        }\n+    $.ajax({\n+      url: '/flights/top',\n+      type: 'GET',\n+      success: handleFlights\n+    });\n \n-      });\n+    function handleFlights(data) {\n+        var flights = JSON.parse(data);\n+        $(\"#flightsTemplate\").tmpl(flights).appendTo(\"#flightsContainer\");\n+    }\n   });\n-</script>\n+</script>\n\\ No newline at end of file\n",
          "old_path": "flights-app/resources/search.html",
          "new_path": "flights-app/resources/search.html",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "3e91b2a1"
        },
        {
          "diff": "@@ -24,10 +24,11 @@ public class FlightDao {\n       while (resultSet.next()) {\n \n         Long id = resultSet.getLong(\"id\");\n-        Long departureTime = resultSet.getLong(\"DEPARTURE_TIME\");\n-        Long arrivalTime = resultSet.getLong(\"ARRIVAL_TIME\");\n-        String from = resultSet.getString(\"from\");\n-        String to = resultSet.getString(\"to\");\n+        Long departureTime = resultSet.getLong(\"DEPARTURE TIME\");\n+        Long arrivalTime = resultSet.getLong(\"ARRIVAL TIME\");\n+        String from = resultSet.getString(\"DEPARTURE CITY\");\n+        String to = resultSet.getString(\"DESTINATION CITY\");\n+\n \n         Flight flight = new Flight(id, from, to, departureTime, arrivalTime);\n         result.add(flight);\n@@ -54,17 +55,18 @@ public class FlightDao {\n     String USER = \"danit1\";\n     try {\n       Connection con = DriverManager.getConnection(DB_URL,USER,PASSWD);\n-      String sql = \"select * from FLIGHTS where `from` like'\"+str+\"%' or `to` like '\"+str+\"%'\";\n+      String sql = \"select * from FLIGHTS where `DEPARTURE CITY` like'\"+str+\"%' or `DESTINATION CITY` like '\"+str+\"%'\";\n       Statement statement = con.createStatement();\n       ResultSet resultSet = statement.executeQuery(sql);\n \n       while (resultSet.next()) {\n \n         Long id = resultSet.getLong(\"id\");\n-        Long departureTime = resultSet.getLong(\"DEPARTURE_TIME\");\n-        Long arrivalTime = resultSet.getLong(\"ARRIVAL_TIME\");\n-        String from = resultSet.getString(\"from\");\n-        String to = resultSet.getString(\"to\");\n+        Long departureTime = resultSet.getLong(\"DEPARTURE TIME\");\n+        Long arrivalTime = resultSet.getLong(\"ARRIVAL TIME\");\n+        String from = resultSet.getString(\"DEPARTURE CITY\");\n+        String to = resultSet.getString(\"DESTINATION CITY\");\n+\n \n         Flight flight = new Flight(id, from, to, departureTime, arrivalTime);\n         result.add(flight);\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/dao/FlightDao.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/dao/FlightDao.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "3e91b2a1"
        }
      ]
    },
    {
      "id": "06e8cdd9e77b6be74bb7065e62344dfd38eedfb3",
      "project_id": 4888518,
      "message": "qweryparam\n",
      "title": "qweryparam",
      "short_id": "06e8cdd9",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2018-01-15T13:46:00Z",
      "diffs": [
        {
          "diff": "@@ -57,7 +57,7 @@\n   $(document).ready(function () {\n \n       $.ajax({\n-        url: '/flights/search',\n+        url: '/flights/top',\n         type: 'GET',\n         success: function (data) {\n \n",
          "old_path": "flights-app/resources/search.html",
          "new_path": "flights-app/resources/search.html",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "06e8cdd9"
        },
        {
          "diff": "@@ -6,6 +6,8 @@ import ua.danit.application.model.Flight;\n \n import javax.ws.rs.GET;\n import javax.ws.rs.Path;\n+import javax.ws.rs.QueryParam;\n+\n import java.io.IOException;\n \n public class FlightResource {\n@@ -30,12 +32,12 @@ public class FlightResource {\n \n   @Path(\"/flights/search\")\n   @GET\n-  public String getSearchFlights() throws IOException {\n+  public String getSearchFlights(@QueryParam(\"search\") String search) throws IOException {\n     if (flightDao == null) {\n       flightDao = new FlightDao();\n     }\n \n-    Iterable<Flight> flights = flightDao.searchFlights(\"Paris\");\n+    Iterable<Flight> flights = flightDao.searchFlights(search);\n     ObjectMapper mapper = new ObjectMapper();\n     return mapper.writeValueAsString(flights);\n   }\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/resources/FlightResource.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/resources/FlightResource.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "06e8cdd9"
        }
      ]
    },
    {
      "id": "98602be676d8eae0da5053bd8c82167ec7f17a6c",
      "project_id": 4888518,
      "message": "search form method\n",
      "title": "search form method",
      "short_id": "98602be6",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2018-01-15T13:45:59Z",
      "diffs": [
        {
          "diff": "@@ -22,7 +22,7 @@\n \n     <div class=\"row\">\n         <div class=\"w-100\">\n-            <table class=\"table table-dark\">\n+            <table class=\"table\">\n                 <thead>\n                 <tr>\n                     <th>From</th>\n@@ -57,7 +57,7 @@\n   $(document).ready(function () {\n \n       $.ajax({\n-        url: '/flights/top',\n+        url: '/flights/search',\n         type: 'GET',\n         success: function (data) {\n \n@@ -69,4 +69,3 @@\n       });\n   });\n </script>\n-\n",
          "old_path": "flights-app/resources/search.html",
          "new_path": "flights-app/resources/search.html",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "98602be6"
        },
        {
          "diff": "@@ -17,7 +17,7 @@ public class FlightDao {\n     String USER = \"danit1\";\n     try {\n       Connection con = DriverManager.getConnection(DB_URL,USER,PASSWD);\n-      String sql = \"select id, `from`, `to`, `DEPARTURE_TIME`, `ARRIVAL_TIME` from FLIGHTS\";\n+      String sql = \"select * from FLIGHTS\";\n       Statement statement = con.createStatement();\n       ResultSet resultSet = statement.executeQuery(sql);\n \n@@ -45,4 +45,42 @@ public class FlightDao {\n \n     return result;\n   }\n+  public Iterable<Flight> searchFlights(String str) {\n+    List<Flight> result = Lists.newArrayList();\n+\n+\n+    String PASSWD = \"danit1\";\n+    String DB_URL = \"jdbc:mysql://mysql8.db4free.net:3307/danit_flights?useSSL=false\";\n+    String USER = \"danit1\";\n+    try {\n+      Connection con = DriverManager.getConnection(DB_URL,USER,PASSWD);\n+      String sql = \"select * from FLIGHTS where `from` like'\"+str+\"%' or `to` like '\"+str+\"%'\";\n+      Statement statement = con.createStatement();\n+      ResultSet resultSet = statement.executeQuery(sql);\n+\n+      while (resultSet.next()) {\n+\n+        Long id = resultSet.getLong(\"id\");\n+        Long departureTime = resultSet.getLong(\"DEPARTURE_TIME\");\n+        Long arrivalTime = resultSet.getLong(\"ARRIVAL_TIME\");\n+        String from = resultSet.getString(\"from\");\n+        String to = resultSet.getString(\"to\");\n+\n+        Flight flight = new Flight(id, from, to, departureTime, arrivalTime);\n+        result.add(flight);\n+      }\n+\n+      resultSet.close();\n+      statement.close();\n+      con.close();\n+\n+\n+    } catch (SQLException e) {\n+      throw new RuntimeException(e);\n+    }\n+\n+\n+    return result;\n+  }\n+\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/dao/FlightDao.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/dao/FlightDao.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "98602be6"
        },
        {
          "diff": "@@ -28,5 +28,17 @@ public class FlightResource {\n     return mapper.writeValueAsString(flights);\n   }\n \n+  @Path(\"/flights/search\")\n+  @GET\n+  public String getSearchFlights() throws IOException {\n+    if (flightDao == null) {\n+      flightDao = new FlightDao();\n+    }\n+\n+    Iterable<Flight> flights = flightDao.searchFlights(\"Paris\");\n+    ObjectMapper mapper = new ObjectMapper();\n+    return mapper.writeValueAsString(flights);\n+  }\n+\n   //TODO: add new Path for Get By Id\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/resources/FlightResource.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/resources/FlightResource.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "98602be6"
        }
      ]
    },
    {
      "id": "e12dd36edbb65506bcbbd58c8e1718f044bd1a7a",
      "project_id": 4888518,
      "message": "my\n",
      "title": "my",
      "short_id": "e12dd36e",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2018-01-15T13:45:59Z",
      "diffs": [
        {
          "diff": "@@ -11,12 +11,12 @@\n     <div class=\"jumbotron centered\">\n         <h1>Flights Search</h1>\n         <p class=\"lead\">Find all tickets in one place.</p>\n-        <form method=\"post\" action=\"/login\">\n-            <input name=\"login\" type=\"text\"><br>\n-            <input name=\"password\" type=\"password\"><br>\n+        <form method=\"post\" action=\"/login\" class=\"col-4\">\n+            <input name=\"login\" class=\"form-control\" type=\"text\"><br>\n+            <input name=\"password\" class=\"form-control\"  type=\"password\"><br>\n             <button class=\"btn btn-lg btn-success\" type=\"submit\">Login</button><br>\n         </form>\n     </div>\n </div>\n </body>\n-</html>\n\\ No newline at end of file\n+</html>\n",
          "old_path": "flights-app/resources/login.html",
          "new_path": "flights-app/resources/login.html",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "e12dd36e"
        },
        {
          "diff": "@@ -8,54 +8,65 @@\n \n <div class=\"container\">\n \n-    <div class=\"jumbotron centered\">\n-        <h1>Flights Search</h1>\n-        <p class=\"lead\">Find all tickets in one place.</p>\n-        <p>\n-            <a class=\"btn btn-lg btn-danger\" href=\"/logout\" role=\"button\">Logout</a>\n-        </p>\n+    <div class=\"row\">\n+        <div class=\"jumbotron w-100 centered\">\n+            <h1>Flights Search</h1>\n+\n+            <p class=\"lead\">Find all tickets in one place.</p>\n+\n+            <p>\n+                <a class=\"btn btn-lg btn-danger\" href=\"/logout\" role=\"button\">Logout</a>\n+            </p>\n+        </div>\n     </div>\n+\n     <div class=\"row\">\n-        <div class=\"col-xs-1 col-md-3\">\n-            <div class=\"form-group\">\n-                <a id=\"searchBtn\" class=\"btn btn-lg btn-success\" role=\"button\">Search</a>\n+        <div class=\"w-100\">\n+            <table class=\"table table-dark\">\n+                <thead>\n+                <tr>\n+                    <th>From</th>\n+                    <th>To</th>\n+                    <th>Departure Time</th>\n+                    <th>Arrival Time</th>\n+                </tr>\n+                </thead>\n \n-                \t<table id = \"some\" border=\"3\"></table>\n+                <tbody id=\"flightsContainer\"></tbody>\n+            </table>\n \n-            </div>\n         </div>\n     </div>\n+\n+    <script id=\"flightsTemplate\" type=\"text/x-jQuery-tmpl\">\n+    <tr>\n+      <td>${from}</td>\n+      <td>${to}</td>\n+      <td>${departureTime}</td>\n+      <td>${arrivalTime}</td>\n+    </tr>\n+  </script>\n+\n </div>\n <script src=\"/jquery.min.js\"></script>\n+<script type=\"text/javascript\"\n+        src=\"http://ajax.aspnetcdn.com/ajax/jquery.templates/beta1/jquery.tmpl.js\"></script>\n </body>\n </html>\n <script>\n-    $(document).ready(function () {\n-        $('#searchBtn').click(function() {\n-\n-            $.ajax({\n-                url: '/flights/top',\n-                type: 'GET',\n-                success: function (data) {\n-\n-                    var t = JSON.parse(data);\n+  $(document).ready(function () {\n \n-                    var table = $('<table border=\"1\"></table>').addClass('foo');\n-                    for(i=0; i<t.length; i++){\n+      $.ajax({\n+        url: '/flights/top',\n+        type: 'GET',\n+        success: function (data) {\n \n-                    var id = $('<td></td>').addClass('id').text(t[i].id);\n-                    var from = $('<td></td>').addClass('from').text(t[i].from);\n-                    var to = $('<td></td>').addClass('to').text(t[i].to);\n-                    var string = $('<tr></tr>').add(id).add(from).add(to);\n+          var flights = JSON.parse(data);\n \n-                    table.append(string);\n+          $(\"#flightsTemplate\").tmpl(flights).appendTo(\"#flightsContainer\");\n+        }\n \n-                    }\n-                    $('#some').append(table);\n-\n-                }\n-\n-            });\n-        });\n-    });\n+      });\n+  });\n </script>\n+\n",
          "old_path": "flights-app/resources/search.html",
          "new_path": "flights-app/resources/search.html",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "e12dd36e"
        }
      ]
    },
    {
      "id": "c059e9034b7c914e951f45c02bbc93a964feda36",
      "project_id": 4888518,
      "message": "checkstyle\n",
      "title": "checkstyle",
      "short_id": "c059e903",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2018-01-15T11:44:56Z",
      "diffs": [
        {
          "diff": "@@ -1,9 +1,9 @@\n package ua.danit.application;\n \n-import javax.ws.rs.*;\n-import java.sql.Connection;\n-import java.sql.DriverManager;\n-import java.sql.SQLException;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.QueryParam;\n \n public class Resource {\n   public static final String HTML_TEMPLATE = \"<!DOCTYPE html>\\n\"\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c059e903"
        },
        {
          "diff": "@@ -6,7 +6,6 @@ import java.io.IOException;\n import org.eclipse.jetty.server.Server;\n import org.eclipse.jetty.servlet.ServletContextHandler;\n import org.eclipse.jetty.servlet.ServletHolder;\n-import ua.danit.application.dao.FlightDao;\n import ua.danit.application.resources.FlightResource;\n import ua.danit.framework.DispatcherServlet;\n import ua.danit.framework.LoginServlet;\n@@ -14,40 +13,40 @@ import ua.danit.framework.LogoutServlet;\n \n public class WebApp {\n \n-    /**\n-     * This method is the entry point of our application ...\n-     * creates a server, creates a handler, parser classes\n-     */\n+  /**\n+   * This method is the entry point of our application ...\n+   * creates a server, creates a handler, parser classes\n+   */\n \n-    public static void main(String[] args) throws Exception {\n+  public static void main(String[] args) throws Exception {\n \n-        Server server = new Server(8080);\n-        ServletContextHandler handler = new ServletContextHandler();\n+    Server server = new Server(8080);\n+    ServletContextHandler handler = new ServletContextHandler();\n \n-        DispatcherServlet servlet = new DispatcherServlet(Resource.class)\n-                .addFileMapping(\"/\", new File(\"flights-app/resources/search.html\"))\n+    DispatcherServlet servlet = new DispatcherServlet(Resource.class)\n+        .addFileMapping(\"/\", new File(\"flights-app/resources/search.html\"))\n //                .addFileMapping(\"/login\", new File(\"flights-app/resources/login.html\"))\n-                .addFileMapping(\"/search\", new File(\"flights-app/resources/search.html\"))\n-                .addFileMapping(\"/bootstrap.css\", new File(\"flights-app/resources/bootstrap.min.css\"))\n-                .addFileMapping(\"/jquery.min.js\", new File(\"flights-app/resources/js/jquery.min.js\"));\n+        .addFileMapping(\"/search\", new File(\"flights-app/resources/search.html\"))\n+        .addFileMapping(\"/bootstrap.css\", new File(\"flights-app/resources/bootstrap.min.css\"))\n+        .addFileMapping(\"/jquery.min.js\", new File(\"flights-app/resources/js/jquery.min.js\"));\n \n-        servlet.addResource(FlightResource.class);\n+    servlet.addResource(FlightResource.class);\n \n-        handler.addServlet(new ServletHolder(servlet), \"/*\");\n+    handler.addServlet(new ServletHolder(servlet), \"/*\");\n \n-        LoginServlet loginServlet = new LoginServlet();\n-        handler.addServlet(new ServletHolder(loginServlet), \"/login\");\n+    LoginServlet loginServlet = new LoginServlet();\n+    handler.addServlet(new ServletHolder(loginServlet), \"/login\");\n \n-        LogoutServlet logoutServlet = new LogoutServlet();\n-        handler.addServlet(new ServletHolder(logoutServlet), \"/logout\");\n+    LogoutServlet logoutServlet = new LogoutServlet();\n+    handler.addServlet(new ServletHolder(logoutServlet), \"/logout\");\n \n-        server.setHandler(handler);\n-        server.start();\n-        server.join();\n-    }\n+    server.setHandler(handler);\n+    server.start();\n+    server.join();\n+  }\n \n-    public static void main1(String[] args) throws IOException {\n+  public static void main1(String[] args) throws IOException {\n //    String flights = new FlightResource(new FlightDao()).getTopFlights();\n //    System.out.println(flights);\n-    }\n+  }\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c059e903"
        },
        {
          "diff": "@@ -1,34 +1,34 @@\n package ua.danit.application.dao;\n \n-import com.google.common.collect.Lists;\n+\n import ua.danit.application.model.Flight;\n import ua.danit.framework.utils.EntityUtils;\n \n-import java.lang.reflect.Field;\n-import java.sql.*;\n-import java.util.List;\n \n public class FlightDao {\n \n   public Iterable<Flight> getTopFlight(int limit) {\n     String sql = \"select ID as id, `DEPARTURE_CITY` as `from`, \" +\n-        \" `DESTINATION_CITY` as `to`,\"+\n-        \"`DEPARTURE_TIME` as `departureTime`,\"+\n-        \"`ARRIVAL_TIME` as `arrivalTime`\"+\n+        \" `DESTINATION_CITY` as `to`,\" +\n+        \"`DEPARTURE_TIME` as `departureTime`,\" +\n+        \"`ARRIVAL_TIME` as `arrivalTime`\" +\n         \"from FLIGHTS\";\n     return EntityUtils.nativeQuery(sql, Flight.class);\n   }\n \n \n   public Iterable<Flight> searchFlights(String str) {\n-    String sql = \"select ID as id, `DEPARTURE_CITY` as `from`, \" +\n-        \" `DESTINATION_CITY` as `to`,\"+\n-        \"`DEPARTURE_TIME` as `departureTime`,\"+\n-        \"`ARRIVAL_TIME` as `arrivalTime`\"+\n-        \"from FLIGHTS \" +\n-        \"where `DEPARTURE_CITY` like'\" + str + \"%' \" +\n-        \"or `DESTINATION_CITY` like '\" + str + \"%'\";\n-    return EntityUtils.nativeQuery(sql, Flight.class);\n+    if (str != null) {\n+      String sql = \"select ID as id, `DEPARTURE_CITY` as `from`, \" +\n+          \" `DESTINATION_CITY` as `to`,\" +\n+          \"`DEPARTURE_TIME` as `departureTime`,\" +\n+          \"`ARRIVAL_TIME` as `arrivalTime`\" +\n+          \"from FLIGHTS \" +\n+          \"where `DEPARTURE_CITY` like'\" + str + \"%' \" +\n+          \"or `DESTINATION_CITY` like '\" + str + \"%'\";\n+      return EntityUtils.nativeQuery(sql, Flight.class);\n+    }\n+    return null;\n   }\n \n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/dao/FlightDao.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/dao/FlightDao.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c059e903"
        },
        {
          "diff": "@@ -7,15 +7,15 @@ import javax.persistence.Table;\n @Table(name = \"ROUTES\")\n public class Route {\n \n-  String airline;\t// 2-letter (IATA) or 3-letter (ICAO) code of the airline.\n-  Integer airlineId;\t//Unique OpenFlights identifier for airline (see Airline).\n-  String sourceAirport;\t//3-letter (IATA) or 4-letter (ICAO) code of the source airport.\n+  String airline;  // 2-letter (IATA) or 3-letter (ICAO) code of the airline.\n+  Integer airlineId;  //Unique OpenFlights identifier for airline (see Airline).\n+  String sourceAirport;  //3-letter (IATA) or 4-letter (ICAO) code of the source airport.\n   Integer sourceAirportId; //ID\tUnique OpenFlights identifier for source airport (see Airport)\n-  String destinationAirport;\t//3-letter (IATA) or 4-letter (ICAO) code of the destination airport.\n-  Integer destinationAirportId;\t//Unique OpenFlights identifier for destination airport (see Airport)\n-  Boolean codeshare;\t//\"Y\" if this flight is a codeshare (that is, not operated by Airline, but another carrier), empty otherwise.\n-  Integer stops;\t//Number of stops on this flight (\"0\" for direct)\n-  String equipment;\t//3-letter codes for plane type(s) generally used on this flight, separated by spaces\n+  String destinationAirport;  //3-letter (IATA) or 4-letter (ICAO) code of the destination airport.\n+  Integer destinationAirportId;  //Unique OpenFlights identifier for destination airport (see Airport)\n+  Boolean codeshare;  //\"Y\" if this flight is a codeshare (that is, not operated by Airline, but another carrier), empty otherwise.\n+  Integer stops;  //Number of stops on this flight (\"0\" for direct)\n+  String equipment;  //3-letter codes for plane type(s) generally used on this flight, separated by spaces\n \n   /**\n    Sample entries\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/model/Route.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/model/Route.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c059e903"
        },
        {
          "diff": "@@ -1,14 +1,14 @@\n package ua.danit.application.resources;\n \n-import org.codehaus.jackson.map.ObjectMapper;\n-import ua.danit.application.dao.FlightDao;\n-import ua.danit.application.model.Flight;\n+import java.io.IOException;\n \n import javax.ws.rs.GET;\n import javax.ws.rs.Path;\n import javax.ws.rs.QueryParam;\n \n-import java.io.IOException;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import ua.danit.application.dao.FlightDao;\n+import ua.danit.application.model.Flight;\n \n public class FlightResource {\n \n",
          "old_path": "flights-app/src/main/java/ua/danit/application/resources/FlightResource.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/resources/FlightResource.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c059e903"
        },
        {
          "diff": "@@ -1,5 +1,8 @@\n package ua.danit.framework;\n \n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n import java.io.File;\n import java.io.IOException;\n import java.util.HashMap;\n@@ -19,9 +22,6 @@ import com.google.common.collect.Maps;\n import com.google.common.io.Files;\n import ua.danit.framework.invocations.Invocation;\n \n-import static com.google.common.base.Preconditions.checkNotNull;\n-import static com.google.common.base.Preconditions.checkState;\n-\n \n public class DispatcherServlet extends HttpServlet {\n \n@@ -54,7 +54,7 @@ public class DispatcherServlet extends HttpServlet {\n \n       for (Cookie cookie : req.getCookies()) {\n         String cookieName = cookie.getName();\n-        if (cookieName != null && cookieName.equals(\"flight-user\") && cookie.getMaxAge() == -1) {\n+        if (cookieName != null&&cookieName.equals(\"flight-user\")&&cookie.getMaxAge() == -1) {\n           cookeieExists = cookie.getValue() != null;\n         }\n       }\n@@ -64,12 +64,12 @@ public class DispatcherServlet extends HttpServlet {\n     String uri = req.getRequestURI();\n \n \n-    if (!cookeieExists && !uri.contains(\".\")) {\n+    if (!cookeieExists&&!uri.contains(\".\")) {\n       resp.sendRedirect(\"/login\");\n     } else {\n       Invocation invoc = resources.get(uri);\n \n-      if (resources.containsKey(uri) && canHandleGetMethod(invoc)) {\n+      if (resources.containsKey(uri)&&canHandleGetMethod(invoc)) {\n         handleMethod(req, resp, invoc);\n       } else if (files.containsKey(uri)) {\n         File file = files.get(uri);\n@@ -82,7 +82,7 @@ public class DispatcherServlet extends HttpServlet {\n \n \n   private boolean canHandleGetMethod(Invocation invoc) {\n-    return invoc != null && invoc.getHttpMethod() instanceof GET;\n+    return invoc != null&&invoc.getHttpMethod() instanceof GET;\n   }\n \n   @Override\n@@ -92,7 +92,7 @@ public class DispatcherServlet extends HttpServlet {\n \n     Invocation invoc = resources.get(uri);\n \n-    if (invoc != null && canHandlePostMethod(invoc)) {\n+    if (invoc != null&&canHandlePostMethod(invoc)) {\n       handleMethod(req, resp, invoc);\n     } else {\n       resp.sendError(404);\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c059e903"
        },
        {
          "diff": "@@ -1,41 +1,43 @@\n package ua.danit.framework;\n \n-import com.google.common.base.Charsets;\n-import com.google.common.io.Files;\n+import java.io.File;\n+import java.io.IOException;\n \n import javax.servlet.ServletException;\n import javax.servlet.http.Cookie;\n import javax.servlet.http.HttpServlet;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n-import java.io.File;\n-import java.io.IOException;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.io.Files;\n \n public class LoginServlet extends HttpServlet {\n \n   private static final String loginForm =\n       \"<html><body>\" +\n-      \" <form method = 'post'>\" +\n-      \" <input name = 'login' type = 'text'><br>\" +\n-      \" <input name = 'password' type = 'password'><br>\" +\n-      \" <button type = 'submit'>Submit</button><br>\" +\n-      \"</form></body></html>\";\n+          \" <form method = 'post'>\" +\n+          \" <input name = 'login' type = 'text'><br>\" +\n+          \" <input name = 'password' type = 'password'><br>\" +\n+          \" <button type = 'submit'>Submit</button><br>\" +\n+          \"</form></body></html>\";\n \n   @Override\n-  protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+  protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n+      throws ServletException, IOException {\n     String loginName = null;\n \n     if (req.getCookies() != null) {\n \n       for (Cookie cookie : req.getCookies()) {\n         String cookieName = cookie.getName();\n-        if (cookieName != null && cookieName.equals(\"flight-user\") && cookie.getMaxAge() == -1) {\n+        if (cookieName != null&&cookieName.equals(\"flight-user\")&&cookie.getMaxAge() == -1) {\n           loginName = cookie.getValue();\n         }\n       }\n     }\n \n-    if (loginName != null && !loginName.isEmpty()) {\n+    if (loginName != null&&!loginName.isEmpty()) {\n       resp.sendRedirect(\"/search\");\n     } else {\n       resp.getWriter().write(Files.toString(new File(\"flights-app/resources/login.html\"), Charsets.UTF_8));\n@@ -43,7 +45,8 @@ public class LoginServlet extends HttpServlet {\n   }\n \n   @Override\n-  protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+  protected void doPost(HttpServletRequest req, HttpServletResponse resp)\n+      throws ServletException, IOException {\n     String login = req.getParameter(\"login\");\n     String password = req.getParameter(\"password\");\n     Cookie cookie = new Cookie(\"flight-user\", login);\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/LoginServlet.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/LoginServlet.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c059e903"
        },
        {
          "diff": "@@ -1,34 +1,35 @@\n package ua.danit.framework;\n \n+import java.io.IOException;\n+\n import javax.servlet.ServletException;\n import javax.servlet.http.Cookie;\n import javax.servlet.http.HttpServlet;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n-import java.io.IOException;\n \n public class LogoutServlet extends HttpServlet {\n \n-    @Override\n-    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n-        setCookieAge0(req, resp);\n-        resp.sendRedirect(\"/\");\n-    }\n+  @Override\n+  protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+    setCookieAge0(req, resp);\n+    resp.sendRedirect(\"/\");\n+  }\n \n-    @Override\n-    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n-        setCookieAge0(req, resp);\n-        resp.sendRedirect(\"/\");\n-    }\n+  @Override\n+  protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+    setCookieAge0(req, resp);\n+    resp.sendRedirect(\"/\");\n+  }\n \n-    private void setCookieAge0(HttpServletRequest req, HttpServletResponse resp) {\n-        Cookie[] cookies = req.getCookies();\n-        for (Cookie cookie : cookies) {\n-            String cookieName = cookie.getName();\n-            if (cookieName != null && cookieName.equals(\"flight-user\")) {\n-                cookie.setMaxAge(0);\n-                resp.addCookie(cookie);\n-            }\n-        }\n+  private void setCookieAge0(HttpServletRequest req, HttpServletResponse resp) {\n+    Cookie[] cookies = req.getCookies();\n+    for (Cookie cookie : cookies) {\n+      String cookieName = cookie.getName();\n+      if (cookieName != null&&cookieName.equals(\"flight-user\")) {\n+        cookie.setMaxAge(0);\n+        resp.addCookie(cookie);\n+      }\n     }\n+  }\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/LogoutServlet.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/LogoutServlet.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c059e903"
        },
        {
          "diff": "@@ -1,14 +1,19 @@\n package ua.danit.framework.utils;\n \n-import com.google.common.collect.Lists;\n-\n import java.lang.reflect.Field;\n-import java.sql.*;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n import java.util.List;\n \n+import com.google.common.collect.Lists;\n+\n public class EntityUtils {\n \n-  public static  <T> List<T> nativeQuery(String sql, Class<T> clazz) {\n+  public static <T> List<T> nativeQuery(String sql, Class<T> clazz) {\n     List<T> result = Lists.newArrayList();\n \n \n@@ -22,7 +27,7 @@ public class EntityUtils {\n       ResultSet resultSet = statement.executeQuery(sql);\n       ResultSetMetaData metaData = resultSet.getMetaData();\n \n-      while (resultSet.next()) {\n+      while(resultSet.next()) {\n \n         T flight1 = getInstance(clazz, resultSet, metaData);\n         result.add(flight1);\n@@ -39,11 +44,12 @@ public class EntityUtils {\n     return result;\n   }\n \n-  public static  <T> T getInstance(Class<T> clazz, ResultSet resultSet, ResultSetMetaData metaData) throws InstantiationException, IllegalAccessException, SQLException, NoSuchFieldException {\n+  public static <T> T getInstance(Class<T> clazz, ResultSet resultSet, ResultSetMetaData metaData)\n+      throws InstantiationException, IllegalAccessException, SQLException, NoSuchFieldException {\n     T instance = clazz.newInstance();\n     int columnCount = metaData.getColumnCount();\n \n-    for (int i = 1; i <= columnCount; i++) {\n+    for (int i = 1; i<=columnCount; i++) {\n \n       String columnLabel = metaData.getColumnLabel(i);\n       Field field = clazz.getDeclaredField(columnLabel);\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/utils/EntityUtils.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/utils/EntityUtils.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c059e903"
        }
      ]
    },
    {
      "id": "52a1205b48d8e00eb0cacb54f3750eca0f995f98",
      "project_id": 4888518,
      "message": "add departure time and arrival time\nchange in the MySQL row to DEPARTURE_CITY DESTINATION_CITY DEPARTURE_TIME ARRIVAL_TIME\n",
      "title": "add departure time and arrival time",
      "short_id": "52a1205b",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2018-01-13T17:41:30Z",
      "diffs": [
        {
          "diff": "@@ -11,18 +11,23 @@ import java.util.List;\n public class FlightDao {\n \n   public Iterable<Flight> getTopFlight(int limit) {\n-    String sql = \"select ID as id, `DEPARTURE CITY` as `from`, \" +\n-        \" `DESTINATION CITY` as `to`  from FLIGHTS\";\n+    String sql = \"select ID as id, `DEPARTURE_CITY` as `from`, \" +\n+        \" `DESTINATION_CITY` as `to`,\"+\n+        \"`DEPARTURE_TIME` as `departureTime`,\"+\n+        \"`ARRIVAL_TIME` as `arrivalTime`\"+\n+        \"from FLIGHTS\";\n     return EntityUtils.nativeQuery(sql, Flight.class);\n   }\n \n \n   public Iterable<Flight> searchFlights(String str) {\n-    String sql = \"select ID as id, `DEPARTURE CITY` as `from`, \" +\n-        \"`DESTINATION CITY` as `to` \" +\n+    String sql = \"select ID as id, `DEPARTURE_CITY` as `from`, \" +\n+        \" `DESTINATION_CITY` as `to`,\"+\n+        \"`DEPARTURE_TIME` as `departureTime`,\"+\n+        \"`ARRIVAL_TIME` as `arrivalTime`\"+\n         \"from FLIGHTS \" +\n-        \"where `DEPARTURE CITY` like'\" + str + \"%' \" +\n-        \"or `DESTINATION CITY` like '\" + str + \"%'\";\n+        \"where `DEPARTURE_CITY` like'\" + str + \"%' \" +\n+        \"or `DESTINATION_CITY` like '\" + str + \"%'\";\n     return EntityUtils.nativeQuery(sql, Flight.class);\n   }\n \n",
          "old_path": "flights-app/src/main/java/ua/danit/application/dao/FlightDao.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/dao/FlightDao.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "52a1205b"
        }
      ]
    },
    {
      "id": "90e5e1d9e6da82505a8608eec685a40443425ec4",
      "project_id": 4888518,
      "message": "added UntityUtils\n",
      "title": "added UntityUtils",
      "short_id": "90e5e1d9",
      "author_name": "Volodymyr Derkach",
      "branches": null,
      "created_at": "2018-01-13T13:05:28Z",
      "diffs": [
        {
          "diff": "@@ -50,6 +50,7 @@\n   <table class=\"table\">\n     <thead>\n     <tr>\n+      <th>#</th>\n       <th>From</th>\n       <th>To</th>\n       <th>Departure Time</th>\n@@ -59,6 +60,7 @@\n \n     {{each flights}}\n     <tr>\n+      <td>${id}</td>\n       <td>${from}</td>\n       <td>${to}</td>\n       <td>${departureTime}</td>\n",
          "old_path": "flights-app/resources/search.html",
          "new_path": "flights-app/resources/search.html",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "90e5e1d9"
        },
        {
          "diff": "@@ -2,6 +2,7 @@ package ua.danit.application.dao;\n \n import com.google.common.collect.Lists;\n import ua.danit.application.model.Flight;\n+import ua.danit.framework.utils.EntityUtils;\n \n import java.lang.reflect.Field;\n import java.sql.*;\n@@ -10,101 +11,19 @@ import java.util.List;\n public class FlightDao {\n \n   public Iterable<Flight> getTopFlight(int limit) {\n-      String sql = \"select `DEPARTURE CITY` as `from` from FLIGHTS\";\n-\n-    List<Flight> result = Lists.newArrayList();\n-\n-\n-    String PASSWD = \"danit1\";\n-    String DB_URL = \"jdbc:mysql://mysql8.db4free.net:3307/danit_flights?useSSL=false\";\n-    String USER = \"danit1\";\n-\n-    try {\n-      Connection con = DriverManager.getConnection(DB_URL,USER,PASSWD);\n-      Statement statement = con.createStatement();\n-      ResultSet resultSet = statement.executeQuery(sql);\n-      ResultSetMetaData metaData = resultSet.getMetaData();\n-\n-      while (resultSet.next()) {\n-\n-/*\n-        Long id = resultSet.getLong(\"id\");\n-        Long departureTime = resultSet.getLong(\"DEPARTURE TIME\");\n-        Long arrivalTime = resultSet.getLong(\"ARRIVAL TIME\");\n-        String from = resultSet.getString(\"DEPARTURE CITY\");\n-        String to = resultSet.getString(\"DESTINATION CITY\");\n-\n-\n-        Flight flight = new Flight(id, from, to, departureTime, arrivalTime);\n-\n-        Flight.class.getFields();\n-*/\n-\n-        Flight flight1 = Flight.class.newInstance();\n-\n-        String columnLabel = metaData.getColumnLabel(1);\n-        Field field = Flight.class.getDeclaredField(columnLabel);\n-        Object values = resultSet.getObject(1, field.getType());\n-\n-        field.setAccessible(true);\n-        field.set(flight1, values);\n-\n-\n-\n-\n-\n-        result.add(flight1);\n-      }\n-\n-      resultSet.close();\n-      statement.close();\n-      con.close();\n-\n-\n-    } catch (Exception e) {\n-      throw new RuntimeException(e);\n-    }\n-\n-\n-    return result;\n+    String sql = \"select ID as id, `DEPARTURE CITY` as `from`, \" +\n+        \" `DESTINATION CITY` as `to`  from FLIGHTS\";\n+    return EntityUtils.nativeQuery(sql, Flight.class);\n   }\n-  public Iterable<Flight> searchFlights(String str) {\n-    List<Flight> result = Lists.newArrayList();\n-\n-\n-    String PASSWD = \"danit1\";\n-    String DB_URL = \"jdbc:mysql://mysql8.db4free.net:3307/danit_flights?useSSL=false\";\n-    String USER = \"danit1\";\n-    try {\n-      Connection con = DriverManager.getConnection(DB_URL,USER,PASSWD);\n-      String sql = \"select * from FLIGHTS where `DEPARTURE CITY` like'\"+str+\"%' or `DESTINATION CITY` like '\"+str+\"%'\";\n-      Statement statement = con.createStatement();\n-      ResultSet resultSet = statement.executeQuery(sql);\n \n-      while (resultSet.next()) {\n \n-        Long id = resultSet.getLong(\"id\");\n-        Long departureTime = resultSet.getLong(\"DEPARTURE TIME\");\n-        Long arrivalTime = resultSet.getLong(\"ARRIVAL TIME\");\n-        String from = resultSet.getString(\"DEPARTURE CITY\");\n-        String to = resultSet.getString(\"DESTINATION CITY\");\n-\n-\n-        Flight flight = new Flight(id, from, to, departureTime, arrivalTime);\n-        result.add(flight);\n-      }\n-\n-      resultSet.close();\n-      statement.close();\n-      con.close();\n-\n-\n-    } catch (SQLException e) {\n-      throw new RuntimeException(e);\n-    }\n-\n-\n-    return result;\n+  public Iterable<Flight> searchFlights(String str) {\n+    String sql = \"select ID as id, `DEPARTURE CITY` as `from`, \" +\n+        \"`DESTINATION CITY` as `to` \" +\n+        \"from FLIGHTS \" +\n+        \"where `DEPARTURE CITY` like'\" + str + \"%' \" +\n+        \"or `DESTINATION CITY` like '\" + str + \"%'\";\n+    return EntityUtils.nativeQuery(sql, Flight.class);\n   }\n \n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/dao/FlightDao.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/dao/FlightDao.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "90e5e1d9"
        },
        {
          "diff": "@@ -0,0 +1,58 @@\n+package ua.danit.framework.utils;\n+\n+import com.google.common.collect.Lists;\n+\n+import java.lang.reflect.Field;\n+import java.sql.*;\n+import java.util.List;\n+\n+public class EntityUtils {\n+\n+  public static  <T> List<T> nativeQuery(String sql, Class<T> clazz) {\n+    List<T> result = Lists.newArrayList();\n+\n+\n+    String PASSWD = \"danit1\";\n+    String DB_URL = \"jdbc:mysql://mysql8.db4free.net:3307/danit_flights?useSSL=false\";\n+    String USER = \"danit1\";\n+\n+    try {\n+      Connection con = DriverManager.getConnection(DB_URL, USER, PASSWD);\n+      Statement statement = con.createStatement();\n+      ResultSet resultSet = statement.executeQuery(sql);\n+      ResultSetMetaData metaData = resultSet.getMetaData();\n+\n+      while (resultSet.next()) {\n+\n+        T flight1 = getInstance(clazz, resultSet, metaData);\n+        result.add(flight1);\n+      }\n+\n+      resultSet.close();\n+      statement.close();\n+      con.close();\n+\n+\n+    } catch (Exception e) {\n+      throw new RuntimeException(e);\n+    }\n+    return result;\n+  }\n+\n+  public static  <T> T getInstance(Class<T> clazz, ResultSet resultSet, ResultSetMetaData metaData) throws InstantiationException, IllegalAccessException, SQLException, NoSuchFieldException {\n+    T instance = clazz.newInstance();\n+    int columnCount = metaData.getColumnCount();\n+\n+    for (int i = 1; i <= columnCount; i++) {\n+\n+      String columnLabel = metaData.getColumnLabel(i);\n+      Field field = clazz.getDeclaredField(columnLabel);\n+      Object values = resultSet.getObject(i, field.getType());\n+\n+      field.setAccessible(true);\n+      field.set(instance, values);\n+    }\n+\n+    return instance;\n+  }\n+}\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/utils/EntityUtils.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/utils/EntityUtils.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "90e5e1d9"
        }
      ]
    },
    {
      "id": "37c9a7f1e7210ab267ac7e907e41ef825a62c85b",
      "project_id": 4888518,
      "message": "reflection in jdbc\n",
      "title": "reflection in jdbc",
      "short_id": "37c9a7f1",
      "author_name": "Volodymyr Derkach",
      "branches": null,
      "created_at": "2018-01-13T12:35:25Z",
      "diffs": [
        {
          "diff": "@@ -3,26 +3,31 @@ package ua.danit.application.dao;\n import com.google.common.collect.Lists;\n import ua.danit.application.model.Flight;\n \n+import java.lang.reflect.Field;\n import java.sql.*;\n import java.util.List;\n \n public class FlightDao {\n \n   public Iterable<Flight> getTopFlight(int limit) {\n+      String sql = \"select `DEPARTURE CITY` as `from` from FLIGHTS\";\n+\n     List<Flight> result = Lists.newArrayList();\n \n \n     String PASSWD = \"danit1\";\n     String DB_URL = \"jdbc:mysql://mysql8.db4free.net:3307/danit_flights?useSSL=false\";\n     String USER = \"danit1\";\n+\n     try {\n       Connection con = DriverManager.getConnection(DB_URL,USER,PASSWD);\n-      String sql = \"select * from FLIGHTS\";\n       Statement statement = con.createStatement();\n       ResultSet resultSet = statement.executeQuery(sql);\n+      ResultSetMetaData metaData = resultSet.getMetaData();\n \n       while (resultSet.next()) {\n \n+/*\n         Long id = resultSet.getLong(\"id\");\n         Long departureTime = resultSet.getLong(\"DEPARTURE TIME\");\n         Long arrivalTime = resultSet.getLong(\"ARRIVAL TIME\");\n@@ -31,7 +36,24 @@ public class FlightDao {\n \n \n         Flight flight = new Flight(id, from, to, departureTime, arrivalTime);\n-        result.add(flight);\n+\n+        Flight.class.getFields();\n+*/\n+\n+        Flight flight1 = Flight.class.newInstance();\n+\n+        String columnLabel = metaData.getColumnLabel(1);\n+        Field field = Flight.class.getDeclaredField(columnLabel);\n+        Object values = resultSet.getObject(1, field.getType());\n+\n+        field.setAccessible(true);\n+        field.set(flight1, values);\n+\n+\n+\n+\n+\n+        result.add(flight1);\n       }\n \n       resultSet.close();\n@@ -39,7 +61,7 @@ public class FlightDao {\n       con.close();\n \n \n-    } catch (SQLException e) {\n+    } catch (Exception e) {\n       throw new RuntimeException(e);\n     }\n \n",
          "old_path": "flights-app/src/main/java/ua/danit/application/dao/FlightDao.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/dao/FlightDao.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "37c9a7f1"
        },
        {
          "diff": "@@ -7,6 +7,9 @@ public class Flight {\n   private String to;\n   private Long arrivalTime;\n \n+  public Flight() {\n+  }\n+\n   public Flight(Long id, String from, String to, Long departureTime, Long arrivalTime) {\n     this.id = id;\n     this.from = from;\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/model/Flight.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/model/Flight.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "37c9a7f1"
        }
      ]
    },
    {
      "id": "fede365f92f8848edecfe0697dee5c2767dcc973",
      "project_id": 4888518,
      "message": "real data\n",
      "title": "real data",
      "short_id": "fede365f",
      "author_name": "V0L0DYMYR",
      "branches": null,
      "created_at": "2018-01-12T23:09:22Z",
      "diffs": [
        {
          "diff": "",
          "old_path": "flights-app/resources/data/airlines.dat.csv",
          "new_path": "flights-app/resources/data/airlines.dat.csv",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "fede365f"
        },
        {
          "diff": "",
          "old_path": "flights-app/resources/data/airports.dat.csv",
          "new_path": "flights-app/resources/data/airports.dat.csv",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "fede365f"
        },
        {
          "diff": "",
          "old_path": "flights-app/resources/data/routes.dat.csv",
          "new_path": "flights-app/resources/data/routes.dat.csv",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "fede365f"
        },
        {
          "diff": "@@ -0,0 +1,24 @@\n+package ua.danit.application.model;\n+\n+public class Airline {\n+  /**\n+\n+   Airline ID\tUnique OpenFlights identifier for this airline.\n+   Name\tName of the airline.\n+   Alias\tAlias of the airline. For example, All Nippon Airways is commonly known as \"ANA\".\n+   IATA\t2-letter IATA code, if available.\n+   ICAO\t3-letter ICAO code, if available.\n+   Callsign\tAirline callsign.\n+   Country\tCountry or territory where airline is incorporated.\n+   Active\t\"Y\" if the airline is or has until recently been operational, \"N\" if it is defunct. This field is not reliable: in particular, major airlines that stopped flying long ago, but have not had their IATA code reassigned (eg. Ansett/AN), will incorrectly show as \"Y\".\n+   The data is ISO 8859-1 (Latin-1) encoded. The special value \\N is used for \"NULL\" to indicate that no value is available, and is understood automatically by MySQL if imported.\n+\n+   Notes: Airlines with null codes/callsigns/countries generally represent user-added airlines. Since the data is intended primarily for current flights, defunct IATA codes are generally not included. For example, \"Sabena\" is not listed with a SN IATA code, since \"SN\" is presently used by its successor Brussels Airlines.\n+\n+   Sample entries\n+\n+   324,\"All Nippon Airways\",\"ANA All Nippon Airways\",\"NH\",\"ANA\",\"ALL NIPPON\",\"Japan\",\"Y\"\n+   412,\"Aerolineas Argentinas\",\\N,\"AR\",\"ARG\",\"ARGENTINA\",\"Argentina\",\"Y\"\n+   413,\"Arrowhead Airways\",\\N,\"\",\"ARH\",\"ARROWHEAD\",\"United States\",\"N\"\n+   */\n+}\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/model/Airline.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/model/Airline.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "fede365f"
        },
        {
          "diff": "@@ -0,0 +1,31 @@\n+package ua.danit.application.model;\n+\n+public class Airport {\n+  /*\n+\n+  Airport ID\tUnique OpenFlights identifier for this airport.\n+Name\tName of airport. May or may not contain the City name.\n+City\tMain city served by airport. May be spelled differently from Name.\n+Country\tCountry or territory where airport is located. See countries.dat to cross-reference to ISO 3166-1 codes.\n+IATA\t3-letter IATA code. Null if not assigned/unknown.\n+ICAO\t4-letter ICAO code.\n+Null if not assigned.\n+Latitude\tDecimal degrees, usually to six significant digits. Negative is South, positive is North.\n+Longitude\tDecimal degrees, usually to six significant digits. Negative is West, positive is East.\n+Altitude\tIn feet.\n+Timezone\tHours offset from UTC. Fractional hours are expressed as decimals, eg. India is 5.5.\n+DST\tDaylight savings time. One of E (Europe), A (US/Canada), S (South America), O (Australia), Z (New Zealand), N (None) or U (Unknown). See also: Help: Time\n+Tz database time zone\tTimezone in \"tz\" (Olson) format, eg. \"America/Los_Angeles\".\n+Type\tType of the airport. Value \"airport\" for air terminals, \"station\" for train stations, \"port\" for ferry terminals and \"unknown\" if not known. In airports.csv, only type=airport is included.\n+Source\tSource of this data. \"OurAirports\" for data sourced from OurAirports, \"Legacy\" for old data not matched to OurAirports (mostly DAFIF), \"User\" for unverified user contributions. In airports.csv, only source=OurAirports is included.\n+The data is UTF-8 (Unicode) encoded.\n+\n+Note: Rules for daylight savings time change from year to year and from country to country. The current data is an approximation for 2009, built on a country level. Most airports in DST-less regions in countries that generally observe DST (eg. AL, HI in the USA, NT, QL in Australia, parts of Canada) are marked incorrectly.\n+\n+Sample entries\n+507,\"London Heathrow Airport\",\"London\",\"United Kingdom\",\"LHR\",\"EGLL\",51.4706,-0.461941,83,0,\"E\",\"Europe/London\",\"airport\",\"OurAirports\"\n+26,\"Kugaaruk Airport\",\"Pelly Bay\",\"Canada\",\"YBB\",\"CYBB\",68.534401,-89.808098,56,-7,\"A\",\"America/Edmonton\",\"airport\",\"OurAirports\"\n+3127,\"Pokhara Airport\",\"Pokhara\",\"Nepal\",\"PKR\",\"VNPK\",28.200899124145508,83.98210144042969,2712,5.75,\"N\",\"Asia/Katmandu\",\"airport\",\"OurAirports\"\n+8810,\"Hamburg Hbf\",\"Hamburg\",\"Germany\",\"ZMB\",\\N,53.552776,10.006683,30,1,\"E\",\"Europe/Berlin\",\"station\",\"User\"\n+   */\n+}\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/model/Airport.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/model/Airport.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "fede365f"
        },
        {
          "diff": "@@ -0,0 +1,27 @@\n+package ua.danit.application.model;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"ROUTES\")\n+public class Route {\n+\n+  String airline;\t// 2-letter (IATA) or 3-letter (ICAO) code of the airline.\n+  Integer airlineId;\t//Unique OpenFlights identifier for airline (see Airline).\n+  String sourceAirport;\t//3-letter (IATA) or 4-letter (ICAO) code of the source airport.\n+  Integer sourceAirportId; //ID\tUnique OpenFlights identifier for source airport (see Airport)\n+  String destinationAirport;\t//3-letter (IATA) or 4-letter (ICAO) code of the destination airport.\n+  Integer destinationAirportId;\t//Unique OpenFlights identifier for destination airport (see Airport)\n+  Boolean codeshare;\t//\"Y\" if this flight is a codeshare (that is, not operated by Airline, but another carrier), empty otherwise.\n+  Integer stops;\t//Number of stops on this flight (\"0\" for direct)\n+  String equipment;\t//3-letter codes for plane type(s) generally used on this flight, separated by spaces\n+\n+  /**\n+   Sample entries\n+\n+   BA,1355,SIN,3316,LHR,507,,0,744 777\n+   BA,1355,SIN,3316,MEL,3339,Y,0,744\n+   TOM,5013,ACE,1055,BFS,465,,0,320\n+   */\n+}\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/model/Route.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/model/Route.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "fede365f"
        }
      ]
    },
    {
      "id": "8fcf69b9c4010ec30fd20f2735bb53d704d7596b",
      "project_id": 4888518,
      "message": "UI updates\n",
      "title": "UI updates",
      "short_id": "8fcf69b9",
      "author_name": "V0L0DYMYR",
      "branches": null,
      "created_at": "2018-01-12T22:30:00Z",
      "diffs": [
        {
          "diff": "@@ -1,22 +1,31 @@\n <!DOCTYPE html>\n <html>\n <head>\n-    <title>Flights Search</title>\n-    <link rel=\"stylesheet\" href=\"/bootstrap.css\" type=\"text/css\">\n+  <title>Flights Search</title>\n+  <link rel=\"stylesheet\" href=\"/bootstrap.css\" type=\"text/css\">\n </head>\n <body>\n \n <div class=\"container\">\n \n-    <div class=\"jumbotron centered\">\n-        <h1>Flights Search</h1>\n-        <p class=\"lead\">Find all tickets in one place.</p>\n-        <form method=\"post\" action=\"/login\" class=\"col-4\">\n-            <input name=\"login\" class=\"form-control\" type=\"text\"><br>\n-            <input name=\"password\" class=\"form-control\"  type=\"password\"><br>\n-            <button class=\"btn btn-lg btn-success\" type=\"submit\">Login</button><br>\n-        </form>\n+  <div class=\"jumbotron centered\">\n+\n+    <div class=\"col-4\">\n+      <h1>Flights Search</h1>\n+\n+      <p class=\"lead\">Find all tickets in one place.</p>\n+\n+      <form class=\"form\" method=\"post\" action=\"/login\">\n+        <div class=\"form-group\">\n+          <input name=\"login\" class=\"form-control\" type=\"text\">\n+        </div>\n+        <div class=\"form-group\">\n+          <input name=\"password\" class=\"form-control\" type=\"password\">\n+        </div>\n+        <button class=\"btn btn-lg btn-success\" type=\"submit\">Login</button>\n+      </form>\n     </div>\n+  </div>\n </div>\n </body>\n-</html>\n+</html>\n\\ No newline at end of file\n",
          "old_path": "flights-app/resources/login.html",
          "new_path": "flights-app/resources/login.html",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "8fcf69b9"
        },
        {
          "diff": "@@ -1,95 +1,93 @@\n <!DOCTYPE html>\n <html>\n <head>\n-    <title>Flights Search</title>\n-    <link rel=\"stylesheet\" href=\"/bootstrap.css\" type=\"text/css\">\n+  <title>Flights Search</title>\n+  <link rel=\"stylesheet\" href=\"/bootstrap.css\" type=\"text/css\">\n </head>\n <body>\n \n <div class=\"container\">\n \n-    <div class=\"row\">\n-        <div class=\"jumbotron w-100 centered\">\n-            <h1>Flights Search</h1>\n+  <div class=\"row\">\n+    <div class=\"col pt-3\">\n+      <div class=\"jumbotron w-100 centered\">\n+        <h1>Flights Search</h1>\n \n-            <p class=\"lead\">Find all tickets in one place.</p>\n+        <p class=\"lead\">Find all tickets in one place.</p>\n \n-            <p>\n-                <a class=\"btn btn-lg btn-danger\" href=\"/logout\" role=\"button\">Logout</a>\n-            </p>\n-        </div>\n+        <p>\n+          <a class=\"btn btn-lg btn-danger\" href=\"/logout\" role=\"button\">Logout</a>\n+        </p>\n+      </div>\n     </div>\n+  </div>\n \n-    <div class=\"row\">\n-\n-        <div class=\"form\">\n+  <div class=\"row\">\n \n-            <div class=\"input-group w-100\">\n-                <input type=\"text\" class=\"form-control\" name=\"city\" placeholder=\"City ...\">\n-                <button id=\"searchBtn\"\n-                        class=\"btn btn-primary input-group-addon\">Search</button>\n-            </div>\n+    <div class=\"col pb-3\">\n+      <div class=\"form-inline\">\n \n+        <div class=\"input-group w-100\">\n+          <input type=\"text\" class=\"form-control\" name=\"city\" placeholder=\"City ...\">\n+          <button id=\"searchBtn\"\n+                  class=\"btn btn-primary input-group-addon\">Search\n+          </button>\n         </div>\n-    </div>\n \n-    <div class=\"row\">\n-        <div class=\"w-100\">\n-            <table class=\"table\">\n-                <thead>\n-                <tr>\n-                    <th>From</th>\n-                    <th>To</th>\n-                    <th>Departure Time</th>\n-                    <th>Arrival Time</th>\n-                </tr>\n-                </thead>\n-\n-                <tbody id=\"flightsContainer\"></tbody>\n-            </table>\n+      </div>\n+    </div>\n+  </div>\n \n-        </div>\n+  <div class=\"row\">\n+    <div class=\"col\">\n+      <div id=\"flightsContainer\"></div>\n     </div>\n+  </div>\n+</div>\n+\n+<script id=\"flightsTemplate\" type=\"text/x-jQuery-tmpl\">\n+  <div class=\"card\">\n+  <table class=\"table\">\n+    <thead>\n+    <tr>\n+      <th>From</th>\n+      <th>To</th>\n+      <th>Departure Time</th>\n+      <th>Arrival Time</th>\n+    </tr>\n+    </thead>\n \n-    <script id=\"flightsTemplate\" type=\"text/x-jQuery-tmpl\">\n+    {{each flights}}\n     <tr>\n       <td>${from}</td>\n       <td>${to}</td>\n       <td>${departureTime}</td>\n       <td>${arrivalTime}</td>\n     </tr>\n-  </script>\n+    {{/each}}\n+  </table>\n+  </div>\n+</script>\n \n-</div>\n <script src=\"/jquery.min.js\"></script>\n <script type=\"text/javascript\"\n         src=\"http://ajax.aspnetcdn.com/ajax/jquery.templates/beta1/jquery.tmpl.js\"></script>\n-</body>\n-</html>\n <script>\n   $(document).ready(function () {\n \n-    $('#searchBtn').click(function() {\n-       var city = $(\"input[name=city]\").val();\n-\n-      $.ajax({\n-\n-        url: '/flights/search?search=' + city,\n-        type: 'GET',\n-        success: handleFlights\n-      });\n-\n+    $('#searchBtn').click(function () {\n+      var city = $(\"input[name=city]\").val();\n+      $.get('/flights/search?search=' + city, handleFlights);\n     });\n \n-    $.ajax({\n-      url: '/flights/top',\n-      type: 'GET',\n-      success: handleFlights\n-    });\n+    $.get('/flights/top', handleFlights);\n \n     function handleFlights(data) {\n-        var flights = JSON.parse(data);\n-        $(\"#flightsTemplate\").tmpl(flights).appendTo(\"#flightsContainer\");\n+      var flights = JSON.parse(data);\n+      $(\"#flightsContainer\").empty();\n+      $(\"#flightsTemplate\").tmpl({flights: flights}).appendTo(\"#flightsContainer\");\n     }\n   });\n-</script>\n\\ No newline at end of file\n+</script>\n+</body>\n+</html>\n",
          "old_path": "flights-app/resources/search.html",
          "new_path": "flights-app/resources/search.html",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "8fcf69b9"
        }
      ]
    },
    {
      "id": "b82482fb9bc20d0c9ab2a3632aea41f4c39a2ae5",
      "project_id": 4888518,
      "message": "some\n",
      "title": "some",
      "short_id": "b82482fb",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2018-01-12T20:24:22Z",
      "diffs": [
        {
          "diff": "@@ -73,7 +73,8 @@\n        var city = $(\"input[name=city]\").val();\n \n       $.ajax({\n-        url: '/search?city=' + city,\n+\n+        url: '/flights/search?search=' + city,\n         type: 'GET',\n         success: handleFlights\n       });\n",
          "old_path": "flights-app/resources/search.html",
          "new_path": "flights-app/resources/search.html",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "b82482fb"
        }
      ]
    },
    {
      "id": "b731b330df55c53220ef660f9dd6bdcc79ff6c26",
      "project_id": 4888518,
      "message": "search field\n",
      "title": "search field",
      "short_id": "b731b330",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2018-01-12T19:40:38Z",
      "diffs": [
        {
          "diff": "@@ -20,6 +20,19 @@\n         </div>\n     </div>\n \n+    <div class=\"row\">\n+\n+        <div class=\"form\">\n+\n+            <div class=\"input-group w-100\">\n+                <input type=\"text\" class=\"form-control\" name=\"city\" placeholder=\"City ...\">\n+                <button id=\"searchBtn\"\n+                        class=\"btn btn-primary input-group-addon\">Search</button>\n+            </div>\n+\n+        </div>\n+    </div>\n+\n     <div class=\"row\">\n         <div class=\"w-100\">\n             <table class=\"table\">\n@@ -56,16 +69,26 @@\n <script>\n   $(document).ready(function () {\n \n+    $('#searchBtn').click(function() {\n+       var city = $(\"input[name=city]\").val();\n+\n       $.ajax({\n-        url: '/flights/top',\n+        url: '/search?city=' + city,\n         type: 'GET',\n-        success: function (data) {\n+        success: handleFlights\n+      });\n \n-          var flights = JSON.parse(data);\n+    });\n \n-          $(\"#flightsTemplate\").tmpl(flights).appendTo(\"#flightsContainer\");\n-        }\n+    $.ajax({\n+      url: '/flights/top',\n+      type: 'GET',\n+      success: handleFlights\n+    });\n \n-      });\n+    function handleFlights(data) {\n+        var flights = JSON.parse(data);\n+        $(\"#flightsTemplate\").tmpl(flights).appendTo(\"#flightsContainer\");\n+    }\n   });\n-</script>\n+</script>\n\\ No newline at end of file\n",
          "old_path": "flights-app/resources/search.html",
          "new_path": "flights-app/resources/search.html",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "b731b330"
        },
        {
          "diff": "@@ -24,10 +24,11 @@ public class FlightDao {\n       while (resultSet.next()) {\n \n         Long id = resultSet.getLong(\"id\");\n-        Long departureTime = resultSet.getLong(\"DEPARTURE_TIME\");\n-        Long arrivalTime = resultSet.getLong(\"ARRIVAL_TIME\");\n-        String from = resultSet.getString(\"from\");\n-        String to = resultSet.getString(\"to\");\n+        Long departureTime = resultSet.getLong(\"DEPARTURE TIME\");\n+        Long arrivalTime = resultSet.getLong(\"ARRIVAL TIME\");\n+        String from = resultSet.getString(\"DEPARTURE CITY\");\n+        String to = resultSet.getString(\"DESTINATION CITY\");\n+\n \n         Flight flight = new Flight(id, from, to, departureTime, arrivalTime);\n         result.add(flight);\n@@ -54,17 +55,18 @@ public class FlightDao {\n     String USER = \"danit1\";\n     try {\n       Connection con = DriverManager.getConnection(DB_URL,USER,PASSWD);\n-      String sql = \"select * from FLIGHTS where `from` like'\"+str+\"%' or `to` like '\"+str+\"%'\";\n+      String sql = \"select * from FLIGHTS where `DEPARTURE CITY` like'\"+str+\"%' or `DESTINATION CITY` like '\"+str+\"%'\";\n       Statement statement = con.createStatement();\n       ResultSet resultSet = statement.executeQuery(sql);\n \n       while (resultSet.next()) {\n \n         Long id = resultSet.getLong(\"id\");\n-        Long departureTime = resultSet.getLong(\"DEPARTURE_TIME\");\n-        Long arrivalTime = resultSet.getLong(\"ARRIVAL_TIME\");\n-        String from = resultSet.getString(\"from\");\n-        String to = resultSet.getString(\"to\");\n+        Long departureTime = resultSet.getLong(\"DEPARTURE TIME\");\n+        Long arrivalTime = resultSet.getLong(\"ARRIVAL TIME\");\n+        String from = resultSet.getString(\"DEPARTURE CITY\");\n+        String to = resultSet.getString(\"DESTINATION CITY\");\n+\n \n         Flight flight = new Flight(id, from, to, departureTime, arrivalTime);\n         result.add(flight);\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/dao/FlightDao.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/dao/FlightDao.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "b731b330"
        }
      ]
    },
    {
      "id": "3bd5ce5465b51b70bb5d47bd2ba008a50cac39fb",
      "project_id": 4888518,
      "message": "qweryparam\n",
      "title": "qweryparam",
      "short_id": "3bd5ce54",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2018-01-12T17:31:56Z",
      "diffs": [
        {
          "diff": "@@ -57,7 +57,7 @@\n   $(document).ready(function () {\n \n       $.ajax({\n-        url: '/flights/search',\n+        url: '/flights/top',\n         type: 'GET',\n         success: function (data) {\n \n",
          "old_path": "flights-app/resources/search.html",
          "new_path": "flights-app/resources/search.html",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "3bd5ce54"
        },
        {
          "diff": "@@ -6,6 +6,8 @@ import ua.danit.application.model.Flight;\n \n import javax.ws.rs.GET;\n import javax.ws.rs.Path;\n+import javax.ws.rs.QueryParam;\n+\n import java.io.IOException;\n \n public class FlightResource {\n@@ -30,12 +32,12 @@ public class FlightResource {\n \n   @Path(\"/flights/search\")\n   @GET\n-  public String getSearchFlights() throws IOException {\n+  public String getSearchFlights(@QueryParam(\"search\") String search) throws IOException {\n     if (flightDao == null) {\n       flightDao = new FlightDao();\n     }\n \n-    Iterable<Flight> flights = flightDao.searchFlights(\"Paris\");\n+    Iterable<Flight> flights = flightDao.searchFlights(search);\n     ObjectMapper mapper = new ObjectMapper();\n     return mapper.writeValueAsString(flights);\n   }\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/resources/FlightResource.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/resources/FlightResource.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "3bd5ce54"
        }
      ]
    },
    {
      "id": "ac5a235ee6c08b2dada618cde5e585ebc3b48a04",
      "project_id": 4888518,
      "message": "search form method\n",
      "title": "search form method",
      "short_id": "ac5a235e",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2018-01-12T17:10:10Z",
      "diffs": [
        {
          "diff": "@@ -22,7 +22,7 @@\n \n     <div class=\"row\">\n         <div class=\"w-100\">\n-            <table class=\"table table-dark\">\n+            <table class=\"table\">\n                 <thead>\n                 <tr>\n                     <th>From</th>\n@@ -57,7 +57,7 @@\n   $(document).ready(function () {\n \n       $.ajax({\n-        url: '/flights/top',\n+        url: '/flights/search',\n         type: 'GET',\n         success: function (data) {\n \n@@ -69,4 +69,3 @@\n       });\n   });\n </script>\n-\n",
          "old_path": "flights-app/resources/search.html",
          "new_path": "flights-app/resources/search.html",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "ac5a235e"
        },
        {
          "diff": "@@ -17,7 +17,7 @@ public class FlightDao {\n     String USER = \"danit1\";\n     try {\n       Connection con = DriverManager.getConnection(DB_URL,USER,PASSWD);\n-      String sql = \"select id, `from`, `to`, `DEPARTURE_TIME`, `ARRIVAL_TIME` from FLIGHTS\";\n+      String sql = \"select * from FLIGHTS\";\n       Statement statement = con.createStatement();\n       ResultSet resultSet = statement.executeQuery(sql);\n \n@@ -45,4 +45,42 @@ public class FlightDao {\n \n     return result;\n   }\n+  public Iterable<Flight> searchFlights(String str) {\n+    List<Flight> result = Lists.newArrayList();\n+\n+\n+    String PASSWD = \"danit1\";\n+    String DB_URL = \"jdbc:mysql://mysql8.db4free.net:3307/danit_flights?useSSL=false\";\n+    String USER = \"danit1\";\n+    try {\n+      Connection con = DriverManager.getConnection(DB_URL,USER,PASSWD);\n+      String sql = \"select * from FLIGHTS where `from` like'\"+str+\"%' or `to` like '\"+str+\"%'\";\n+      Statement statement = con.createStatement();\n+      ResultSet resultSet = statement.executeQuery(sql);\n+\n+      while (resultSet.next()) {\n+\n+        Long id = resultSet.getLong(\"id\");\n+        Long departureTime = resultSet.getLong(\"DEPARTURE_TIME\");\n+        Long arrivalTime = resultSet.getLong(\"ARRIVAL_TIME\");\n+        String from = resultSet.getString(\"from\");\n+        String to = resultSet.getString(\"to\");\n+\n+        Flight flight = new Flight(id, from, to, departureTime, arrivalTime);\n+        result.add(flight);\n+      }\n+\n+      resultSet.close();\n+      statement.close();\n+      con.close();\n+\n+\n+    } catch (SQLException e) {\n+      throw new RuntimeException(e);\n+    }\n+\n+\n+    return result;\n+  }\n+\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/dao/FlightDao.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/dao/FlightDao.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "ac5a235e"
        },
        {
          "diff": "@@ -28,5 +28,17 @@ public class FlightResource {\n     return mapper.writeValueAsString(flights);\n   }\n \n+  @Path(\"/flights/search\")\n+  @GET\n+  public String getSearchFlights() throws IOException {\n+    if (flightDao == null) {\n+      flightDao = new FlightDao();\n+    }\n+\n+    Iterable<Flight> flights = flightDao.searchFlights(\"Paris\");\n+    ObjectMapper mapper = new ObjectMapper();\n+    return mapper.writeValueAsString(flights);\n+  }\n+\n   //TODO: add new Path for Get By Id\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/resources/FlightResource.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/resources/FlightResource.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "ac5a235e"
        }
      ]
    },
    {
      "id": "c550b56606803453ffeeb53c08bd804b90f46b66",
      "project_id": 4888518,
      "message": "my\n",
      "title": "my",
      "short_id": "c550b566",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2018-01-11T21:28:10Z",
      "diffs": [
        {
          "diff": "@@ -11,12 +11,12 @@\n     <div class=\"jumbotron centered\">\n         <h1>Flights Search</h1>\n         <p class=\"lead\">Find all tickets in one place.</p>\n-        <form method=\"post\" action=\"/login\">\n-            <input name=\"login\" type=\"text\"><br>\n-            <input name=\"password\" type=\"password\"><br>\n+        <form method=\"post\" action=\"/login\" class=\"col-4\">\n+            <input name=\"login\" class=\"form-control\" type=\"text\"><br>\n+            <input name=\"password\" class=\"form-control\"  type=\"password\"><br>\n             <button class=\"btn btn-lg btn-success\" type=\"submit\">Login</button><br>\n         </form>\n     </div>\n </div>\n </body>\n-</html>\n\\ No newline at end of file\n+</html>\n",
          "old_path": "flights-app/resources/login.html",
          "new_path": "flights-app/resources/login.html",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c550b566"
        },
        {
          "diff": "@@ -8,54 +8,65 @@\n \n <div class=\"container\">\n \n-    <div class=\"jumbotron centered\">\n-        <h1>Flights Search</h1>\n-        <p class=\"lead\">Find all tickets in one place.</p>\n-        <p>\n-            <a class=\"btn btn-lg btn-danger\" href=\"/logout\" role=\"button\">Logout</a>\n-        </p>\n+    <div class=\"row\">\n+        <div class=\"jumbotron w-100 centered\">\n+            <h1>Flights Search</h1>\n+\n+            <p class=\"lead\">Find all tickets in one place.</p>\n+\n+            <p>\n+                <a class=\"btn btn-lg btn-danger\" href=\"/logout\" role=\"button\">Logout</a>\n+            </p>\n+        </div>\n     </div>\n+\n     <div class=\"row\">\n-        <div class=\"col-xs-1 col-md-3\">\n-            <div class=\"form-group\">\n-                <a id=\"searchBtn\" class=\"btn btn-lg btn-success\" role=\"button\">Search</a>\n+        <div class=\"w-100\">\n+            <table class=\"table table-dark\">\n+                <thead>\n+                <tr>\n+                    <th>From</th>\n+                    <th>To</th>\n+                    <th>Departure Time</th>\n+                    <th>Arrival Time</th>\n+                </tr>\n+                </thead>\n \n-                \t<table id = \"some\" border=\"3\"></table>\n+                <tbody id=\"flightsContainer\"></tbody>\n+            </table>\n \n-            </div>\n         </div>\n     </div>\n+\n+    <script id=\"flightsTemplate\" type=\"text/x-jQuery-tmpl\">\n+    <tr>\n+      <td>${from}</td>\n+      <td>${to}</td>\n+      <td>${departureTime}</td>\n+      <td>${arrivalTime}</td>\n+    </tr>\n+  </script>\n+\n </div>\n <script src=\"/jquery.min.js\"></script>\n+<script type=\"text/javascript\"\n+        src=\"http://ajax.aspnetcdn.com/ajax/jquery.templates/beta1/jquery.tmpl.js\"></script>\n </body>\n </html>\n <script>\n-    $(document).ready(function () {\n-        $('#searchBtn').click(function() {\n-\n-            $.ajax({\n-                url: '/flights/top',\n-                type: 'GET',\n-                success: function (data) {\n-\n-                    var t = JSON.parse(data);\n+  $(document).ready(function () {\n \n-                    var table = $('<table border=\"1\"></table>').addClass('foo');\n-                    for(i=0; i<t.length; i++){\n+      $.ajax({\n+        url: '/flights/top',\n+        type: 'GET',\n+        success: function (data) {\n \n-                    var id = $('<td></td>').addClass('id').text(t[i].id);\n-                    var from = $('<td></td>').addClass('from').text(t[i].from);\n-                    var to = $('<td></td>').addClass('to').text(t[i].to);\n-                    var string = $('<tr></tr>').add(id).add(from).add(to);\n+          var flights = JSON.parse(data);\n \n-                    table.append(string);\n+          $(\"#flightsTemplate\").tmpl(flights).appendTo(\"#flightsContainer\");\n+        }\n \n-                    }\n-                    $('#some').append(table);\n-\n-                }\n-\n-            });\n-        });\n-    });\n+      });\n+  });\n </script>\n+\n",
          "old_path": "flights-app/resources/search.html",
          "new_path": "flights-app/resources/search.html",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c550b566"
        }
      ]
    },
    {
      "id": "00783d0c611ee5da9387af360192a7ed5cd6c6b6",
      "project_id": 4888518,
      "message": "s\n",
      "title": "s",
      "short_id": "00783d0c",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2018-01-11T16:11:40Z",
      "diffs": [
        {
          "diff": "@@ -20,7 +20,7 @@\n             <div class=\"form-group\">\n                 <a id=\"searchBtn\" class=\"btn btn-lg btn-success\" role=\"button\">Search</a>\n \n-                \t<table id = \"some\" border=\"1\"></table>\n+                \t<table id = \"some\" border=\"3\"></table>\n \n             </div>\n         </div>\n@@ -40,7 +40,7 @@\n \n                     var t = JSON.parse(data);\n \n-                    var table = $('<table></table>').addClass('foo');\n+                    var table = $('<table border=\"1\"></table>').addClass('foo');\n                     for(i=0; i<t.length; i++){\n \n                     var id = $('<td></td>').addClass('id').text(t[i].id);\n",
          "old_path": "flights-app/resources/search.html",
          "new_path": "flights-app/resources/search.html",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "00783d0c"
        }
      ]
    },
    {
      "id": "c278b7eb1a5ee672b200e21921ed45f38df26b91",
      "project_id": 4888518,
      "message": "some changes\n",
      "title": "some changes",
      "short_id": "c278b7eb",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2018-01-11T16:07:21Z",
      "diffs": [
        {
          "diff": "@@ -0,0 +1,22 @@\n+<!DOCTYPE html>\n+<html>\n+<head>\n+    <title>Flights Search</title>\n+    <link rel=\"stylesheet\" href=\"/bootstrap.css\" type=\"text/css\">\n+</head>\n+<body>\n+\n+<div class=\"container\">\n+\n+    <div class=\"jumbotron centered\">\n+        <h1>Flights Search</h1>\n+        <p class=\"lead\">Find all tickets in one place.</p>\n+        <form method=\"post\" action=\"/login\">\n+            <input name=\"login\" type=\"text\"><br>\n+            <input name=\"password\" type=\"password\"><br>\n+            <button class=\"btn btn-lg btn-success\" type=\"submit\">Login</button><br>\n+        </form>\n+    </div>\n+</div>\n+</body>\n+</html>\n\\ No newline at end of file\n",
          "old_path": "flights-app/resources/login.html",
          "new_path": "flights-app/resources/login.html",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c278b7eb"
        },
        {
          "diff": "@@ -0,0 +1,61 @@\n+<!DOCTYPE html>\n+<html>\n+<head>\n+    <title>Flights Search</title>\n+    <link rel=\"stylesheet\" href=\"/bootstrap.css\" type=\"text/css\">\n+</head>\n+<body>\n+\n+<div class=\"container\">\n+\n+    <div class=\"jumbotron centered\">\n+        <h1>Flights Search</h1>\n+        <p class=\"lead\">Find all tickets in one place.</p>\n+        <p>\n+            <a class=\"btn btn-lg btn-danger\" href=\"/logout\" role=\"button\">Logout</a>\n+        </p>\n+    </div>\n+    <div class=\"row\">\n+        <div class=\"col-xs-1 col-md-3\">\n+            <div class=\"form-group\">\n+                <a id=\"searchBtn\" class=\"btn btn-lg btn-success\" role=\"button\">Search</a>\n+\n+                \t<table id = \"some\" border=\"1\"></table>\n+\n+            </div>\n+        </div>\n+    </div>\n+</div>\n+<script src=\"/jquery.min.js\"></script>\n+</body>\n+</html>\n+<script>\n+    $(document).ready(function () {\n+        $('#searchBtn').click(function() {\n+\n+            $.ajax({\n+                url: '/flights/top',\n+                type: 'GET',\n+                success: function (data) {\n+\n+                    var t = JSON.parse(data);\n+\n+                    var table = $('<table></table>').addClass('foo');\n+                    for(i=0; i<t.length; i++){\n+\n+                    var id = $('<td></td>').addClass('id').text(t[i].id);\n+                    var from = $('<td></td>').addClass('from').text(t[i].from);\n+                    var to = $('<td></td>').addClass('to').text(t[i].to);\n+                    var string = $('<tr></tr>').add(id).add(from).add(to);\n+\n+                    table.append(string);\n+\n+                    }\n+                    $('#some').append(table);\n+\n+                }\n+\n+            });\n+        });\n+    });\n+</script>\n",
          "old_path": "flights-app/resources/search.html",
          "new_path": "flights-app/resources/search.html",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c278b7eb"
        },
        {
          "diff": "@@ -10,6 +10,7 @@ import ua.danit.application.dao.FlightDao;\n import ua.danit.application.resources.FlightResource;\n import ua.danit.framework.DispatcherServlet;\n import ua.danit.framework.LoginServlet;\n+import ua.danit.framework.LogoutServlet;\n \n public class WebApp {\n \n@@ -24,7 +25,9 @@ public class WebApp {\n         ServletContextHandler handler = new ServletContextHandler();\n \n         DispatcherServlet servlet = new DispatcherServlet(Resource.class)\n-                .addFileMapping(\"/\", new File(\"flights-app/resources/index.html\"))\n+                .addFileMapping(\"/\", new File(\"flights-app/resources/search.html\"))\n+//                .addFileMapping(\"/login\", new File(\"flights-app/resources/login.html\"))\n+                .addFileMapping(\"/search\", new File(\"flights-app/resources/search.html\"))\n                 .addFileMapping(\"/bootstrap.css\", new File(\"flights-app/resources/bootstrap.min.css\"))\n                 .addFileMapping(\"/jquery.min.js\", new File(\"flights-app/resources/js/jquery.min.js\"));\n \n@@ -35,6 +38,9 @@ public class WebApp {\n         LoginServlet loginServlet = new LoginServlet();\n         handler.addServlet(new ServletHolder(loginServlet), \"/login\");\n \n+        LogoutServlet logoutServlet = new LogoutServlet();\n+        handler.addServlet(new ServletHolder(logoutServlet), \"/logout\");\n+\n         server.setHandler(handler);\n         server.start();\n         server.join();\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c278b7eb"
        },
        {
          "diff": "@@ -15,7 +15,6 @@ public class FlightDao {\n     String PASSWD = \"danit1\";\n     String DB_URL = \"jdbc:mysql://mysql8.db4free.net:3307/danit_flights?useSSL=false\";\n     String USER = \"danit1\";\n-\n     try {\n       Connection con = DriverManager.getConnection(DB_URL,USER,PASSWD);\n       String sql = \"select id, `from`, `to`, `DEPARTURE_TIME`, `ARRIVAL_TIME` from FLIGHTS\";\n@@ -23,6 +22,7 @@ public class FlightDao {\n       ResultSet resultSet = statement.executeQuery(sql);\n \n       while (resultSet.next()) {\n+\n         Long id = resultSet.getLong(\"id\");\n         Long departureTime = resultSet.getLong(\"DEPARTURE_TIME\");\n         Long arrivalTime = resultSet.getLong(\"ARRIVAL_TIME\");\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/dao/FlightDao.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/dao/FlightDao.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c278b7eb"
        },
        {
          "diff": "@@ -12,6 +12,7 @@ public class Flight {\n     this.from = from;\n     this.to = to;\n     this.departureTime = departureTime;\n+\n     this.arrivalTime = arrivalTime;\n   }\n \n",
          "old_path": "flights-app/src/main/java/ua/danit/application/model/Flight.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/model/Flight.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c278b7eb"
        },
        {
          "diff": "@@ -48,24 +48,26 @@ public class DispatcherServlet extends HttpServlet {\n   protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n       throws ServletException, IOException {\n \n-    String loginName = null;\n+    boolean cookeieExists = false;\n \n     if (req.getCookies() != null) {\n \n       for (Cookie cookie : req.getCookies()) {\n         String cookieName = cookie.getName();\n-        if (cookieName != null && cookieName.equals(\"flight-user\")) {\n-          loginName = cookie.getValue();\n+        if (cookieName != null && cookieName.equals(\"flight-user\") && cookie.getMaxAge() == -1) {\n+          cookeieExists = cookie.getValue() != null;\n         }\n       }\n     }\n \n-    if (loginName == null) {\n+\n+    String uri = req.getRequestURI();\n+\n+\n+    if (!cookeieExists && !uri.contains(\".\")) {\n       resp.sendRedirect(\"/login\");\n     } else {\n-      String uri = req.getRequestURI();\n-\n-     Invocation invoc = resources.get(uri);\n+      Invocation invoc = resources.get(uri);\n \n       if (resources.containsKey(uri) && canHandleGetMethod(invoc)) {\n         handleMethod(req, resp, invoc);\n@@ -90,7 +92,7 @@ public class DispatcherServlet extends HttpServlet {\n \n     Invocation invoc = resources.get(uri);\n \n-    if (canHandlePostMethod(invoc)) {\n+    if (invoc != null && canHandlePostMethod(invoc)) {\n       handleMethod(req, resp, invoc);\n     } else {\n       resp.sendError(404);\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c278b7eb"
        },
        {
          "diff": "@@ -1,10 +1,14 @@\n package ua.danit.framework;\n \n+import com.google.common.base.Charsets;\n+import com.google.common.io.Files;\n+\n import javax.servlet.ServletException;\n import javax.servlet.http.Cookie;\n import javax.servlet.http.HttpServlet;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n+import java.io.File;\n import java.io.IOException;\n \n public class LoginServlet extends HttpServlet {\n@@ -25,20 +29,28 @@ public class LoginServlet extends HttpServlet {\n \n       for (Cookie cookie : req.getCookies()) {\n         String cookieName = cookie.getName();\n-        if (cookieName != null && cookieName.equals(\"flight-user\")) {\n+        if (cookieName != null && cookieName.equals(\"flight-user\") && cookie.getMaxAge() == -1) {\n           loginName = cookie.getValue();\n         }\n       }\n     }\n \n-    resp.getWriter().write(loginName == null\n-        || loginName.isEmpty() ? loginForm : loginName);\n+    if (loginName != null && !loginName.isEmpty()) {\n+      resp.sendRedirect(\"/search\");\n+    } else {\n+      resp.getWriter().write(Files.toString(new File(\"flights-app/resources/login.html\"), Charsets.UTF_8));\n+    }\n   }\n \n   @Override\n   protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n     String login = req.getParameter(\"login\");\n     String password = req.getParameter(\"password\");\n-    resp.addCookie(new Cookie(\"flight-user\", login));\n+    Cookie cookie = new Cookie(\"flight-user\", login);\n+    cookie.setMaxAge(-1);\n+\n+    resp.addCookie(cookie);\n+\n+    resp.sendRedirect(\"/search\");\n   }\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/LoginServlet.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/LoginServlet.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c278b7eb"
        },
        {
          "diff": "@@ -0,0 +1,34 @@\n+package ua.danit.framework;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+\n+public class LogoutServlet extends HttpServlet {\n+\n+    @Override\n+    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+        setCookieAge0(req, resp);\n+        resp.sendRedirect(\"/\");\n+    }\n+\n+    @Override\n+    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+        setCookieAge0(req, resp);\n+        resp.sendRedirect(\"/\");\n+    }\n+\n+    private void setCookieAge0(HttpServletRequest req, HttpServletResponse resp) {\n+        Cookie[] cookies = req.getCookies();\n+        for (Cookie cookie : cookies) {\n+            String cookieName = cookie.getName();\n+            if (cookieName != null && cookieName.equals(\"flight-user\")) {\n+                cookie.setMaxAge(0);\n+                resp.addCookie(cookie);\n+            }\n+        }\n+    }\n+}\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/LogoutServlet.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/LogoutServlet.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c278b7eb"
        },
        {
          "diff": "@@ -74,10 +74,6 @@ public class Parser {\n     return requestMethod;\n   }\n \n-\n-\n-\n-\n   private static List<QueryParam> getQueryParamList(Method method) {\n     List<QueryParam> queryParams = new ArrayList<>();\n     Annotation[][] parameterAnnotations = method.getParameterAnnotations();\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c278b7eb"
        }
      ]
    },
    {
      "id": "239adbd5ecb6008e3409d511ac81f1b35f091c2d",
      "project_id": 4888518,
      "message": "Merge branch '46-implement-end-to-end-flight-service' into 'master'\n\nResolve \"Implement end-to-end flight service.\"\n\nCloses #46\n\nSee merge request korsa719/Flights!17",
      "title": "Merge branch '46-implement-end-to-end-flight-service' into 'master'",
      "short_id": "239adbd5",
      "author_name": "Volodymyr Derkach",
      "branches": null,
      "created_at": "2018-01-11T11:56:22Z",
      "diffs": [
        {
          "diff": "@@ -15,6 +15,7 @@ public class FlightDao {\n     String PASSWD = \"danit1\";\n     String DB_URL = \"jdbc:mysql://mysql8.db4free.net:3307/danit_flights?useSSL=false\";\n     String USER = \"danit1\";\n+\n     try {\n       Connection con = DriverManager.getConnection(DB_URL,USER,PASSWD);\n       String sql = \"select id, `from`, `to`, `DEPARTURE_TIME`, `ARRIVAL_TIME` from FLIGHTS\";\n@@ -22,7 +23,6 @@ public class FlightDao {\n       ResultSet resultSet = statement.executeQuery(sql);\n \n       while (resultSet.next()) {\n-\n         Long id = resultSet.getLong(\"id\");\n         Long departureTime = resultSet.getLong(\"DEPARTURE_TIME\");\n         Long arrivalTime = resultSet.getLong(\"ARRIVAL_TIME\");\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/dao/FlightDao.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/dao/FlightDao.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "239adbd5"
        },
        {
          "diff": "@@ -12,7 +12,6 @@ public class Flight {\n     this.from = from;\n     this.to = to;\n     this.departureTime = departureTime;\n-\n     this.arrivalTime = arrivalTime;\n   }\n \n",
          "old_path": "flights-app/src/main/java/ua/danit/application/model/Flight.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/model/Flight.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "239adbd5"
        },
        {
          "diff": "@@ -74,6 +74,10 @@ public class Parser {\n     return requestMethod;\n   }\n \n+\n+\n+\n+\n   private static List<QueryParam> getQueryParamList(Method method) {\n     List<QueryParam> queryParams = new ArrayList<>();\n     Annotation[][] parameterAnnotations = method.getParameterAnnotations();\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "239adbd5"
        }
      ]
    },
    {
      "id": "daa738162009e686162e8d538536664cc1c44fc7",
      "project_id": 4888518,
      "message": "Merge branch 'master' into '46-implement-end-to-end-flight-service'\n\n# Conflicts:\n#   flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
      "title": "Merge branch 'master' into '46-implement-end-to-end-flight-service'",
      "short_id": "daa73816",
      "author_name": "Volodymyr Derkach",
      "branches": null,
      "created_at": "2018-01-11T11:55:45Z",
      "diffs": [
        {
          "diff": "@@ -1,20 +1,46 @@\n <!DOCTYPE html>\n <html>\n <head>\n-  <title>Flights Search</title>\n-  <link rel=\"stylesheet\" href=\"/bootstrap.css\" type=\"text/css\">\n+    <title>Flights Search</title>\n+    <link rel=\"stylesheet\" href=\"/bootstrap.css\" type=\"text/css\">\n </head>\n <body>\n \n <div class=\"container\">\n \n-  <div class=\"jumbotron centered\">\n-    <h1>Flights Search</h1>\n-    <p class=\"lead\">Find all tickets in one place.</p>\n-    <p>\n-      <a class=\"btn btn-lg btn-success\" href=\"#\" role=\"button\">Sign up today</a>\n-    </p>\n-  </div>\n+    <div class=\"jumbotron centered\">\n+        <h1>Flights Search</h1>\n+        <p class=\"lead\">Find all tickets in one place.</p>\n+        <p>\n+            <a class=\"btn btn-lg btn-success\" href=\"/login\" role=\"button\">Sign up today</a>\n+        </p>\n+    </div>\n+    <div class=\"row\">\n+        <div class=\"col-xs-1 col-md-3\">\n+            <div class=\"form-group\">\n+                <a id=\"searchBtn\" class=\"btn btn-lg btn-success\" role=\"button\">Search</a>\n+            </div>\n+        </div>\n+    </div>\n </div>\n+<script src=\"/jquery.min.js\"></script>\n+<script>\n+    $(document).ready(function () {\n+        $('#searchBtn').click(function() {\n+\n+            $.ajax({\n+                url: '/flights/top',\n+                type: 'GET',\n+                success: function (data) {\n+                    var t = JSON.parse(data);\n+\n+                    console.log(t[0].id);\n+                    console.log(t[0].from);\n+                    console.log(t[0].to);\n+                }\n+            });\n+        });\n+    });\n+</script>\n </body>\n </html>\n\\ No newline at end of file\n",
          "old_path": "flights-app/resources/index.html",
          "new_path": "flights-app/resources/index.html",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "daa73816"
        },
        {
          "diff": "@@ -0,0 +1,5 @@\n+/*! jQuery v1.11.1 | (c) 2005, 2014 jQuery Foundation, Inc. | jquery.org/license */\n+!function(a,b){\"object\"==typeof module&&\"object\"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error(\"jQuery requires a window with a document\");return b(a)}:b(a)}(\"undefined\"!=typeof window?window:this,function(a,b){var c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k={},l=\"1.11.1\",m=function(a,b){return new m.fn.init(a,b)},n=/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,o=/^-ms-/,p=/-([\\da-z])/gi,q=function(a,b){return b.toUpperCase()};m.fn=m.prototype={jquery:l,constructor:m,selector:\"\",length:0,toArray:function(){return d.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:d.call(this)},pushStack:function(a){var b=m.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a,b){return m.each(this,a,b)},map:function(a){return this.pushStack(m.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:c.sort,splice:c.splice},m.extend=m.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for(\"boolean\"==typeof g&&(j=g,g=arguments[h]||{},h++),\"object\"==typeof g||m.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(e=arguments[h]))for(d in e)a=g[d],c=e[d],g!==c&&(j&&c&&(m.isPlainObject(c)||(b=m.isArray(c)))?(b?(b=!1,f=a&&m.isArray(a)?a:[]):f=a&&m.isPlainObject(a)?a:{},g[d]=m.extend(j,f,c)):void 0!==c&&(g[d]=c));return g},m.extend({expando:\"jQuery\"+(l+Math.random()).replace(/\\D/g,\"\"),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return\"function\"===m.type(a)},isArray:Array.isArray||function(a){return\"array\"===m.type(a)},isWindow:function(a){return null!=a&&a==a.window},isNumeric:function(a){return!m.isArray(a)&&a-parseFloat(a)>=0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},isPlainObject:function(a){var b;if(!a||\"object\"!==m.type(a)||a.nodeType||m.isWindow(a))return!1;try{if(a.constructor&&!j.call(a,\"constructor\")&&!j.call(a.constructor.prototype,\"isPrototypeOf\"))return!1}catch(c){return!1}if(k.ownLast)for(b in a)return j.call(a,b);for(b in a);return void 0===b||j.call(a,b)},type:function(a){return null==a?a+\"\":\"object\"==typeof a||\"function\"==typeof a?h[i.call(a)]||\"object\":typeof a},globalEval:function(b){b&&m.trim(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(o,\"ms-\").replace(p,q)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b,c){var d,e=0,f=a.length,g=r(a);if(c){if(g){for(;f>e;e++)if(d=b.apply(a[e],c),d===!1)break}else for(e in a)if(d=b.apply(a[e],c),d===!1)break}else if(g){for(;f>e;e++)if(d=b.call(a[e],e,a[e]),d===!1)break}else for(e in a)if(d=b.call(a[e],e,a[e]),d===!1)break;return a},trim:function(a){return null==a?\"\":(a+\"\").replace(n,\"\")},makeArray:function(a,b){var c=b||[];return null!=a&&(r(Object(a))?m.merge(c,\"string\"==typeof a?[a]:a):f.call(c,a)),c},inArray:function(a,b,c){var d;if(b){if(g)return g.call(b,a,c);for(d=b.length,c=c?0>c?Math.max(0,d+c):c:0;d>c;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,b){var c=+b.length,d=0,e=a.length;while(c>d)a[e++]=b[d++];if(c!==c)while(void 0!==b[d])a[e++]=b[d++];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,f=0,g=a.length,h=r(a),i=[];if(h)for(;g>f;f++)d=b(a[f],f,c),null!=d&&i.push(d);else for(f in a)d=b(a[f],f,c),null!=d&&i.push(d);return e.apply([],i)},guid:1,proxy:function(a,b){var c,e,f;return\"string\"==typeof b&&(f=a[b],b=a,a=f),m.isFunction(a)?(c=d.call(arguments,2),e=function(){return a.apply(b||this,c.concat(d.call(arguments)))},e.guid=a.guid=a.guid||m.guid++,e):void 0},now:function(){return+new Date},support:k}),m.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"),function(a,b){h[\"[object \"+b+\"]\"]=b.toLowerCase()});function r(a){var b=a.length,c=m.type(a);return\"function\"===c||m.isWindow(a)?!1:1===a.nodeType&&b?!0:\"array\"===c||0===b||\"number\"==typeof b&&b>0&&b-1 in a}var s=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u=\"sizzle\"+-new Date,v=a.document,w=0,x=0,y=gb(),z=gb(),A=gb(),B=function(a,b){return a===b&&(l=!0),0},C=\"undefined\",D=1<<31,E={}.hasOwnProperty,F=[],G=F.pop,H=F.push,I=F.push,J=F.slice,K=F.indexOf||function(a){for(var b=0,c=this.length;c>b;b++)if(this[b]===a)return b;return-1},L=\"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",M=\"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",N=\"(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+\",O=N.replace(\"w\",\"w#\"),P=\"\\\\[\"+M+\"*(\"+N+\")(?:\"+M+\"*([*^$|!~]?=)\"+M+\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\"+O+\"))|)\"+M+\"*\\\\]\",Q=\":(\"+N+\")(?:\\\\((('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\"+P+\")*)|.*)\\\\)|)\",R=new RegExp(\"^\"+M+\"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\"+M+\"+$\",\"g\"),S=new RegExp(\"^\"+M+\"*,\"+M+\"*\"),T=new RegExp(\"^\"+M+\"*([>+~]|\"+M+\")\"+M+\"*\"),U=new RegExp(\"=\"+M+\"*([^\\\\]'\\\"]*?)\"+M+\"*\\\\]\",\"g\"),V=new RegExp(Q),W=new RegExp(\"^\"+O+\"$\"),X={ID:new RegExp(\"^#(\"+N+\")\"),CLASS:new RegExp(\"^\\\\.(\"+N+\")\"),TAG:new RegExp(\"^(\"+N.replace(\"w\",\"w*\")+\")\"),ATTR:new RegExp(\"^\"+P),PSEUDO:new RegExp(\"^\"+Q),CHILD:new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\"+M+\"*(even|odd|(([+-]|)(\\\\d*)n|)\"+M+\"*(?:([+-]|)\"+M+\"*(\\\\d+)|))\"+M+\"*\\\\)|)\",\"i\"),bool:new RegExp(\"^(?:\"+L+\")$\",\"i\"),needsContext:new RegExp(\"^\"+M+\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\"+M+\"*((?:-\\\\d)?\\\\d*)\"+M+\"*\\\\)|)(?=[^-]|$)\",\"i\")},Y=/^(?:input|select|textarea|button)$/i,Z=/^h\\d$/i,$=/^[^{]+\\{\\s*\\[native \\w/,_=/^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,ab=/[+~]/,bb=/'|\\\\/g,cb=new RegExp(\"\\\\\\\\([\\\\da-f]{1,6}\"+M+\"?|(\"+M+\")|.)\",\"ig\"),db=function(a,b,c){var d=\"0x\"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)};try{I.apply(F=J.call(v.childNodes),v.childNodes),F[v.childNodes.length].nodeType}catch(eb){I={apply:F.length?function(a,b){H.apply(a,J.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function fb(a,b,d,e){var f,h,j,k,l,o,r,s,w,x;if((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,d=d||[],!a||\"string\"!=typeof a)return d;if(1!==(k=b.nodeType)&&9!==k)return[];if(p&&!e){if(f=_.exec(a))if(j=f[1]){if(9===k){if(h=b.getElementById(j),!h||!h.parentNode)return d;if(h.id===j)return d.push(h),d}else if(b.ownerDocument&&(h=b.ownerDocument.getElementById(j))&&t(b,h)&&h.id===j)return d.push(h),d}else{if(f[2])return I.apply(d,b.getElementsByTagName(a)),d;if((j=f[3])&&c.getElementsByClassName&&b.getElementsByClassName)return I.apply(d,b.getElementsByClassName(j)),d}if(c.qsa&&(!q||!q.test(a))){if(s=r=u,w=b,x=9===k&&a,1===k&&\"object\"!==b.nodeName.toLowerCase()){o=g(a),(r=b.getAttribute(\"id\"))?s=r.replace(bb,\"\\\\$&\"):b.setAttribute(\"id\",s),s=\"[id='\"+s+\"'] \",l=o.length;while(l--)o[l]=s+qb(o[l]);w=ab.test(a)&&ob(b.parentNode)||b,x=o.join(\",\")}if(x)try{return I.apply(d,w.querySelectorAll(x)),d}catch(y){}finally{r||b.removeAttribute(\"id\")}}}return i(a.replace(R,\"$1\"),b,d,e)}function gb(){var a=[];function b(c,e){return a.push(c+\" \")>d.cacheLength&&delete b[a.shift()],b[c+\" \"]=e}return b}function hb(a){return a[u]=!0,a}function ib(a){var b=n.createElement(\"div\");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function jb(a,b){var c=a.split(\"|\"),e=a.length;while(e--)d.attrHandle[c[e]]=b}function kb(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||D)-(~a.sourceIndex||D);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function lb(a){return function(b){var c=b.nodeName.toLowerCase();return\"input\"===c&&b.type===a}}function mb(a){return function(b){var c=b.nodeName.toLowerCase();return(\"input\"===c||\"button\"===c)&&b.type===a}}function nb(a){return hb(function(b){return b=+b,hb(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function ob(a){return a&&typeof a.getElementsByTagName!==C&&a}c=fb.support={},f=fb.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?\"HTML\"!==b.nodeName:!1},m=fb.setDocument=function(a){var b,e=a?a.ownerDocument||a:v,g=e.defaultView;return e!==n&&9===e.nodeType&&e.documentElement?(n=e,o=e.documentElement,p=!f(e),g&&g!==g.top&&(g.addEventListener?g.addEventListener(\"unload\",function(){m()},!1):g.attachEvent&&g.attachEvent(\"onunload\",function(){m()})),c.attributes=ib(function(a){return a.className=\"i\",!a.getAttribute(\"className\")}),c.getElementsByTagName=ib(function(a){return a.appendChild(e.createComment(\"\")),!a.getElementsByTagName(\"*\").length}),c.getElementsByClassName=$.test(e.getElementsByClassName)&&ib(function(a){return a.innerHTML=\"<div class='a'></div><div class='a i'></div>\",a.firstChild.className=\"i\",2===a.getElementsByClassName(\"i\").length}),c.getById=ib(function(a){return o.appendChild(a).id=u,!e.getElementsByName||!e.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if(typeof b.getElementById!==C&&p){var c=b.getElementById(a);return c&&c.parentNode?[c]:[]}},d.filter.ID=function(a){var b=a.replace(cb,db);return function(a){return a.getAttribute(\"id\")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(cb,db);return function(a){var c=typeof a.getAttributeNode!==C&&a.getAttributeNode(\"id\");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return typeof b.getElementsByTagName!==C?b.getElementsByTagName(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if(\"*\"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return typeof b.getElementsByClassName!==C&&p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=$.test(e.querySelectorAll))&&(ib(function(a){a.innerHTML=\"<select msallowclip=''><option selected=''></option></select>\",a.querySelectorAll(\"[msallowclip^='']\").length&&q.push(\"[*^$]=\"+M+\"*(?:''|\\\"\\\")\"),a.querySelectorAll(\"[selected]\").length||q.push(\"\\\\[\"+M+\"*(?:value|\"+L+\")\"),a.querySelectorAll(\":checked\").length||q.push(\":checked\")}),ib(function(a){var b=e.createElement(\"input\");b.setAttribute(\"type\",\"hidden\"),a.appendChild(b).setAttribute(\"name\",\"D\"),a.querySelectorAll(\"[name=d]\").length&&q.push(\"name\"+M+\"*[*^$|!~]?=\"),a.querySelectorAll(\":enabled\").length||q.push(\":enabled\",\":disabled\"),a.querySelectorAll(\"*,:x\"),q.push(\",.*:\")})),(c.matchesSelector=$.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ib(function(a){c.disconnectedMatch=s.call(a,\"div\"),s.call(a,\"[s!='']:x\"),r.push(\"!=\",Q)}),q=q.length&&new RegExp(q.join(\"|\")),r=r.length&&new RegExp(r.join(\"|\")),b=$.test(o.compareDocumentPosition),t=b||$.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===e||a.ownerDocument===v&&t(v,a)?-1:b===e||b.ownerDocument===v&&t(v,b)?1:k?K.call(k,a)-K.call(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,f=a.parentNode,g=b.parentNode,h=[a],i=[b];if(!f||!g)return a===e?-1:b===e?1:f?-1:g?1:k?K.call(k,a)-K.call(k,b):0;if(f===g)return kb(a,b);c=a;while(c=c.parentNode)h.unshift(c);c=b;while(c=c.parentNode)i.unshift(c);while(h[d]===i[d])d++;return d?kb(h[d],i[d]):h[d]===v?-1:i[d]===v?1:0},e):n},fb.matches=function(a,b){return fb(a,null,null,b)},fb.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(U,\"='$1']\"),!(!c.matchesSelector||!p||r&&r.test(b)||q&&q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return fb(b,n,null,[a]).length>0},fb.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},fb.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&E.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},fb.error=function(a){throw new Error(\"Syntax error, unrecognized expression: \"+a)},fb.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=fb.getText=function(a){var b,c=\"\",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if(\"string\"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=fb.selectors={cacheLength:50,createPseudo:hb,match:X,attrHandle:{},find:{},relative:{\">\":{dir:\"parentNode\",first:!0},\" \":{dir:\"parentNode\"},\"+\":{dir:\"previousSibling\",first:!0},\"~\":{dir:\"previousSibling\"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(cb,db),a[3]=(a[3]||a[4]||a[5]||\"\").replace(cb,db),\"~=\"===a[2]&&(a[3]=\" \"+a[3]+\" \"),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),\"nth\"===a[1].slice(0,3)?(a[3]||fb.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*(\"even\"===a[3]||\"odd\"===a[3])),a[5]=+(a[7]+a[8]||\"odd\"===a[3])):a[3]&&fb.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return X.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||\"\":c&&V.test(c)&&(b=g(c,!0))&&(b=c.indexOf(\")\",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(cb,db).toLowerCase();return\"*\"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+\" \"];return b||(b=new RegExp(\"(^|\"+M+\")\"+a+\"(\"+M+\"|$)\"))&&y(a,function(a){return b.test(\"string\"==typeof a.className&&a.className||typeof a.getAttribute!==C&&a.getAttribute(\"class\")||\"\")})},ATTR:function(a,b,c){return function(d){var e=fb.attr(d,a);return null==e?\"!=\"===b:b?(e+=\"\",\"=\"===b?e===c:\"!=\"===b?e!==c:\"^=\"===b?c&&0===e.indexOf(c):\"*=\"===b?c&&e.indexOf(c)>-1:\"$=\"===b?c&&e.slice(-c.length)===c:\"~=\"===b?(\" \"+e+\" \").indexOf(c)>-1:\"|=\"===b?e===c||e.slice(0,c.length+1)===c+\"-\":!1):!0}},CHILD:function(a,b,c,d,e){var f=\"nth\"!==a.slice(0,3),g=\"last\"!==a.slice(-4),h=\"of-type\"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?\"nextSibling\":\"previousSibling\",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h;if(q){if(f){while(p){l=b;while(l=l[p])if(h?l.nodeName.toLowerCase()===r:1===l.nodeType)return!1;o=p=\"only\"===a&&!o&&\"nextSibling\"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){k=q[u]||(q[u]={}),j=k[a]||[],n=j[0]===w&&j[1],m=j[0]===w&&j[2],l=n&&q.childNodes[n];while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if(1===l.nodeType&&++m&&l===b){k[a]=[w,n,m];break}}else if(s&&(j=(b[u]||(b[u]={}))[a])&&j[0]===w)m=j[1];else while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if((h?l.nodeName.toLowerCase()===r:1===l.nodeType)&&++m&&(s&&((l[u]||(l[u]={}))[a]=[w,m]),l===b))break;return m-=e,m===d||m%d===0&&m/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||fb.error(\"unsupported pseudo: \"+a);return e[u]?e(b):e.length>1?(c=[a,a,\"\",b],d.setFilters.hasOwnProperty(a.toLowerCase())?hb(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=K.call(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:hb(function(a){var b=[],c=[],d=h(a.replace(R,\"$1\"));return d[u]?hb(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),!c.pop()}}),has:hb(function(a){return function(b){return fb(a,b).length>0}}),contains:hb(function(a){return function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:hb(function(a){return W.test(a||\"\")||fb.error(\"unsupported lang: \"+a),a=a.replace(cb,db).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute(\"xml:lang\")||b.getAttribute(\"lang\"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+\"-\");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return\"input\"===b&&!!a.checked||\"option\"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Z.test(a.nodeName)},input:function(a){return Y.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return\"input\"===b&&\"button\"===a.type||\"button\"===b},text:function(a){var b;return\"input\"===a.nodeName.toLowerCase()&&\"text\"===a.type&&(null==(b=a.getAttribute(\"type\"))||\"text\"===b.toLowerCase())},first:nb(function(){return[0]}),last:nb(function(a,b){return[b-1]}),eq:nb(function(a,b,c){return[0>c?c+b:c]}),even:nb(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:nb(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:nb(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:nb(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=lb(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=mb(b);function pb(){}pb.prototype=d.filters=d.pseudos,d.setFilters=new pb,g=fb.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+\" \"];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){(!c||(e=S.exec(h)))&&(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=T.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(R,\" \")}),h=h.slice(c.length));for(g in d.filter)!(e=X[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?fb.error(a):z(a,i).slice(0)};function qb(a){for(var b=0,c=a.length,d=\"\";c>b;b++)d+=a[b].value;return d}function rb(a,b,c){var d=b.dir,e=c&&\"parentNode\"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(i=b[u]||(b[u]={}),(h=i[d])&&h[0]===w&&h[1]===f)return j[2]=h[2];if(i[d]=j,j[2]=a(b,c,g))return!0}}}function sb(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function tb(a,b,c){for(var d=0,e=b.length;e>d;d++)fb(a,b[d],c);return c}function ub(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(!c||c(f,d,e))&&(g.push(f),j&&b.push(h));return g}function vb(a,b,c,d,e,f){return d&&!d[u]&&(d=vb(d)),e&&!e[u]&&(e=vb(e,f)),hb(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||tb(b||\"*\",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:ub(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=ub(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?K.call(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=ub(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):I.apply(g,r)})}function wb(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[\" \"],i=g?1:0,k=rb(function(a){return a===b},h,!0),l=rb(function(a){return K.call(b,a)>-1},h,!0),m=[function(a,c,d){return!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d))}];f>i;i++)if(c=d.relative[a[i].type])m=[rb(sb(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return vb(i>1&&sb(m),i>1&&qb(a.slice(0,i-1).concat({value:\" \"===a[i-2].type?\"*\":\"\"})).replace(R,\"$1\"),c,e>i&&wb(a.slice(i,e)),f>e&&wb(a=a.slice(e)),f>e&&qb(a))}m.push(c)}return sb(m)}function xb(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,m,o,p=0,q=\"0\",r=f&&[],s=[],t=j,u=f||e&&d.find.TAG(\"*\",k),v=w+=null==t?1:Math.random()||.1,x=u.length;for(k&&(j=g!==n&&g);q!==x&&null!=(l=u[q]);q++){if(e&&l){m=0;while(o=a[m++])if(o(l,g,h)){i.push(l);break}k&&(w=v)}c&&((l=!o&&l)&&p--,f&&r.push(l))}if(p+=q,c&&q!==p){m=0;while(o=b[m++])o(r,s,g,h);if(f){if(p>0)while(q--)r[q]||s[q]||(s[q]=G.call(i));s=ub(s)}I.apply(i,s),k&&!f&&s.length>0&&p+b.length>1&&fb.uniqueSort(i)}return k&&(w=v,j=t),r};return c?hb(f):f}return h=fb.compile=function(a,b){var c,d=[],e=[],f=A[a+\" \"];if(!f){b||(b=g(a)),c=b.length;while(c--)f=wb(b[c]),f[u]?d.push(f):e.push(f);f=A(a,xb(e,d)),f.selector=a}return f},i=fb.select=function(a,b,e,f){var i,j,k,l,m,n=\"function\"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&\"ID\"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(cb,db),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=X.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(cb,db),ab.test(j[0].type)&&ob(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&qb(j),!a)return I.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,ab.test(a)&&ob(b.parentNode)||b),e},c.sortStable=u.split(\"\").sort(B).join(\"\")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ib(function(a){return 1&a.compareDocumentPosition(n.createElement(\"div\"))}),ib(function(a){return a.innerHTML=\"<a href='#'></a>\",\"#\"===a.firstChild.getAttribute(\"href\")})||jb(\"type|href|height|width\",function(a,b,c){return c?void 0:a.getAttribute(b,\"type\"===b.toLowerCase()?1:2)}),c.attributes&&ib(function(a){return a.innerHTML=\"<input/>\",a.firstChild.setAttribute(\"value\",\"\"),\"\"===a.firstChild.getAttribute(\"value\")})||jb(\"value\",function(a,b,c){return c||\"input\"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ib(function(a){return null==a.getAttribute(\"disabled\")})||jb(L,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),fb}(a);m.find=s,m.expr=s.selectors,m.expr[\":\"]=m.expr.pseudos,m.unique=s.uniqueSort,m.text=s.getText,m.isXMLDoc=s.isXML,m.contains=s.contains;var t=m.expr.match.needsContext,u=/^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/,v=/^.[^:#\\[\\.,]*$/;function w(a,b,c){if(m.isFunction(b))return m.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return m.grep(a,function(a){return a===b!==c});if(\"string\"==typeof b){if(v.test(b))return m.filter(b,a,c);b=m.filter(b,a)}return m.grep(a,function(a){return m.inArray(a,b)>=0!==c})}m.filter=function(a,b,c){var d=b[0];return c&&(a=\":not(\"+a+\")\"),1===b.length&&1===d.nodeType?m.find.matchesSelector(d,a)?[d]:[]:m.find.matches(a,m.grep(b,function(a){return 1===a.nodeType}))},m.fn.extend({find:function(a){var b,c=[],d=this,e=d.length;if(\"string\"!=typeof a)return this.pushStack(m(a).filter(function(){for(b=0;e>b;b++)if(m.contains(d[b],this))return!0}));for(b=0;e>b;b++)m.find(a,d[b],c);return c=this.pushStack(e>1?m.unique(c):c),c.selector=this.selector?this.selector+\" \"+a:a,c},filter:function(a){return this.pushStack(w(this,a||[],!1))},not:function(a){return this.pushStack(w(this,a||[],!0))},is:function(a){return!!w(this,\"string\"==typeof a&&t.test(a)?m(a):a||[],!1).length}});var x,y=a.document,z=/^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,A=m.fn.init=function(a,b){var c,d;if(!a)return this;if(\"string\"==typeof a){if(c=\"<\"===a.charAt(0)&&\">\"===a.charAt(a.length-1)&&a.length>=3?[null,a,null]:z.exec(a),!c||!c[1]&&b)return!b||b.jquery?(b||x).find(a):this.constructor(b).find(a);if(c[1]){if(b=b instanceof m?b[0]:b,m.merge(this,m.parseHTML(c[1],b&&b.nodeType?b.ownerDocument||b:y,!0)),u.test(c[1])&&m.isPlainObject(b))for(c in b)m.isFunction(this[c])?this[c](b[c]):this.attr(c,b[c]);return this}if(d=y.getElementById(c[2]),d&&d.parentNode){if(d.id!==c[2])return x.find(a);this.length=1,this[0]=d}return this.context=y,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):m.isFunction(a)?\"undefined\"!=typeof x.ready?x.ready(a):a(m):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),m.makeArray(a,this))};A.prototype=m.fn,x=m(y);var B=/^(?:parents|prev(?:Until|All))/,C={children:!0,contents:!0,next:!0,prev:!0};m.extend({dir:function(a,b,c){var d=[],e=a[b];while(e&&9!==e.nodeType&&(void 0===c||1!==e.nodeType||!m(e).is(c)))1===e.nodeType&&d.push(e),e=e[b];return d},sibling:function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c}}),m.fn.extend({has:function(a){var b,c=m(a,this),d=c.length;return this.filter(function(){for(b=0;d>b;b++)if(m.contains(this,c[b]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=t.test(a)||\"string\"!=typeof a?m(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&m.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?m.unique(f):f)},index:function(a){return a?\"string\"==typeof a?m.inArray(this[0],m(a)):m.inArray(a.jquery?a[0]:a,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(m.unique(m.merge(this.get(),m(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function D(a,b){do a=a[b];while(a&&1!==a.nodeType);return a}m.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return m.dir(a,\"parentNode\")},parentsUntil:function(a,b,c){return m.dir(a,\"parentNode\",c)},next:function(a){return D(a,\"nextSibling\")},prev:function(a){return D(a,\"previousSibling\")},nextAll:function(a){return m.dir(a,\"nextSibling\")},prevAll:function(a){return m.dir(a,\"previousSibling\")},nextUntil:function(a,b,c){return m.dir(a,\"nextSibling\",c)},prevUntil:function(a,b,c){return m.dir(a,\"previousSibling\",c)},siblings:function(a){return m.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return m.sibling(a.firstChild)},contents:function(a){return m.nodeName(a,\"iframe\")?a.contentDocument||a.contentWindow.document:m.merge([],a.childNodes)}},function(a,b){m.fn[a]=function(c,d){var e=m.map(this,b,c);return\"Until\"!==a.slice(-5)&&(d=c),d&&\"string\"==typeof d&&(e=m.filter(d,e)),this.length>1&&(C[a]||(e=m.unique(e)),B.test(a)&&(e=e.reverse())),this.pushStack(e)}});var E=/\\S+/g,F={};function G(a){var b=F[a]={};return m.each(a.match(E)||[],function(a,c){b[c]=!0}),b}m.Callbacks=function(a){a=\"string\"==typeof a?F[a]||G(a):m.extend({},a);var b,c,d,e,f,g,h=[],i=!a.once&&[],j=function(l){for(c=a.memory&&l,d=!0,f=g||0,g=0,e=h.length,b=!0;h&&e>f;f++)if(h[f].apply(l[0],l[1])===!1&&a.stopOnFalse){c=!1;break}b=!1,h&&(i?i.length&&j(i.shift()):c?h=[]:k.disable())},k={add:function(){if(h){var d=h.length;!function f(b){m.each(b,function(b,c){var d=m.type(c);\"function\"===d?a.unique&&k.has(c)||h.push(c):c&&c.length&&\"string\"!==d&&f(c)})}(arguments),b?e=h.length:c&&(g=d,j(c))}return this},remove:function(){return h&&m.each(arguments,function(a,c){var d;while((d=m.inArray(c,h,d))>-1)h.splice(d,1),b&&(e>=d&&e--,f>=d&&f--)}),this},has:function(a){return a?m.inArray(a,h)>-1:!(!h||!h.length)},empty:function(){return h=[],e=0,this},disable:function(){return h=i=c=void 0,this},disabled:function(){return!h},lock:function(){return i=void 0,c||k.disable(),this},locked:function(){return!i},fireWith:function(a,c){return!h||d&&!i||(c=c||[],c=[a,c.slice?c.slice():c],b?i.push(c):j(c)),this},fire:function(){return k.fireWith(this,arguments),this},fired:function(){return!!d}};return k},m.extend({Deferred:function(a){var b=[[\"resolve\",\"done\",m.Callbacks(\"once memory\"),\"resolved\"],[\"reject\",\"fail\",m.Callbacks(\"once memory\"),\"rejected\"],[\"notify\",\"progress\",m.Callbacks(\"memory\")]],c=\"pending\",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return m.Deferred(function(c){m.each(b,function(b,f){var g=m.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&m.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f[0]+\"With\"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?m.extend(a,d):d}},e={};return d.pipe=d.then,m.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+\"With\"](this===e?d:this,arguments),this},e[f[0]+\"With\"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=d.call(arguments),e=c.length,f=1!==e||a&&m.isFunction(a.promise)?e:0,g=1===f?a:m.Deferred(),h=function(a,b,c){return function(e){b[a]=this,c[a]=arguments.length>1?d.call(arguments):e,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(e>1)for(i=new Array(e),j=new Array(e),k=new Array(e);e>b;b++)c[b]&&m.isFunction(c[b].promise)?c[b].promise().done(h(b,k,c)).fail(g.reject).progress(h(b,j,i)):--f;return f||g.resolveWith(k,c),g.promise()}});var H;m.fn.ready=function(a){return m.ready.promise().done(a),this},m.extend({isReady:!1,readyWait:1,holdReady:function(a){a?m.readyWait++:m.ready(!0)},ready:function(a){if(a===!0?!--m.readyWait:!m.isReady){if(!y.body)return setTimeout(m.ready);m.isReady=!0,a!==!0&&--m.readyWait>0||(H.resolveWith(y,[m]),m.fn.triggerHandler&&(m(y).triggerHandler(\"ready\"),m(y).off(\"ready\")))}}});function I(){y.addEventListener?(y.removeEventListener(\"DOMContentLoaded\",J,!1),a.removeEventListener(\"load\",J,!1)):(y.detachEvent(\"onreadystatechange\",J),a.detachEvent(\"onload\",J))}function J(){(y.addEventListener||\"load\"===event.type||\"complete\"===y.readyState)&&(I(),m.ready())}m.ready.promise=function(b){if(!H)if(H=m.Deferred(),\"complete\"===y.readyState)setTimeout(m.ready);else if(y.addEventListener)y.addEventListener(\"DOMContentLoaded\",J,!1),a.addEventListener(\"load\",J,!1);else{y.attachEvent(\"onreadystatechange\",J),a.attachEvent(\"onload\",J);var c=!1;try{c=null==a.frameElement&&y.documentElement}catch(d){}c&&c.doScroll&&!function e(){if(!m.isReady){try{c.doScroll(\"left\")}catch(a){return setTimeout(e,50)}I(),m.ready()}}()}return H.promise(b)};var K=\"undefined\",L;for(L in m(k))break;k.ownLast=\"0\"!==L,k.inlineBlockNeedsLayout=!1,m(function(){var a,b,c,d;c=y.getElementsByTagName(\"body\")[0],c&&c.style&&(b=y.createElement(\"div\"),d=y.createElement(\"div\"),d.style.cssText=\"position:absolute;border:0;width:0;height:0;top:0;left:-9999px\",c.appendChild(d).appendChild(b),typeof b.style.zoom!==K&&(b.style.cssText=\"display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1\",k.inlineBlockNeedsLayout=a=3===b.offsetWidth,a&&(c.style.zoom=1)),c.removeChild(d))}),function(){var a=y.createElement(\"div\");if(null==k.deleteExpando){k.deleteExpando=!0;try{delete a.test}catch(b){k.deleteExpando=!1}}a=null}(),m.acceptData=function(a){var b=m.noData[(a.nodeName+\" \").toLowerCase()],c=+a.nodeType||1;return 1!==c&&9!==c?!1:!b||b!==!0&&a.getAttribute(\"classid\")===b};var M=/^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,N=/([A-Z])/g;function O(a,b,c){if(void 0===c&&1===a.nodeType){var d=\"data-\"+b.replace(N,\"-$1\").toLowerCase();if(c=a.getAttribute(d),\"string\"==typeof c){try{c=\"true\"===c?!0:\"false\"===c?!1:\"null\"===c?null:+c+\"\"===c?+c:M.test(c)?m.parseJSON(c):c}catch(e){}m.data(a,b,c)}else c=void 0}return c}function P(a){var b;for(b in a)if((\"data\"!==b||!m.isEmptyObject(a[b]))&&\"toJSON\"!==b)return!1;return!0}function Q(a,b,d,e){if(m.acceptData(a)){var f,g,h=m.expando,i=a.nodeType,j=i?m.cache:a,k=i?a[h]:a[h]&&h;\n+if(k&&j[k]&&(e||j[k].data)||void 0!==d||\"string\"!=typeof b)return k||(k=i?a[h]=c.pop()||m.guid++:h),j[k]||(j[k]=i?{}:{toJSON:m.noop}),(\"object\"==typeof b||\"function\"==typeof b)&&(e?j[k]=m.extend(j[k],b):j[k].data=m.extend(j[k].data,b)),g=j[k],e||(g.data||(g.data={}),g=g.data),void 0!==d&&(g[m.camelCase(b)]=d),\"string\"==typeof b?(f=g[b],null==f&&(f=g[m.camelCase(b)])):f=g,f}}function R(a,b,c){if(m.acceptData(a)){var d,e,f=a.nodeType,g=f?m.cache:a,h=f?a[m.expando]:m.expando;if(g[h]){if(b&&(d=c?g[h]:g[h].data)){m.isArray(b)?b=b.concat(m.map(b,m.camelCase)):b in d?b=[b]:(b=m.camelCase(b),b=b in d?[b]:b.split(\" \")),e=b.length;while(e--)delete d[b[e]];if(c?!P(d):!m.isEmptyObject(d))return}(c||(delete g[h].data,P(g[h])))&&(f?m.cleanData([a],!0):k.deleteExpando||g!=g.window?delete g[h]:g[h]=null)}}}m.extend({cache:{},noData:{\"applet \":!0,\"embed \":!0,\"object \":\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"},hasData:function(a){return a=a.nodeType?m.cache[a[m.expando]]:a[m.expando],!!a&&!P(a)},data:function(a,b,c){return Q(a,b,c)},removeData:function(a,b){return R(a,b)},_data:function(a,b,c){return Q(a,b,c,!0)},_removeData:function(a,b){return R(a,b,!0)}}),m.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=m.data(f),1===f.nodeType&&!m._data(f,\"parsedAttrs\"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf(\"data-\")&&(d=m.camelCase(d.slice(5)),O(f,d,e[d])));m._data(f,\"parsedAttrs\",!0)}return e}return\"object\"==typeof a?this.each(function(){m.data(this,a)}):arguments.length>1?this.each(function(){m.data(this,a,b)}):f?O(f,a,m.data(f,a)):void 0},removeData:function(a){return this.each(function(){m.removeData(this,a)})}}),m.extend({queue:function(a,b,c){var d;return a?(b=(b||\"fx\")+\"queue\",d=m._data(a,b),c&&(!d||m.isArray(c)?d=m._data(a,b,m.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||\"fx\";var c=m.queue(a,b),d=c.length,e=c.shift(),f=m._queueHooks(a,b),g=function(){m.dequeue(a,b)};\"inprogress\"===e&&(e=c.shift(),d--),e&&(\"fx\"===b&&c.unshift(\"inprogress\"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+\"queueHooks\";return m._data(a,c)||m._data(a,c,{empty:m.Callbacks(\"once memory\").add(function(){m._removeData(a,b+\"queue\"),m._removeData(a,c)})})}}),m.fn.extend({queue:function(a,b){var c=2;return\"string\"!=typeof a&&(b=a,a=\"fx\",c--),arguments.length<c?m.queue(this[0],a):void 0===b?this:this.each(function(){var c=m.queue(this,a,b);m._queueHooks(this,a),\"fx\"===a&&\"inprogress\"!==c[0]&&m.dequeue(this,a)})},dequeue:function(a){return this.each(function(){m.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||\"fx\",[])},promise:function(a,b){var c,d=1,e=m.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};\"string\"!=typeof a&&(b=a,a=void 0),a=a||\"fx\";while(g--)c=m._data(f[g],a+\"queueHooks\"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var S=/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,T=[\"Top\",\"Right\",\"Bottom\",\"Left\"],U=function(a,b){return a=b||a,\"none\"===m.css(a,\"display\")||!m.contains(a.ownerDocument,a)},V=m.access=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if(\"object\"===m.type(c)){e=!0;for(h in c)m.access(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,m.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(m(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},W=/^(?:checkbox|radio)$/i;!function(){var a=y.createElement(\"input\"),b=y.createElement(\"div\"),c=y.createDocumentFragment();if(b.innerHTML=\"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\",k.leadingWhitespace=3===b.firstChild.nodeType,k.tbody=!b.getElementsByTagName(\"tbody\").length,k.htmlSerialize=!!b.getElementsByTagName(\"link\").length,k.html5Clone=\"<:nav></:nav>\"!==y.createElement(\"nav\").cloneNode(!0).outerHTML,a.type=\"checkbox\",a.checked=!0,c.appendChild(a),k.appendChecked=a.checked,b.innerHTML=\"<textarea>x</textarea>\",k.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue,c.appendChild(b),b.innerHTML=\"<input type='radio' checked='checked' name='t'/>\",k.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,k.noCloneEvent=!0,b.attachEvent&&(b.attachEvent(\"onclick\",function(){k.noCloneEvent=!1}),b.cloneNode(!0).click()),null==k.deleteExpando){k.deleteExpando=!0;try{delete b.test}catch(d){k.deleteExpando=!1}}}(),function(){var b,c,d=y.createElement(\"div\");for(b in{submit:!0,change:!0,focusin:!0})c=\"on\"+b,(k[b+\"Bubbles\"]=c in a)||(d.setAttribute(c,\"t\"),k[b+\"Bubbles\"]=d.attributes[c].expando===!1);d=null}();var X=/^(?:input|select|textarea)$/i,Y=/^key/,Z=/^(?:mouse|pointer|contextmenu)|click/,$=/^(?:focusinfocus|focusoutblur)$/,_=/^([^.]*)(?:\\.(.+)|)$/;function ab(){return!0}function bb(){return!1}function cb(){try{return y.activeElement}catch(a){}}m.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,n,o,p,q,r=m._data(a);if(r){c.handler&&(i=c,c=i.handler,e=i.selector),c.guid||(c.guid=m.guid++),(g=r.events)||(g=r.events={}),(k=r.handle)||(k=r.handle=function(a){return typeof m===K||a&&m.event.triggered===a.type?void 0:m.event.dispatch.apply(k.elem,arguments)},k.elem=a),b=(b||\"\").match(E)||[\"\"],h=b.length;while(h--)f=_.exec(b[h])||[],o=q=f[1],p=(f[2]||\"\").split(\".\").sort(),o&&(j=m.event.special[o]||{},o=(e?j.delegateType:j.bindType)||o,j=m.event.special[o]||{},l=m.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&m.expr.match.needsContext.test(e),namespace:p.join(\".\")},i),(n=g[o])||(n=g[o]=[],n.delegateCount=0,j.setup&&j.setup.call(a,d,p,k)!==!1||(a.addEventListener?a.addEventListener(o,k,!1):a.attachEvent&&a.attachEvent(\"on\"+o,k))),j.add&&(j.add.call(a,l),l.handler.guid||(l.handler.guid=c.guid)),e?n.splice(n.delegateCount++,0,l):n.push(l),m.event.global[o]=!0);a=null}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,n,o,p,q,r=m.hasData(a)&&m._data(a);if(r&&(k=r.events)){b=(b||\"\").match(E)||[\"\"],j=b.length;while(j--)if(h=_.exec(b[j])||[],o=q=h[1],p=(h[2]||\"\").split(\".\").sort(),o){l=m.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,n=k[o]||[],h=h[2]&&new RegExp(\"(^|\\\\.)\"+p.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"),i=f=n.length;while(f--)g=n[f],!e&&q!==g.origType||c&&c.guid!==g.guid||h&&!h.test(g.namespace)||d&&d!==g.selector&&(\"**\"!==d||!g.selector)||(n.splice(f,1),g.selector&&n.delegateCount--,l.remove&&l.remove.call(a,g));i&&!n.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||m.removeEvent(a,o,r.handle),delete k[o])}else for(o in k)m.event.remove(a,o+b[j],c,d,!0);m.isEmptyObject(k)&&(delete r.handle,m._removeData(a,\"events\"))}},trigger:function(b,c,d,e){var f,g,h,i,k,l,n,o=[d||y],p=j.call(b,\"type\")?b.type:b,q=j.call(b,\"namespace\")?b.namespace.split(\".\"):[];if(h=l=d=d||y,3!==d.nodeType&&8!==d.nodeType&&!$.test(p+m.event.triggered)&&(p.indexOf(\".\")>=0&&(q=p.split(\".\"),p=q.shift(),q.sort()),g=p.indexOf(\":\")<0&&\"on\"+p,b=b[m.expando]?b:new m.Event(p,\"object\"==typeof b&&b),b.isTrigger=e?2:3,b.namespace=q.join(\".\"),b.namespace_re=b.namespace?new RegExp(\"(^|\\\\.)\"+q.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"):null,b.result=void 0,b.target||(b.target=d),c=null==c?[b]:m.makeArray(c,[b]),k=m.event.special[p]||{},e||!k.trigger||k.trigger.apply(d,c)!==!1)){if(!e&&!k.noBubble&&!m.isWindow(d)){for(i=k.delegateType||p,$.test(i+p)||(h=h.parentNode);h;h=h.parentNode)o.push(h),l=h;l===(d.ownerDocument||y)&&o.push(l.defaultView||l.parentWindow||a)}n=0;while((h=o[n++])&&!b.isPropagationStopped())b.type=n>1?i:k.bindType||p,f=(m._data(h,\"events\")||{})[b.type]&&m._data(h,\"handle\"),f&&f.apply(h,c),f=g&&h[g],f&&f.apply&&m.acceptData(h)&&(b.result=f.apply(h,c),b.result===!1&&b.preventDefault());if(b.type=p,!e&&!b.isDefaultPrevented()&&(!k._default||k._default.apply(o.pop(),c)===!1)&&m.acceptData(d)&&g&&d[p]&&!m.isWindow(d)){l=d[g],l&&(d[g]=null),m.event.triggered=p;try{d[p]()}catch(r){}m.event.triggered=void 0,l&&(d[g]=l)}return b.result}},dispatch:function(a){a=m.event.fix(a);var b,c,e,f,g,h=[],i=d.call(arguments),j=(m._data(this,\"events\")||{})[a.type]||[],k=m.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=m.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,g=0;while((e=f.handlers[g++])&&!a.isImmediatePropagationStopped())(!a.namespace_re||a.namespace_re.test(e.namespace))&&(a.handleObj=e,a.data=e.data,c=((m.event.special[e.origType]||{}).handle||e.handler).apply(f.elem,i),void 0!==c&&(a.result=c)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&(!a.button||\"click\"!==a.type))for(;i!=this;i=i.parentNode||this)if(1===i.nodeType&&(i.disabled!==!0||\"click\"!==a.type)){for(e=[],f=0;h>f;f++)d=b[f],c=d.selector+\" \",void 0===e[c]&&(e[c]=d.needsContext?m(c,this).index(i)>=0:m.find(c,this,null,[i]).length),e[c]&&e.push(d);e.length&&g.push({elem:i,handlers:e})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},fix:function(a){if(a[m.expando])return a;var b,c,d,e=a.type,f=a,g=this.fixHooks[e];g||(this.fixHooks[e]=g=Z.test(e)?this.mouseHooks:Y.test(e)?this.keyHooks:{}),d=g.props?this.props.concat(g.props):this.props,a=new m.Event(f),b=d.length;while(b--)c=d[b],a[c]=f[c];return a.target||(a.target=f.srcElement||y),3===a.target.nodeType&&(a.target=a.target.parentNode),a.metaKey=!!a.metaKey,g.filter?g.filter(a,f):a},props:\"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which\".split(\" \"),fixHooks:{},keyHooks:{props:\"char charCode key keyCode\".split(\" \"),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:\"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement\".split(\" \"),filter:function(a,b){var c,d,e,f=b.button,g=b.fromElement;return null==a.pageX&&null!=b.clientX&&(d=a.target.ownerDocument||y,e=d.documentElement,c=d.body,a.pageX=b.clientX+(e&&e.scrollLeft||c&&c.scrollLeft||0)-(e&&e.clientLeft||c&&c.clientLeft||0),a.pageY=b.clientY+(e&&e.scrollTop||c&&c.scrollTop||0)-(e&&e.clientTop||c&&c.clientTop||0)),!a.relatedTarget&&g&&(a.relatedTarget=g===a.target?b.toElement:g),a.which||void 0===f||(a.which=1&f?1:2&f?3:4&f?2:0),a}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==cb()&&this.focus)try{return this.focus(),!1}catch(a){}},delegateType:\"focusin\"},blur:{trigger:function(){return this===cb()&&this.blur?(this.blur(),!1):void 0},delegateType:\"focusout\"},click:{trigger:function(){return m.nodeName(this,\"input\")&&\"checkbox\"===this.type&&this.click?(this.click(),!1):void 0},_default:function(a){return m.nodeName(a.target,\"a\")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c,d){var e=m.extend(new m.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?m.event.trigger(e,null,b):m.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},m.removeEvent=y.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){var d=\"on\"+b;a.detachEvent&&(typeof a[d]===K&&(a[d]=null),a.detachEvent(d,c))},m.Event=function(a,b){return this instanceof m.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?ab:bb):this.type=a,b&&m.extend(this,b),this.timeStamp=a&&a.timeStamp||m.now(),void(this[m.expando]=!0)):new m.Event(a,b)},m.Event.prototype={isDefaultPrevented:bb,isPropagationStopped:bb,isImmediatePropagationStopped:bb,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=ab,a&&(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=ab,a&&(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=ab,a&&a.stopImmediatePropagation&&a.stopImmediatePropagation(),this.stopPropagation()}},m.each({mouseenter:\"mouseover\",mouseleave:\"mouseout\",pointerenter:\"pointerover\",pointerleave:\"pointerout\"},function(a,b){m.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return(!e||e!==d&&!m.contains(d,e))&&(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),k.submitBubbles||(m.event.special.submit={setup:function(){return m.nodeName(this,\"form\")?!1:void m.event.add(this,\"click._submit keypress._submit\",function(a){var b=a.target,c=m.nodeName(b,\"input\")||m.nodeName(b,\"button\")?b.form:void 0;c&&!m._data(c,\"submitBubbles\")&&(m.event.add(c,\"submit._submit\",function(a){a._submit_bubble=!0}),m._data(c,\"submitBubbles\",!0))})},postDispatch:function(a){a._submit_bubble&&(delete a._submit_bubble,this.parentNode&&!a.isTrigger&&m.event.simulate(\"submit\",this.parentNode,a,!0))},teardown:function(){return m.nodeName(this,\"form\")?!1:void m.event.remove(this,\"._submit\")}}),k.changeBubbles||(m.event.special.change={setup:function(){return X.test(this.nodeName)?((\"checkbox\"===this.type||\"radio\"===this.type)&&(m.event.add(this,\"propertychange._change\",function(a){\"checked\"===a.originalEvent.propertyName&&(this._just_changed=!0)}),m.event.add(this,\"click._change\",function(a){this._just_changed&&!a.isTrigger&&(this._just_changed=!1),m.event.simulate(\"change\",this,a,!0)})),!1):void m.event.add(this,\"beforeactivate._change\",function(a){var b=a.target;X.test(b.nodeName)&&!m._data(b,\"changeBubbles\")&&(m.event.add(b,\"change._change\",function(a){!this.parentNode||a.isSimulated||a.isTrigger||m.event.simulate(\"change\",this.parentNode,a,!0)}),m._data(b,\"changeBubbles\",!0))})},handle:function(a){var b=a.target;return this!==b||a.isSimulated||a.isTrigger||\"radio\"!==b.type&&\"checkbox\"!==b.type?a.handleObj.handler.apply(this,arguments):void 0},teardown:function(){return m.event.remove(this,\"._change\"),!X.test(this.nodeName)}}),k.focusinBubbles||m.each({focus:\"focusin\",blur:\"focusout\"},function(a,b){var c=function(a){m.event.simulate(b,a.target,m.event.fix(a),!0)};m.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=m._data(d,b);e||d.addEventListener(a,c,!0),m._data(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=m._data(d,b)-1;e?m._data(d,b,e):(d.removeEventListener(a,c,!0),m._removeData(d,b))}}}),m.fn.extend({on:function(a,b,c,d,e){var f,g;if(\"object\"==typeof a){\"string\"!=typeof b&&(c=c||b,b=void 0);for(f in a)this.on(f,b,c,a[f],e);return this}if(null==c&&null==d?(d=b,c=b=void 0):null==d&&(\"string\"==typeof b?(d=c,c=void 0):(d=c,c=b,b=void 0)),d===!1)d=bb;else if(!d)return this;return 1===e&&(g=d,d=function(a){return m().off(a),g.apply(this,arguments)},d.guid=g.guid||(g.guid=m.guid++)),this.each(function(){m.event.add(this,a,d,c,b)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,m(a.delegateTarget).off(d.namespace?d.origType+\".\"+d.namespace:d.origType,d.selector,d.handler),this;if(\"object\"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return(b===!1||\"function\"==typeof b)&&(c=b,b=void 0),c===!1&&(c=bb),this.each(function(){m.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){m.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?m.event.trigger(a,b,c,!0):void 0}});function db(a){var b=eb.split(\"|\"),c=a.createDocumentFragment();if(c.createElement)while(b.length)c.createElement(b.pop());return c}var eb=\"abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video\",fb=/ jQuery\\d+=\"(?:null|\\d+)\"/g,gb=new RegExp(\"<(?:\"+eb+\")[\\\\s/>]\",\"i\"),hb=/^\\s+/,ib=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi,jb=/<([\\w:]+)/,kb=/<tbody/i,lb=/<|&#?\\w+;/,mb=/<(?:script|style|link)/i,nb=/checked\\s*(?:[^=]|=\\s*.checked.)/i,ob=/^$|\\/(?:java|ecma)script/i,pb=/^true\\/(.*)/,qb=/^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g,rb={option:[1,\"<select multiple='multiple'>\",\"</select>\"],legend:[1,\"<fieldset>\",\"</fieldset>\"],area:[1,\"<map>\",\"</map>\"],param:[1,\"<object>\",\"</object>\"],thead:[1,\"<table>\",\"</table>\"],tr:[2,\"<table><tbody>\",\"</tbody></table>\"],col:[2,\"<table><tbody></tbody><colgroup>\",\"</colgroup></table>\"],td:[3,\"<table><tbody><tr>\",\"</tr></tbody></table>\"],_default:k.htmlSerialize?[0,\"\",\"\"]:[1,\"X<div>\",\"</div>\"]},sb=db(y),tb=sb.appendChild(y.createElement(\"div\"));rb.optgroup=rb.option,rb.tbody=rb.tfoot=rb.colgroup=rb.caption=rb.thead,rb.th=rb.td;function ub(a,b){var c,d,e=0,f=typeof a.getElementsByTagName!==K?a.getElementsByTagName(b||\"*\"):typeof a.querySelectorAll!==K?a.querySelectorAll(b||\"*\"):void 0;if(!f)for(f=[],c=a.childNodes||a;null!=(d=c[e]);e++)!b||m.nodeName(d,b)?f.push(d):m.merge(f,ub(d,b));return void 0===b||b&&m.nodeName(a,b)?m.merge([a],f):f}function vb(a){W.test(a.type)&&(a.defaultChecked=a.checked)}function wb(a,b){return m.nodeName(a,\"table\")&&m.nodeName(11!==b.nodeType?b:b.firstChild,\"tr\")?a.getElementsByTagName(\"tbody\")[0]||a.appendChild(a.ownerDocument.createElement(\"tbody\")):a}function xb(a){return a.type=(null!==m.find.attr(a,\"type\"))+\"/\"+a.type,a}function yb(a){var b=pb.exec(a.type);return b?a.type=b[1]:a.removeAttribute(\"type\"),a}function zb(a,b){for(var c,d=0;null!=(c=a[d]);d++)m._data(c,\"globalEval\",!b||m._data(b[d],\"globalEval\"))}function Ab(a,b){if(1===b.nodeType&&m.hasData(a)){var c,d,e,f=m._data(a),g=m._data(b,f),h=f.events;if(h){delete g.handle,g.events={};for(c in h)for(d=0,e=h[c].length;e>d;d++)m.event.add(b,c,h[c][d])}g.data&&(g.data=m.extend({},g.data))}}function Bb(a,b){var c,d,e;if(1===b.nodeType){if(c=b.nodeName.toLowerCase(),!k.noCloneEvent&&b[m.expando]){e=m._data(b);for(d in e.events)m.removeEvent(b,d,e.handle);b.removeAttribute(m.expando)}\"script\"===c&&b.text!==a.text?(xb(b).text=a.text,yb(b)):\"object\"===c?(b.parentNode&&(b.outerHTML=a.outerHTML),k.html5Clone&&a.innerHTML&&!m.trim(b.innerHTML)&&(b.innerHTML=a.innerHTML)):\"input\"===c&&W.test(a.type)?(b.defaultChecked=b.checked=a.checked,b.value!==a.value&&(b.value=a.value)):\"option\"===c?b.defaultSelected=b.selected=a.defaultSelected:(\"input\"===c||\"textarea\"===c)&&(b.defaultValue=a.defaultValue)}}m.extend({clone:function(a,b,c){var d,e,f,g,h,i=m.contains(a.ownerDocument,a);if(k.html5Clone||m.isXMLDoc(a)||!gb.test(\"<\"+a.nodeName+\">\")?f=a.cloneNode(!0):(tb.innerHTML=a.outerHTML,tb.removeChild(f=tb.firstChild)),!(k.noCloneEvent&&k.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||m.isXMLDoc(a)))for(d=ub(f),h=ub(a),g=0;null!=(e=h[g]);++g)d[g]&&Bb(e,d[g]);if(b)if(c)for(h=h||ub(a),d=d||ub(f),g=0;null!=(e=h[g]);g++)Ab(e,d[g]);else Ab(a,f);return d=ub(f,\"script\"),d.length>0&&zb(d,!i&&ub(a,\"script\")),d=h=e=null,f},buildFragment:function(a,b,c,d){for(var e,f,g,h,i,j,l,n=a.length,o=db(b),p=[],q=0;n>q;q++)if(f=a[q],f||0===f)if(\"object\"===m.type(f))m.merge(p,f.nodeType?[f]:f);else if(lb.test(f)){h=h||o.appendChild(b.createElement(\"div\")),i=(jb.exec(f)||[\"\",\"\"])[1].toLowerCase(),l=rb[i]||rb._default,h.innerHTML=l[1]+f.replace(ib,\"<$1></$2>\")+l[2],e=l[0];while(e--)h=h.lastChild;if(!k.leadingWhitespace&&hb.test(f)&&p.push(b.createTextNode(hb.exec(f)[0])),!k.tbody){f=\"table\"!==i||kb.test(f)?\"<table>\"!==l[1]||kb.test(f)?0:h:h.firstChild,e=f&&f.childNodes.length;while(e--)m.nodeName(j=f.childNodes[e],\"tbody\")&&!j.childNodes.length&&f.removeChild(j)}m.merge(p,h.childNodes),h.textContent=\"\";while(h.firstChild)h.removeChild(h.firstChild);h=o.lastChild}else p.push(b.createTextNode(f));h&&o.removeChild(h),k.appendChecked||m.grep(ub(p,\"input\"),vb),q=0;while(f=p[q++])if((!d||-1===m.inArray(f,d))&&(g=m.contains(f.ownerDocument,f),h=ub(o.appendChild(f),\"script\"),g&&zb(h),c)){e=0;while(f=h[e++])ob.test(f.type||\"\")&&c.push(f)}return h=null,o},cleanData:function(a,b){for(var d,e,f,g,h=0,i=m.expando,j=m.cache,l=k.deleteExpando,n=m.event.special;null!=(d=a[h]);h++)if((b||m.acceptData(d))&&(f=d[i],g=f&&j[f])){if(g.events)for(e in g.events)n[e]?m.event.remove(d,e):m.removeEvent(d,e,g.handle);j[f]&&(delete j[f],l?delete d[i]:typeof d.removeAttribute!==K?d.removeAttribute(i):d[i]=null,c.push(f))}}}),m.fn.extend({text:function(a){return V(this,function(a){return void 0===a?m.text(this):this.empty().append((this[0]&&this[0].ownerDocument||y).createTextNode(a))},null,a,arguments.length)},append:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=wb(this,a);b.appendChild(a)}})},prepend:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=wb(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},remove:function(a,b){for(var c,d=a?m.filter(a,this):this,e=0;null!=(c=d[e]);e++)b||1!==c.nodeType||m.cleanData(ub(c)),c.parentNode&&(b&&m.contains(c.ownerDocument,c)&&zb(ub(c,\"script\")),c.parentNode.removeChild(c));return this},empty:function(){for(var a,b=0;null!=(a=this[b]);b++){1===a.nodeType&&m.cleanData(ub(a,!1));while(a.firstChild)a.removeChild(a.firstChild);a.options&&m.nodeName(a,\"select\")&&(a.options.length=0)}return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return m.clone(this,a,b)})},html:function(a){return V(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a)return 1===b.nodeType?b.innerHTML.replace(fb,\"\"):void 0;if(!(\"string\"!=typeof a||mb.test(a)||!k.htmlSerialize&&gb.test(a)||!k.leadingWhitespace&&hb.test(a)||rb[(jb.exec(a)||[\"\",\"\"])[1].toLowerCase()])){a=a.replace(ib,\"<$1></$2>\");try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(m.cleanData(ub(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=arguments[0];return this.domManip(arguments,function(b){a=this.parentNode,m.cleanData(ub(this)),a&&a.replaceChild(b,this)}),a&&(a.length||a.nodeType)?this:this.remove()},detach:function(a){return this.remove(a,!0)},domManip:function(a,b){a=e.apply([],a);var c,d,f,g,h,i,j=0,l=this.length,n=this,o=l-1,p=a[0],q=m.isFunction(p);if(q||l>1&&\"string\"==typeof p&&!k.checkClone&&nb.test(p))return this.each(function(c){var d=n.eq(c);q&&(a[0]=p.call(this,c,d.html())),d.domManip(a,b)});if(l&&(i=m.buildFragment(a,this[0].ownerDocument,!1,this),c=i.firstChild,1===i.childNodes.length&&(i=c),c)){for(g=m.map(ub(i,\"script\"),xb),f=g.length;l>j;j++)d=i,j!==o&&(d=m.clone(d,!0,!0),f&&m.merge(g,ub(d,\"script\"))),b.call(this[j],d,j);if(f)for(h=g[g.length-1].ownerDocument,m.map(g,yb),j=0;f>j;j++)d=g[j],ob.test(d.type||\"\")&&!m._data(d,\"globalEval\")&&m.contains(h,d)&&(d.src?m._evalUrl&&m._evalUrl(d.src):m.globalEval((d.text||d.textContent||d.innerHTML||\"\").replace(qb,\"\")));i=c=null}return this}}),m.each({appendTo:\"append\",prependTo:\"prepend\",insertBefore:\"before\",insertAfter:\"after\",replaceAll:\"replaceWith\"},function(a,b){m.fn[a]=function(a){for(var c,d=0,e=[],g=m(a),h=g.length-1;h>=d;d++)c=d===h?this:this.clone(!0),m(g[d])[b](c),f.apply(e,c.get());return this.pushStack(e)}});var Cb,Db={};function Eb(b,c){var d,e=m(c.createElement(b)).appendTo(c.body),f=a.getDefaultComputedStyle&&(d=a.getDefaultComputedStyle(e[0]))?d.display:m.css(e[0],\"display\");return e.detach(),f}function Fb(a){var b=y,c=Db[a];return c||(c=Eb(a,b),\"none\"!==c&&c||(Cb=(Cb||m(\"<iframe frameborder='0' width='0' height='0'/>\")).appendTo(b.documentElement),b=(Cb[0].contentWindow||Cb[0].contentDocument).document,b.write(),b.close(),c=Eb(a,b),Cb.detach()),Db[a]=c),c}!function(){var a;k.shrinkWrapBlocks=function(){if(null!=a)return a;a=!1;var b,c,d;return c=y.getElementsByTagName(\"body\")[0],c&&c.style?(b=y.createElement(\"div\"),d=y.createElement(\"div\"),d.style.cssText=\"position:absolute;border:0;width:0;height:0;top:0;left:-9999px\",c.appendChild(d).appendChild(b),typeof b.style.zoom!==K&&(b.style.cssText=\"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1\",b.appendChild(y.createElement(\"div\")).style.width=\"5px\",a=3!==b.offsetWidth),c.removeChild(d),a):void 0}}();var Gb=/^margin/,Hb=new RegExp(\"^(\"+S+\")(?!px)[a-z%]+$\",\"i\"),Ib,Jb,Kb=/^(top|right|bottom|left)$/;a.getComputedStyle?(Ib=function(a){return a.ownerDocument.defaultView.getComputedStyle(a,null)},Jb=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Ib(a),g=c?c.getPropertyValue(b)||c[b]:void 0,c&&(\"\"!==g||m.contains(a.ownerDocument,a)||(g=m.style(a,b)),Hb.test(g)&&Gb.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0===g?g:g+\"\"}):y.documentElement.currentStyle&&(Ib=function(a){return a.currentStyle},Jb=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Ib(a),g=c?c[b]:void 0,null==g&&h&&h[b]&&(g=h[b]),Hb.test(g)&&!Kb.test(b)&&(d=h.left,e=a.runtimeStyle,f=e&&e.left,f&&(e.left=a.currentStyle.left),h.left=\"fontSize\"===b?\"1em\":g,g=h.pixelLeft+\"px\",h.left=d,f&&(e.left=f)),void 0===g?g:g+\"\"||\"auto\"});function Lb(a,b){return{get:function(){var c=a();if(null!=c)return c?void delete this.get:(this.get=b).apply(this,arguments)}}}!function(){var b,c,d,e,f,g,h;if(b=y.createElement(\"div\"),b.innerHTML=\"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\",d=b.getElementsByTagName(\"a\")[0],c=d&&d.style){c.cssText=\"float:left;opacity:.5\",k.opacity=\"0.5\"===c.opacity,k.cssFloat=!!c.cssFloat,b.style.backgroundClip=\"content-box\",b.cloneNode(!0).style.backgroundClip=\"\",k.clearCloneStyle=\"content-box\"===b.style.backgroundClip,k.boxSizing=\"\"===c.boxSizing||\"\"===c.MozBoxSizing||\"\"===c.WebkitBoxSizing,m.extend(k,{reliableHiddenOffsets:function(){return null==g&&i(),g},boxSizingReliable:function(){return null==f&&i(),f},pixelPosition:function(){return null==e&&i(),e},reliableMarginRight:function(){return null==h&&i(),h}});function i(){var b,c,d,i;c=y.getElementsByTagName(\"body\")[0],c&&c.style&&(b=y.createElement(\"div\"),d=y.createElement(\"div\"),d.style.cssText=\"position:absolute;border:0;width:0;height:0;top:0;left:-9999px\",c.appendChild(d).appendChild(b),b.style.cssText=\"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute\",e=f=!1,h=!0,a.getComputedStyle&&(e=\"1%\"!==(a.getComputedStyle(b,null)||{}).top,f=\"4px\"===(a.getComputedStyle(b,null)||{width:\"4px\"}).width,i=b.appendChild(y.createElement(\"div\")),i.style.cssText=b.style.cssText=\"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0\",i.style.marginRight=i.style.width=\"0\",b.style.width=\"1px\",h=!parseFloat((a.getComputedStyle(i,null)||{}).marginRight)),b.innerHTML=\"<table><tr><td></td><td>t</td></tr></table>\",i=b.getElementsByTagName(\"td\"),i[0].style.cssText=\"margin:0;border:0;padding:0;display:none\",g=0===i[0].offsetHeight,g&&(i[0].style.display=\"\",i[1].style.display=\"none\",g=0===i[0].offsetHeight),c.removeChild(d))}}}(),m.swap=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};var Mb=/alpha\\([^)]*\\)/i,Nb=/opacity\\s*=\\s*([^)]*)/,Ob=/^(none|table(?!-c[ea]).+)/,Pb=new RegExp(\"^(\"+S+\")(.*)$\",\"i\"),Qb=new RegExp(\"^([+-])=(\"+S+\")\",\"i\"),Rb={position:\"absolute\",visibility:\"hidden\",display:\"block\"},Sb={letterSpacing:\"0\",fontWeight:\"400\"},Tb=[\"Webkit\",\"O\",\"Moz\",\"ms\"];function Ub(a,b){if(b in a)return b;var c=b.charAt(0).toUpperCase()+b.slice(1),d=b,e=Tb.length;while(e--)if(b=Tb[e]+c,b in a)return b;return d}function Vb(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=m._data(d,\"olddisplay\"),c=d.style.display,b?(f[g]||\"none\"!==c||(d.style.display=\"\"),\"\"===d.style.display&&U(d)&&(f[g]=m._data(d,\"olddisplay\",Fb(d.nodeName)))):(e=U(d),(c&&\"none\"!==c||!e)&&m._data(d,\"olddisplay\",e?c:m.css(d,\"display\"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&\"none\"!==d.style.display&&\"\"!==d.style.display||(d.style.display=b?f[g]||\"\":\"none\"));return a}function Wb(a,b,c){var d=Pb.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||\"px\"):b}function Xb(a,b,c,d,e){for(var f=c===(d?\"border\":\"content\")?4:\"width\"===b?1:0,g=0;4>f;f+=2)\"margin\"===c&&(g+=m.css(a,c+T[f],!0,e)),d?(\"content\"===c&&(g-=m.css(a,\"padding\"+T[f],!0,e)),\"margin\"!==c&&(g-=m.css(a,\"border\"+T[f]+\"Width\",!0,e))):(g+=m.css(a,\"padding\"+T[f],!0,e),\"padding\"!==c&&(g+=m.css(a,\"border\"+T[f]+\"Width\",!0,e)));return g}function Yb(a,b,c){var d=!0,e=\"width\"===b?a.offsetWidth:a.offsetHeight,f=Ib(a),g=k.boxSizing&&\"border-box\"===m.css(a,\"boxSizing\",!1,f);if(0>=e||null==e){if(e=Jb(a,b,f),(0>e||null==e)&&(e=a.style[b]),Hb.test(e))return e;d=g&&(k.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+Xb(a,b,c||(g?\"border\":\"content\"),d,f)+\"px\"}m.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Jb(a,\"opacity\");return\"\"===c?\"1\":c}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{\"float\":k.cssFloat?\"cssFloat\":\"styleFloat\"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=m.camelCase(b),i=a.style;if(b=m.cssProps[h]||(m.cssProps[h]=Ub(i,h)),g=m.cssHooks[b]||m.cssHooks[h],void 0===c)return g&&\"get\"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b];if(f=typeof c,\"string\"===f&&(e=Qb.exec(c))&&(c=(e[1]+1)*e[2]+parseFloat(m.css(a,b)),f=\"number\"),null!=c&&c===c&&(\"number\"!==f||m.cssNumber[h]||(c+=\"px\"),k.clearCloneStyle||\"\"!==c||0!==b.indexOf(\"background\")||(i[b]=\"inherit\"),!(g&&\"set\"in g&&void 0===(c=g.set(a,c,d)))))try{i[b]=c}catch(j){}}},css:function(a,b,c,d){var e,f,g,h=m.camelCase(b);return b=m.cssProps[h]||(m.cssProps[h]=Ub(a.style,h)),g=m.cssHooks[b]||m.cssHooks[h],g&&\"get\"in g&&(f=g.get(a,!0,c)),void 0===f&&(f=Jb(a,b,d)),\"normal\"===f&&b in Sb&&(f=Sb[b]),\"\"===c||c?(e=parseFloat(f),c===!0||m.isNumeric(e)?e||0:f):f}}),m.each([\"height\",\"width\"],function(a,b){m.cssHooks[b]={get:function(a,c,d){return c?Ob.test(m.css(a,\"display\"))&&0===a.offsetWidth?m.swap(a,Rb,function(){return Yb(a,b,d)}):Yb(a,b,d):void 0},set:function(a,c,d){var e=d&&Ib(a);return Wb(a,c,d?Xb(a,b,d,k.boxSizing&&\"border-box\"===m.css(a,\"boxSizing\",!1,e),e):0)}}}),k.opacity||(m.cssHooks.opacity={get:function(a,b){return Nb.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||\"\")?.01*parseFloat(RegExp.$1)+\"\":b?\"1\":\"\"},set:function(a,b){var c=a.style,d=a.currentStyle,e=m.isNumeric(b)?\"alpha(opacity=\"+100*b+\")\":\"\",f=d&&d.filter||c.filter||\"\";c.zoom=1,(b>=1||\"\"===b)&&\"\"===m.trim(f.replace(Mb,\"\"))&&c.removeAttribute&&(c.removeAttribute(\"filter\"),\"\"===b||d&&!d.filter)||(c.filter=Mb.test(f)?f.replace(Mb,e):f+\" \"+e)}}),m.cssHooks.marginRight=Lb(k.reliableMarginRight,function(a,b){return b?m.swap(a,{display:\"inline-block\"},Jb,[a,\"marginRight\"]):void 0}),m.each({margin:\"\",padding:\"\",border:\"Width\"},function(a,b){m.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f=\"string\"==typeof c?c.split(\" \"):[c];4>d;d++)e[a+T[d]+b]=f[d]||f[d-2]||f[0];return e}},Gb.test(a)||(m.cssHooks[a+b].set=Wb)}),m.fn.extend({css:function(a,b){return V(this,function(a,b,c){var d,e,f={},g=0;if(m.isArray(b)){for(d=Ib(a),e=b.length;e>g;g++)f[b[g]]=m.css(a,b[g],!1,d);return f}return void 0!==c?m.style(a,b,c):m.css(a,b)},a,b,arguments.length>1)},show:function(){return Vb(this,!0)},hide:function(){return Vb(this)},toggle:function(a){return\"boolean\"==typeof a?a?this.show():this.hide():this.each(function(){U(this)?m(this).show():m(this).hide()})}});function Zb(a,b,c,d,e){return new Zb.prototype.init(a,b,c,d,e)}m.Tween=Zb,Zb.prototype={constructor:Zb,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||\"swing\",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(m.cssNumber[c]?\"\":\"px\")\n+},cur:function(){var a=Zb.propHooks[this.prop];return a&&a.get?a.get(this):Zb.propHooks._default.get(this)},run:function(a){var b,c=Zb.propHooks[this.prop];return this.pos=b=this.options.duration?m.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Zb.propHooks._default.set(this),this}},Zb.prototype.init.prototype=Zb.prototype,Zb.propHooks={_default:{get:function(a){var b;return null==a.elem[a.prop]||a.elem.style&&null!=a.elem.style[a.prop]?(b=m.css(a.elem,a.prop,\"\"),b&&\"auto\"!==b?b:0):a.elem[a.prop]},set:function(a){m.fx.step[a.prop]?m.fx.step[a.prop](a):a.elem.style&&(null!=a.elem.style[m.cssProps[a.prop]]||m.cssHooks[a.prop])?m.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},Zb.propHooks.scrollTop=Zb.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},m.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},m.fx=Zb.prototype.init,m.fx.step={};var $b,_b,ac=/^(?:toggle|show|hide)$/,bc=new RegExp(\"^(?:([+-])=|)(\"+S+\")([a-z%]*)$\",\"i\"),cc=/queueHooks$/,dc=[ic],ec={\"*\":[function(a,b){var c=this.createTween(a,b),d=c.cur(),e=bc.exec(b),f=e&&e[3]||(m.cssNumber[a]?\"\":\"px\"),g=(m.cssNumber[a]||\"px\"!==f&&+d)&&bc.exec(m.css(c.elem,a)),h=1,i=20;if(g&&g[3]!==f){f=f||g[3],e=e||[],g=+d||1;do h=h||\".5\",g/=h,m.style(c.elem,a,g+f);while(h!==(h=c.cur()/d)&&1!==h&&--i)}return e&&(g=c.start=+g||+d||0,c.unit=f,c.end=e[1]?g+(e[1]+1)*e[2]:+e[2]),c}]};function fc(){return setTimeout(function(){$b=void 0}),$b=m.now()}function gc(a,b){var c,d={height:a},e=0;for(b=b?1:0;4>e;e+=2-b)c=T[e],d[\"margin\"+c]=d[\"padding\"+c]=a;return b&&(d.opacity=d.width=a),d}function hc(a,b,c){for(var d,e=(ec[b]||[]).concat(ec[\"*\"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function ic(a,b,c){var d,e,f,g,h,i,j,l,n=this,o={},p=a.style,q=a.nodeType&&U(a),r=m._data(a,\"fxshow\");c.queue||(h=m._queueHooks(a,\"fx\"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,n.always(function(){n.always(function(){h.unqueued--,m.queue(a,\"fx\").length||h.empty.fire()})})),1===a.nodeType&&(\"height\"in b||\"width\"in b)&&(c.overflow=[p.overflow,p.overflowX,p.overflowY],j=m.css(a,\"display\"),l=\"none\"===j?m._data(a,\"olddisplay\")||Fb(a.nodeName):j,\"inline\"===l&&\"none\"===m.css(a,\"float\")&&(k.inlineBlockNeedsLayout&&\"inline\"!==Fb(a.nodeName)?p.zoom=1:p.display=\"inline-block\")),c.overflow&&(p.overflow=\"hidden\",k.shrinkWrapBlocks()||n.always(function(){p.overflow=c.overflow[0],p.overflowX=c.overflow[1],p.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],ac.exec(e)){if(delete b[d],f=f||\"toggle\"===e,e===(q?\"hide\":\"show\")){if(\"show\"!==e||!r||void 0===r[d])continue;q=!0}o[d]=r&&r[d]||m.style(a,d)}else j=void 0;if(m.isEmptyObject(o))\"inline\"===(\"none\"===j?Fb(a.nodeName):j)&&(p.display=j);else{r?\"hidden\"in r&&(q=r.hidden):r=m._data(a,\"fxshow\",{}),f&&(r.hidden=!q),q?m(a).show():n.done(function(){m(a).hide()}),n.done(function(){var b;m._removeData(a,\"fxshow\");for(b in o)m.style(a,b,o[b])});for(d in o)g=hc(q?r[d]:0,d,n),d in r||(r[d]=g.start,q&&(g.end=g.start,g.start=\"width\"===d||\"height\"===d?1:0))}}function jc(a,b){var c,d,e,f,g;for(c in a)if(d=m.camelCase(c),e=b[d],f=a[c],m.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=m.cssHooks[d],g&&\"expand\"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function kc(a,b,c){var d,e,f=0,g=dc.length,h=m.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=$b||fc(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:m.extend({},b),opts:m.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:$b||fc(),duration:c.duration,tweens:[],createTween:function(b,c){var d=m.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;for(jc(k,j.opts.specialEasing);g>f;f++)if(d=dc[f].call(j,a,k,j.opts))return d;return m.map(k,hc,j),m.isFunction(j.opts.start)&&j.opts.start.call(a,j),m.fx.timer(m.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}m.Animation=m.extend(kc,{tweener:function(a,b){m.isFunction(a)?(b=a,a=[\"*\"]):a=a.split(\" \");for(var c,d=0,e=a.length;e>d;d++)c=a[d],ec[c]=ec[c]||[],ec[c].unshift(b)},prefilter:function(a,b){b?dc.unshift(a):dc.push(a)}}),m.speed=function(a,b,c){var d=a&&\"object\"==typeof a?m.extend({},a):{complete:c||!c&&b||m.isFunction(a)&&a,duration:a,easing:c&&b||b&&!m.isFunction(b)&&b};return d.duration=m.fx.off?0:\"number\"==typeof d.duration?d.duration:d.duration in m.fx.speeds?m.fx.speeds[d.duration]:m.fx.speeds._default,(null==d.queue||d.queue===!0)&&(d.queue=\"fx\"),d.old=d.complete,d.complete=function(){m.isFunction(d.old)&&d.old.call(this),d.queue&&m.dequeue(this,d.queue)},d},m.fn.extend({fadeTo:function(a,b,c,d){return this.filter(U).css(\"opacity\",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=m.isEmptyObject(a),f=m.speed(b,c,d),g=function(){var b=kc(this,m.extend({},a),f);(e||m._data(this,\"finish\"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return\"string\"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||\"fx\",[]),this.each(function(){var b=!0,e=null!=a&&a+\"queueHooks\",f=m.timers,g=m._data(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&cc.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));(b||!c)&&m.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||\"fx\"),this.each(function(){var b,c=m._data(this),d=c[a+\"queue\"],e=c[a+\"queueHooks\"],f=m.timers,g=d?d.length:0;for(c.finish=!0,m.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),m.each([\"toggle\",\"show\",\"hide\"],function(a,b){var c=m.fn[b];m.fn[b]=function(a,d,e){return null==a||\"boolean\"==typeof a?c.apply(this,arguments):this.animate(gc(b,!0),a,d,e)}}),m.each({slideDown:gc(\"show\"),slideUp:gc(\"hide\"),slideToggle:gc(\"toggle\"),fadeIn:{opacity:\"show\"},fadeOut:{opacity:\"hide\"},fadeToggle:{opacity:\"toggle\"}},function(a,b){m.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),m.timers=[],m.fx.tick=function(){var a,b=m.timers,c=0;for($b=m.now();c<b.length;c++)a=b[c],a()||b[c]!==a||b.splice(c--,1);b.length||m.fx.stop(),$b=void 0},m.fx.timer=function(a){m.timers.push(a),a()?m.fx.start():m.timers.pop()},m.fx.interval=13,m.fx.start=function(){_b||(_b=setInterval(m.fx.tick,m.fx.interval))},m.fx.stop=function(){clearInterval(_b),_b=null},m.fx.speeds={slow:600,fast:200,_default:400},m.fn.delay=function(a,b){return a=m.fx?m.fx.speeds[a]||a:a,b=b||\"fx\",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},function(){var a,b,c,d,e;b=y.createElement(\"div\"),b.setAttribute(\"className\",\"t\"),b.innerHTML=\"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\",d=b.getElementsByTagName(\"a\")[0],c=y.createElement(\"select\"),e=c.appendChild(y.createElement(\"option\")),a=b.getElementsByTagName(\"input\")[0],d.style.cssText=\"top:1px\",k.getSetAttribute=\"t\"!==b.className,k.style=/top/.test(d.getAttribute(\"style\")),k.hrefNormalized=\"/a\"===d.getAttribute(\"href\"),k.checkOn=!!a.value,k.optSelected=e.selected,k.enctype=!!y.createElement(\"form\").enctype,c.disabled=!0,k.optDisabled=!e.disabled,a=y.createElement(\"input\"),a.setAttribute(\"value\",\"\"),k.input=\"\"===a.getAttribute(\"value\"),a.value=\"t\",a.setAttribute(\"type\",\"radio\"),k.radioValue=\"t\"===a.value}();var lc=/\\r/g;m.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=m.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,m(this).val()):a,null==e?e=\"\":\"number\"==typeof e?e+=\"\":m.isArray(e)&&(e=m.map(e,function(a){return null==a?\"\":a+\"\"})),b=m.valHooks[this.type]||m.valHooks[this.nodeName.toLowerCase()],b&&\"set\"in b&&void 0!==b.set(this,e,\"value\")||(this.value=e))});if(e)return b=m.valHooks[e.type]||m.valHooks[e.nodeName.toLowerCase()],b&&\"get\"in b&&void 0!==(c=b.get(e,\"value\"))?c:(c=e.value,\"string\"==typeof c?c.replace(lc,\"\"):null==c?\"\":c)}}}),m.extend({valHooks:{option:{get:function(a){var b=m.find.attr(a,\"value\");return null!=b?b:m.trim(m.text(a))}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f=\"select-one\"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],!(!c.selected&&i!==e||(k.optDisabled?c.disabled:null!==c.getAttribute(\"disabled\"))||c.parentNode.disabled&&m.nodeName(c.parentNode,\"optgroup\"))){if(b=m(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=m.makeArray(b),g=e.length;while(g--)if(d=e[g],m.inArray(m.valHooks.option.get(d),f)>=0)try{d.selected=c=!0}catch(h){d.scrollHeight}else d.selected=!1;return c||(a.selectedIndex=-1),e}}}}),m.each([\"radio\",\"checkbox\"],function(){m.valHooks[this]={set:function(a,b){return m.isArray(b)?a.checked=m.inArray(m(a).val(),b)>=0:void 0}},k.checkOn||(m.valHooks[this].get=function(a){return null===a.getAttribute(\"value\")?\"on\":a.value})});var mc,nc,oc=m.expr.attrHandle,pc=/^(?:checked|selected)$/i,qc=k.getSetAttribute,rc=k.input;m.fn.extend({attr:function(a,b){return V(this,m.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){m.removeAttr(this,a)})}}),m.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(a&&3!==f&&8!==f&&2!==f)return typeof a.getAttribute===K?m.prop(a,b,c):(1===f&&m.isXMLDoc(a)||(b=b.toLowerCase(),d=m.attrHooks[b]||(m.expr.match.bool.test(b)?nc:mc)),void 0===c?d&&\"get\"in d&&null!==(e=d.get(a,b))?e:(e=m.find.attr(a,b),null==e?void 0:e):null!==c?d&&\"set\"in d&&void 0!==(e=d.set(a,c,b))?e:(a.setAttribute(b,c+\"\"),c):void m.removeAttr(a,b))},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(E);if(f&&1===a.nodeType)while(c=f[e++])d=m.propFix[c]||c,m.expr.match.bool.test(c)?rc&&qc||!pc.test(c)?a[d]=!1:a[m.camelCase(\"default-\"+c)]=a[d]=!1:m.attr(a,c,\"\"),a.removeAttribute(qc?c:d)},attrHooks:{type:{set:function(a,b){if(!k.radioValue&&\"radio\"===b&&m.nodeName(a,\"input\")){var c=a.value;return a.setAttribute(\"type\",b),c&&(a.value=c),b}}}}}),nc={set:function(a,b,c){return b===!1?m.removeAttr(a,c):rc&&qc||!pc.test(c)?a.setAttribute(!qc&&m.propFix[c]||c,c):a[m.camelCase(\"default-\"+c)]=a[c]=!0,c}},m.each(m.expr.match.bool.source.match(/\\w+/g),function(a,b){var c=oc[b]||m.find.attr;oc[b]=rc&&qc||!pc.test(b)?function(a,b,d){var e,f;return d||(f=oc[b],oc[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,oc[b]=f),e}:function(a,b,c){return c?void 0:a[m.camelCase(\"default-\"+b)]?b.toLowerCase():null}}),rc&&qc||(m.attrHooks.value={set:function(a,b,c){return m.nodeName(a,\"input\")?void(a.defaultValue=b):mc&&mc.set(a,b,c)}}),qc||(mc={set:function(a,b,c){var d=a.getAttributeNode(c);return d||a.setAttributeNode(d=a.ownerDocument.createAttribute(c)),d.value=b+=\"\",\"value\"===c||b===a.getAttribute(c)?b:void 0}},oc.id=oc.name=oc.coords=function(a,b,c){var d;return c?void 0:(d=a.getAttributeNode(b))&&\"\"!==d.value?d.value:null},m.valHooks.button={get:function(a,b){var c=a.getAttributeNode(b);return c&&c.specified?c.value:void 0},set:mc.set},m.attrHooks.contenteditable={set:function(a,b,c){mc.set(a,\"\"===b?!1:b,c)}},m.each([\"width\",\"height\"],function(a,b){m.attrHooks[b]={set:function(a,c){return\"\"===c?(a.setAttribute(b,\"auto\"),c):void 0}}})),k.style||(m.attrHooks.style={get:function(a){return a.style.cssText||void 0},set:function(a,b){return a.style.cssText=b+\"\"}});var sc=/^(?:input|select|textarea|button|object)$/i,tc=/^(?:a|area)$/i;m.fn.extend({prop:function(a,b){return V(this,m.prop,a,b,arguments.length>1)},removeProp:function(a){return a=m.propFix[a]||a,this.each(function(){try{this[a]=void 0,delete this[a]}catch(b){}})}}),m.extend({propFix:{\"for\":\"htmlFor\",\"class\":\"className\"},prop:function(a,b,c){var d,e,f,g=a.nodeType;if(a&&3!==g&&8!==g&&2!==g)return f=1!==g||!m.isXMLDoc(a),f&&(b=m.propFix[b]||b,e=m.propHooks[b]),void 0!==c?e&&\"set\"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&\"get\"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=m.find.attr(a,\"tabindex\");return b?parseInt(b,10):sc.test(a.nodeName)||tc.test(a.nodeName)&&a.href?0:-1}}}}),k.hrefNormalized||m.each([\"href\",\"src\"],function(a,b){m.propHooks[b]={get:function(a){return a.getAttribute(b,4)}}}),k.optSelected||(m.propHooks.selected={get:function(a){var b=a.parentNode;return b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex),null}}),m.each([\"tabIndex\",\"readOnly\",\"maxLength\",\"cellSpacing\",\"cellPadding\",\"rowSpan\",\"colSpan\",\"useMap\",\"frameBorder\",\"contentEditable\"],function(){m.propFix[this.toLowerCase()]=this}),k.enctype||(m.propFix.enctype=\"encoding\");var uc=/[\\t\\r\\n\\f]/g;m.fn.extend({addClass:function(a){var b,c,d,e,f,g,h=0,i=this.length,j=\"string\"==typeof a&&a;if(m.isFunction(a))return this.each(function(b){m(this).addClass(a.call(this,b,this.className))});if(j)for(b=(a||\"\").match(E)||[];i>h;h++)if(c=this[h],d=1===c.nodeType&&(c.className?(\" \"+c.className+\" \").replace(uc,\" \"):\" \")){f=0;while(e=b[f++])d.indexOf(\" \"+e+\" \")<0&&(d+=e+\" \");g=m.trim(d),c.className!==g&&(c.className=g)}return this},removeClass:function(a){var b,c,d,e,f,g,h=0,i=this.length,j=0===arguments.length||\"string\"==typeof a&&a;if(m.isFunction(a))return this.each(function(b){m(this).removeClass(a.call(this,b,this.className))});if(j)for(b=(a||\"\").match(E)||[];i>h;h++)if(c=this[h],d=1===c.nodeType&&(c.className?(\" \"+c.className+\" \").replace(uc,\" \"):\"\")){f=0;while(e=b[f++])while(d.indexOf(\" \"+e+\" \")>=0)d=d.replace(\" \"+e+\" \",\" \");g=a?m.trim(d):\"\",c.className!==g&&(c.className=g)}return this},toggleClass:function(a,b){var c=typeof a;return\"boolean\"==typeof b&&\"string\"===c?b?this.addClass(a):this.removeClass(a):this.each(m.isFunction(a)?function(c){m(this).toggleClass(a.call(this,c,this.className,b),b)}:function(){if(\"string\"===c){var b,d=0,e=m(this),f=a.match(E)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else(c===K||\"boolean\"===c)&&(this.className&&m._data(this,\"__className__\",this.className),this.className=this.className||a===!1?\"\":m._data(this,\"__className__\")||\"\")})},hasClass:function(a){for(var b=\" \"+a+\" \",c=0,d=this.length;d>c;c++)if(1===this[c].nodeType&&(\" \"+this[c].className+\" \").replace(uc,\" \").indexOf(b)>=0)return!0;return!1}}),m.each(\"blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu\".split(\" \"),function(a,b){m.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),m.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,\"**\"):this.off(b,a||\"**\",c)}});var vc=m.now(),wc=/\\?/,xc=/(,)|(\\[|{)|(}|])|\"(?:[^\"\\\\\\r\\n]|\\\\[\"\\\\\\/bfnrt]|\\\\u[\\da-fA-F]{4})*\"\\s*:?|true|false|null|-?(?!0\\d)\\d+(?:\\.\\d+|)(?:[eE][+-]?\\d+|)/g;m.parseJSON=function(b){if(a.JSON&&a.JSON.parse)return a.JSON.parse(b+\"\");var c,d=null,e=m.trim(b+\"\");return e&&!m.trim(e.replace(xc,function(a,b,e,f){return c&&b&&(d=0),0===d?a:(c=e||b,d+=!f-!e,\"\")}))?Function(\"return \"+e)():m.error(\"Invalid JSON: \"+b)},m.parseXML=function(b){var c,d;if(!b||\"string\"!=typeof b)return null;try{a.DOMParser?(d=new DOMParser,c=d.parseFromString(b,\"text/xml\")):(c=new ActiveXObject(\"Microsoft.XMLDOM\"),c.async=\"false\",c.loadXML(b))}catch(e){c=void 0}return c&&c.documentElement&&!c.getElementsByTagName(\"parsererror\").length||m.error(\"Invalid XML: \"+b),c};var yc,zc,Ac=/#.*$/,Bc=/([?&])_=[^&]*/,Cc=/^(.*?):[ \\t]*([^\\r\\n]*)\\r?$/gm,Dc=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Ec=/^(?:GET|HEAD)$/,Fc=/^\\/\\//,Gc=/^([\\w.+-]+:)(?:\\/\\/(?:[^\\/?#]*@|)([^\\/?#:]*)(?::(\\d+)|)|)/,Hc={},Ic={},Jc=\"*/\".concat(\"*\");try{zc=location.href}catch(Kc){zc=y.createElement(\"a\"),zc.href=\"\",zc=zc.href}yc=Gc.exec(zc.toLowerCase())||[];function Lc(a){return function(b,c){\"string\"!=typeof b&&(c=b,b=\"*\");var d,e=0,f=b.toLowerCase().match(E)||[];if(m.isFunction(c))while(d=f[e++])\"+\"===d.charAt(0)?(d=d.slice(1)||\"*\",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function Mc(a,b,c,d){var e={},f=a===Ic;function g(h){var i;return e[h]=!0,m.each(a[h]||[],function(a,h){var j=h(b,c,d);return\"string\"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e[\"*\"]&&g(\"*\")}function Nc(a,b){var c,d,e=m.ajaxSettings.flatOptions||{};for(d in b)void 0!==b[d]&&((e[d]?a:c||(c={}))[d]=b[d]);return c&&m.extend(!0,a,c),a}function Oc(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while(\"*\"===i[0])i.shift(),void 0===e&&(e=a.mimeType||b.getResponseHeader(\"Content-Type\"));if(e)for(g in h)if(h[g]&&h[g].test(e)){i.unshift(g);break}if(i[0]in c)f=i[0];else{for(g in c){if(!i[0]||a.converters[g+\" \"+i[0]]){f=g;break}d||(d=g)}f=f||d}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function Pc(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if(\"*\"===f)f=i;else if(\"*\"!==i&&i!==f){if(g=j[i+\" \"+f]||j[\"* \"+f],!g)for(e in j)if(h=e.split(\" \"),h[1]===f&&(g=j[i+\" \"+h[0]]||j[\"* \"+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a[\"throws\"])b=g(b);else try{b=g(b)}catch(l){return{state:\"parsererror\",error:g?l:\"No conversion from \"+i+\" to \"+f}}}return{state:\"success\",data:b}}m.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:zc,type:\"GET\",isLocal:Dc.test(yc[1]),global:!0,processData:!0,async:!0,contentType:\"application/x-www-form-urlencoded; charset=UTF-8\",accepts:{\"*\":Jc,text:\"text/plain\",html:\"text/html\",xml:\"application/xml, text/xml\",json:\"application/json, text/javascript\"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:\"responseXML\",text:\"responseText\",json:\"responseJSON\"},converters:{\"* text\":String,\"text html\":!0,\"text json\":m.parseJSON,\"text xml\":m.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?Nc(Nc(a,m.ajaxSettings),b):Nc(m.ajaxSettings,a)},ajaxPrefilter:Lc(Hc),ajaxTransport:Lc(Ic),ajax:function(a,b){\"object\"==typeof a&&(b=a,a=void 0),b=b||{};var c,d,e,f,g,h,i,j,k=m.ajaxSetup({},b),l=k.context||k,n=k.context&&(l.nodeType||l.jquery)?m(l):m.event,o=m.Deferred(),p=m.Callbacks(\"once memory\"),q=k.statusCode||{},r={},s={},t=0,u=\"canceled\",v={readyState:0,getResponseHeader:function(a){var b;if(2===t){if(!j){j={};while(b=Cc.exec(f))j[b[1].toLowerCase()]=b[2]}b=j[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===t?f:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return t||(a=s[c]=s[c]||a,r[a]=b),this},overrideMimeType:function(a){return t||(k.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>t)for(b in a)q[b]=[q[b],a[b]];else v.always(a[v.status]);return this},abort:function(a){var b=a||u;return i&&i.abort(b),x(0,b),this}};if(o.promise(v).complete=p.add,v.success=v.done,v.error=v.fail,k.url=((a||k.url||zc)+\"\").replace(Ac,\"\").replace(Fc,yc[1]+\"//\"),k.type=b.method||b.type||k.method||k.type,k.dataTypes=m.trim(k.dataType||\"*\").toLowerCase().match(E)||[\"\"],null==k.crossDomain&&(c=Gc.exec(k.url.toLowerCase()),k.crossDomain=!(!c||c[1]===yc[1]&&c[2]===yc[2]&&(c[3]||(\"http:\"===c[1]?\"80\":\"443\"))===(yc[3]||(\"http:\"===yc[1]?\"80\":\"443\")))),k.data&&k.processData&&\"string\"!=typeof k.data&&(k.data=m.param(k.data,k.traditional)),Mc(Hc,k,b,v),2===t)return v;h=k.global,h&&0===m.active++&&m.event.trigger(\"ajaxStart\"),k.type=k.type.toUpperCase(),k.hasContent=!Ec.test(k.type),e=k.url,k.hasContent||(k.data&&(e=k.url+=(wc.test(e)?\"&\":\"?\")+k.data,delete k.data),k.cache===!1&&(k.url=Bc.test(e)?e.replace(Bc,\"$1_=\"+vc++):e+(wc.test(e)?\"&\":\"?\")+\"_=\"+vc++)),k.ifModified&&(m.lastModified[e]&&v.setRequestHeader(\"If-Modified-Since\",m.lastModified[e]),m.etag[e]&&v.setRequestHeader(\"If-None-Match\",m.etag[e])),(k.data&&k.hasContent&&k.contentType!==!1||b.contentType)&&v.setRequestHeader(\"Content-Type\",k.contentType),v.setRequestHeader(\"Accept\",k.dataTypes[0]&&k.accepts[k.dataTypes[0]]?k.accepts[k.dataTypes[0]]+(\"*\"!==k.dataTypes[0]?\", \"+Jc+\"; q=0.01\":\"\"):k.accepts[\"*\"]);for(d in k.headers)v.setRequestHeader(d,k.headers[d]);if(k.beforeSend&&(k.beforeSend.call(l,v,k)===!1||2===t))return v.abort();u=\"abort\";for(d in{success:1,error:1,complete:1})v[d](k[d]);if(i=Mc(Ic,k,b,v)){v.readyState=1,h&&n.trigger(\"ajaxSend\",[v,k]),k.async&&k.timeout>0&&(g=setTimeout(function(){v.abort(\"timeout\")},k.timeout));try{t=1,i.send(r,x)}catch(w){if(!(2>t))throw w;x(-1,w)}}else x(-1,\"No Transport\");function x(a,b,c,d){var j,r,s,u,w,x=b;2!==t&&(t=2,g&&clearTimeout(g),i=void 0,f=d||\"\",v.readyState=a>0?4:0,j=a>=200&&300>a||304===a,c&&(u=Oc(k,v,c)),u=Pc(k,u,v,j),j?(k.ifModified&&(w=v.getResponseHeader(\"Last-Modified\"),w&&(m.lastModified[e]=w),w=v.getResponseHeader(\"etag\"),w&&(m.etag[e]=w)),204===a||\"HEAD\"===k.type?x=\"nocontent\":304===a?x=\"notmodified\":(x=u.state,r=u.data,s=u.error,j=!s)):(s=x,(a||!x)&&(x=\"error\",0>a&&(a=0))),v.status=a,v.statusText=(b||x)+\"\",j?o.resolveWith(l,[r,x,v]):o.rejectWith(l,[v,x,s]),v.statusCode(q),q=void 0,h&&n.trigger(j?\"ajaxSuccess\":\"ajaxError\",[v,k,j?r:s]),p.fireWith(l,[v,x]),h&&(n.trigger(\"ajaxComplete\",[v,k]),--m.active||m.event.trigger(\"ajaxStop\")))}return v},getJSON:function(a,b,c){return m.get(a,b,c,\"json\")},getScript:function(a,b){return m.get(a,void 0,b,\"script\")}}),m.each([\"get\",\"post\"],function(a,b){m[b]=function(a,c,d,e){return m.isFunction(c)&&(e=e||d,d=c,c=void 0),m.ajax({url:a,type:b,dataType:e,data:c,success:d})}}),m.each([\"ajaxStart\",\"ajaxStop\",\"ajaxComplete\",\"ajaxError\",\"ajaxSuccess\",\"ajaxSend\"],function(a,b){m.fn[b]=function(a){return this.on(b,a)}}),m._evalUrl=function(a){return m.ajax({url:a,type:\"GET\",dataType:\"script\",async:!1,global:!1,\"throws\":!0})},m.fn.extend({wrapAll:function(a){if(m.isFunction(a))return this.each(function(b){m(this).wrapAll(a.call(this,b))});if(this[0]){var b=m(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&1===a.firstChild.nodeType)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){return this.each(m.isFunction(a)?function(b){m(this).wrapInner(a.call(this,b))}:function(){var b=m(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=m.isFunction(a);return this.each(function(c){m(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){m.nodeName(this,\"body\")||m(this).replaceWith(this.childNodes)}).end()}}),m.expr.filters.hidden=function(a){return a.offsetWidth<=0&&a.offsetHeight<=0||!k.reliableHiddenOffsets()&&\"none\"===(a.style&&a.style.display||m.css(a,\"display\"))},m.expr.filters.visible=function(a){return!m.expr.filters.hidden(a)};var Qc=/%20/g,Rc=/\\[\\]$/,Sc=/\\r?\\n/g,Tc=/^(?:submit|button|image|reset|file)$/i,Uc=/^(?:input|select|textarea|keygen)/i;function Vc(a,b,c,d){var e;if(m.isArray(b))m.each(b,function(b,e){c||Rc.test(a)?d(a,e):Vc(a+\"[\"+(\"object\"==typeof e?b:\"\")+\"]\",e,c,d)});else if(c||\"object\"!==m.type(b))d(a,b);else for(e in b)Vc(a+\"[\"+e+\"]\",b[e],c,d)}m.param=function(a,b){var c,d=[],e=function(a,b){b=m.isFunction(b)?b():null==b?\"\":b,d[d.length]=encodeURIComponent(a)+\"=\"+encodeURIComponent(b)};if(void 0===b&&(b=m.ajaxSettings&&m.ajaxSettings.traditional),m.isArray(a)||a.jquery&&!m.isPlainObject(a))m.each(a,function(){e(this.name,this.value)});else for(c in a)Vc(c,a[c],b,e);return d.join(\"&\").replace(Qc,\"+\")},m.fn.extend({serialize:function(){return m.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=m.prop(this,\"elements\");return a?m.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!m(this).is(\":disabled\")&&Uc.test(this.nodeName)&&!Tc.test(a)&&(this.checked||!W.test(a))}).map(function(a,b){var c=m(this).val();return null==c?null:m.isArray(c)?m.map(c,function(a){return{name:b.name,value:a.replace(Sc,\"\\r\\n\")}}):{name:b.name,value:c.replace(Sc,\"\\r\\n\")}}).get()}}),m.ajaxSettings.xhr=void 0!==a.ActiveXObject?function(){return!this.isLocal&&/^(get|post|head|put|delete|options)$/i.test(this.type)&&Zc()||$c()}:Zc;var Wc=0,Xc={},Yc=m.ajaxSettings.xhr();a.ActiveXObject&&m(a).on(\"unload\",function(){for(var a in Xc)Xc[a](void 0,!0)}),k.cors=!!Yc&&\"withCredentials\"in Yc,Yc=k.ajax=!!Yc,Yc&&m.ajaxTransport(function(a){if(!a.crossDomain||k.cors){var b;return{send:function(c,d){var e,f=a.xhr(),g=++Wc;if(f.open(a.type,a.url,a.async,a.username,a.password),a.xhrFields)for(e in a.xhrFields)f[e]=a.xhrFields[e];a.mimeType&&f.overrideMimeType&&f.overrideMimeType(a.mimeType),a.crossDomain||c[\"X-Requested-With\"]||(c[\"X-Requested-With\"]=\"XMLHttpRequest\");for(e in c)void 0!==c[e]&&f.setRequestHeader(e,c[e]+\"\");f.send(a.hasContent&&a.data||null),b=function(c,e){var h,i,j;if(b&&(e||4===f.readyState))if(delete Xc[g],b=void 0,f.onreadystatechange=m.noop,e)4!==f.readyState&&f.abort();else{j={},h=f.status,\"string\"==typeof f.responseText&&(j.text=f.responseText);try{i=f.statusText}catch(k){i=\"\"}h||!a.isLocal||a.crossDomain?1223===h&&(h=204):h=j.text?200:404}j&&d(h,i,j,f.getAllResponseHeaders())},a.async?4===f.readyState?setTimeout(b):f.onreadystatechange=Xc[g]=b:b()},abort:function(){b&&b(void 0,!0)}}}});function Zc(){try{return new a.XMLHttpRequest}catch(b){}}function $c(){try{return new a.ActiveXObject(\"Microsoft.XMLHTTP\")}catch(b){}}m.ajaxSetup({accepts:{script:\"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"},contents:{script:/(?:java|ecma)script/},converters:{\"text script\":function(a){return m.globalEval(a),a}}}),m.ajaxPrefilter(\"script\",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type=\"GET\",a.global=!1)}),m.ajaxTransport(\"script\",function(a){if(a.crossDomain){var b,c=y.head||m(\"head\")[0]||y.documentElement;return{send:function(d,e){b=y.createElement(\"script\"),b.async=!0,a.scriptCharset&&(b.charset=a.scriptCharset),b.src=a.url,b.onload=b.onreadystatechange=function(a,c){(c||!b.readyState||/loaded|complete/.test(b.readyState))&&(b.onload=b.onreadystatechange=null,b.parentNode&&b.parentNode.removeChild(b),b=null,c||e(200,\"success\"))},c.insertBefore(b,c.firstChild)},abort:function(){b&&b.onload(void 0,!0)}}}});var _c=[],ad=/(=)\\?(?=&|$)|\\?\\?/;m.ajaxSetup({jsonp:\"callback\",jsonpCallback:function(){var a=_c.pop()||m.expando+\"_\"+vc++;return this[a]=!0,a}}),m.ajaxPrefilter(\"json jsonp\",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(ad.test(b.url)?\"url\":\"string\"==typeof b.data&&!(b.contentType||\"\").indexOf(\"application/x-www-form-urlencoded\")&&ad.test(b.data)&&\"data\");return h||\"jsonp\"===b.dataTypes[0]?(e=b.jsonpCallback=m.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(ad,\"$1\"+e):b.jsonp!==!1&&(b.url+=(wc.test(b.url)?\"&\":\"?\")+b.jsonp+\"=\"+e),b.converters[\"script json\"]=function(){return g||m.error(e+\" was not called\"),g[0]},b.dataTypes[0]=\"json\",f=a[e],a[e]=function(){g=arguments},d.always(function(){a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,_c.push(e)),g&&m.isFunction(f)&&f(g[0]),g=f=void 0}),\"script\"):void 0}),m.parseHTML=function(a,b,c){if(!a||\"string\"!=typeof a)return null;\"boolean\"==typeof b&&(c=b,b=!1),b=b||y;var d=u.exec(a),e=!c&&[];return d?[b.createElement(d[1])]:(d=m.buildFragment([a],b,e),e&&e.length&&m(e).remove(),m.merge([],d.childNodes))};var bd=m.fn.load;m.fn.load=function(a,b,c){if(\"string\"!=typeof a&&bd)return bd.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(\" \");return h>=0&&(d=m.trim(a.slice(h,a.length)),a=a.slice(0,h)),m.isFunction(b)?(c=b,b=void 0):b&&\"object\"==typeof b&&(f=\"POST\"),g.length>0&&m.ajax({url:a,type:f,dataType:\"html\",data:b}).done(function(a){e=arguments,g.html(d?m(\"<div>\").append(m.parseHTML(a)).find(d):a)}).complete(c&&function(a,b){g.each(c,e||[a.responseText,b,a])}),this},m.expr.filters.animated=function(a){return m.grep(m.timers,function(b){return a===b.elem}).length};var cd=a.document.documentElement;function dd(a){return m.isWindow(a)?a:9===a.nodeType?a.defaultView||a.parentWindow:!1}m.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=m.css(a,\"position\"),l=m(a),n={};\"static\"===k&&(a.style.position=\"relative\"),h=l.offset(),f=m.css(a,\"top\"),i=m.css(a,\"left\"),j=(\"absolute\"===k||\"fixed\"===k)&&m.inArray(\"auto\",[f,i])>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),m.isFunction(b)&&(b=b.call(a,c,h)),null!=b.top&&(n.top=b.top-h.top+g),null!=b.left&&(n.left=b.left-h.left+e),\"using\"in b?b.using.call(a,n):l.css(n)}},m.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){m.offset.setOffset(this,a,b)});var b,c,d={top:0,left:0},e=this[0],f=e&&e.ownerDocument;if(f)return b=f.documentElement,m.contains(b,e)?(typeof e.getBoundingClientRect!==K&&(d=e.getBoundingClientRect()),c=dd(f),{top:d.top+(c.pageYOffset||b.scrollTop)-(b.clientTop||0),left:d.left+(c.pageXOffset||b.scrollLeft)-(b.clientLeft||0)}):d},position:function(){if(this[0]){var a,b,c={top:0,left:0},d=this[0];return\"fixed\"===m.css(d,\"position\")?b=d.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),m.nodeName(a[0],\"html\")||(c=a.offset()),c.top+=m.css(a[0],\"borderTopWidth\",!0),c.left+=m.css(a[0],\"borderLeftWidth\",!0)),{top:b.top-c.top-m.css(d,\"marginTop\",!0),left:b.left-c.left-m.css(d,\"marginLeft\",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||cd;while(a&&!m.nodeName(a,\"html\")&&\"static\"===m.css(a,\"position\"))a=a.offsetParent;return a||cd})}}),m.each({scrollLeft:\"pageXOffset\",scrollTop:\"pageYOffset\"},function(a,b){var c=/Y/.test(b);m.fn[a]=function(d){return V(this,function(a,d,e){var f=dd(a);return void 0===e?f?b in f?f[b]:f.document.documentElement[d]:a[d]:void(f?f.scrollTo(c?m(f).scrollLeft():e,c?e:m(f).scrollTop()):a[d]=e)},a,d,arguments.length,null)}}),m.each([\"top\",\"left\"],function(a,b){m.cssHooks[b]=Lb(k.pixelPosition,function(a,c){return c?(c=Jb(a,b),Hb.test(c)?m(a).position()[b]+\"px\":c):void 0})}),m.each({Height:\"height\",Width:\"width\"},function(a,b){m.each({padding:\"inner\"+a,content:b,\"\":\"outer\"+a},function(c,d){m.fn[d]=function(d,e){var f=arguments.length&&(c||\"boolean\"!=typeof d),g=c||(d===!0||e===!0?\"margin\":\"border\");return V(this,function(b,c,d){var e;return m.isWindow(b)?b.document.documentElement[\"client\"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body[\"scroll\"+a],e[\"scroll\"+a],b.body[\"offset\"+a],e[\"offset\"+a],e[\"client\"+a])):void 0===d?m.css(b,c,g):m.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),m.fn.size=function(){return this.length},m.fn.andSelf=m.fn.addBack,\"function\"==typeof define&&define.amd&&define(\"jquery\",[],function(){return m});var ed=a.jQuery,fd=a.$;return m.noConflict=function(b){return a.$===m&&(a.$=fd),b&&a.jQuery===m&&(a.jQuery=ed),m},typeof b===K&&(a.jQuery=a.$=m),m});\n+//# sourceMappingURL=jquery.min.map\n\\ No newline at end of file\n",
          "old_path": "flights-app/resources/js/jquery.min.js",
          "new_path": "flights-app/resources/js/jquery.min.js",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "daa73816"
        },
        {
          "diff": "@@ -29,7 +29,8 @@ public class Resource {\n   }\n \n   /**\n-   * This method returns a string.\n+   * This method (getUsers)returns\n+   * String to sendPesponse.\n    */\n   @Path(\"/query\")\n   @GET\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "daa73816"
        },
        {
          "diff": "@@ -9,31 +9,39 @@ import org.eclipse.jetty.servlet.ServletHolder;\n import ua.danit.application.dao.FlightDao;\n import ua.danit.application.resources.FlightResource;\n import ua.danit.framework.DispatcherServlet;\n+import ua.danit.framework.LoginServlet;\n \n public class WebApp {\n \n-  /**\n-   * This method is the entry point of our application ...\n-   * creates a server, creates a handler, parser classes\n-   */\n+    /**\n+     * This method is the entry point of our application ...\n+     * creates a server, creates a handler, parser classes\n+     */\n \n-  public static void main0(String[] args) throws Exception {\n+    public static void main(String[] args) throws Exception {\n \n-    Server server = new Server(8080);\n-    ServletContextHandler handler = new ServletContextHandler();\n+        Server server = new Server(8080);\n+        ServletContextHandler handler = new ServletContextHandler();\n \n-    DispatcherServlet servlet = new DispatcherServlet(Resource.class)\n-        .addFileMapping(\"/\", new File(\"flights-app/resources/index.html\"))\n-        .addFileMapping(\"/bootstrap.css\", new File(\"flights-app/resources/bootstrap.min.css\"));\n+        DispatcherServlet servlet = new DispatcherServlet(Resource.class)\n+                .addFileMapping(\"/\", new File(\"flights-app/resources/index.html\"))\n+                .addFileMapping(\"/bootstrap.css\", new File(\"flights-app/resources/bootstrap.min.css\"))\n+                .addFileMapping(\"/jquery.min.js\", new File(\"flights-app/resources/js/jquery.min.js\"));\n \n-    handler.addServlet(new ServletHolder(servlet), \"/*\");\n-    server.setHandler(handler);\n-    server.start();\n-    server.join();\n-  }\n+        servlet.addResource(FlightResource.class);\n \n-  public static void main(String[] args) throws IOException {\n-    String flights = new FlightResource(new FlightDao()).getTopFlights();\n-    System.out.println(flights);\n-  }\n+        handler.addServlet(new ServletHolder(servlet), \"/*\");\n+\n+        LoginServlet loginServlet = new LoginServlet();\n+        handler.addServlet(new ServletHolder(loginServlet), \"/login\");\n+\n+        server.setHandler(handler);\n+        server.start();\n+        server.join();\n+    }\n+\n+    public static void main1(String[] args) throws IOException {\n+//    String flights = new FlightResource(new FlightDao()).getTopFlights();\n+//    System.out.println(flights);\n+    }\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "daa73816"
        },
        {
          "diff": "@@ -4,6 +4,7 @@ import org.codehaus.jackson.map.ObjectMapper;\n import ua.danit.application.dao.FlightDao;\n import ua.danit.application.model.Flight;\n \n+import javax.ws.rs.GET;\n import javax.ws.rs.Path;\n import java.io.IOException;\n \n@@ -11,14 +12,21 @@ public class FlightResource {\n \n   private FlightDao flightDao;\n \n-  public FlightResource(FlightDao flightDao) {\n-    this.flightDao = flightDao;\n-  }\n+//  public FlightResource(FlightDao flightDao) {\n+//    this.flightDao = flightDao;\n+//  }\n \n   @Path(\"/flights/top\")\n+  @GET\n   public String getTopFlights() throws IOException {\n+    if (flightDao == null) {\n+      flightDao = new FlightDao();\n+    }\n+\n     Iterable<Flight> flights = flightDao.getTopFlight(5);\n     ObjectMapper mapper = new ObjectMapper();\n     return mapper.writeValueAsString(flights);\n   }\n+\n+  //TODO: add new Path for Get By Id\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/resources/FlightResource.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/resources/FlightResource.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "daa73816"
        },
        {
          "diff": "@@ -1,18 +1,12 @@\n package ua.danit.framework;\n \n-import static com.google.common.base.Preconditions.checkNotNull;\n-import static com.google.common.base.Preconditions.checkState;\n-\n-import com.google.common.base.Charsets;\n-import com.google.common.collect.Maps;\n-import com.google.common.io.Files;\n-\n import java.io.File;\n import java.io.IOException;\n import java.util.HashMap;\n import java.util.Map;\n \n import javax.servlet.ServletException;\n+import javax.servlet.http.Cookie;\n import javax.servlet.http.HttpServlet;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n@@ -20,8 +14,15 @@ import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n import javax.ws.rs.QueryParam;\n \n+import com.google.common.base.Charsets;\n+import com.google.common.collect.Maps;\n+import com.google.common.io.Files;\n import ua.danit.framework.invocations.Invocation;\n \n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+\n public class DispatcherServlet extends HttpServlet {\n \n   Map<String, Invocation> resources = new HashMap<>();\n@@ -38,24 +39,70 @@ public class DispatcherServlet extends HttpServlet {\n     }\n   }\n \n+  public void addResource(Class<?> rClass) {\n+    this.resources.putAll(Parser.getClassInvocations(rClass));\n+  }\n+\n+\n   @Override\n   protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n       throws ServletException, IOException {\n+\n+    String loginName = null;\n+\n+    if (req.getCookies() != null) {\n+\n+      for (Cookie cookie : req.getCookies()) {\n+        String cookieName = cookie.getName();\n+        if (cookieName != null && cookieName.equals(\"flight-user\")) {\n+          loginName = cookie.getValue();\n+        }\n+      }\n+    }\n+\n+    if (loginName == null) {\n+      resp.sendRedirect(\"/login\");\n+    } else {\n+      String uri = req.getRequestURI();\n+\n+     Invocation invoc = resources.get(uri);\n+\n+      if (resources.containsKey(uri) && canHandleGetMethod(invoc)) {\n+        handleMethod(req, resp, invoc);\n+      } else if (files.containsKey(uri)) {\n+        File file = files.get(uri);\n+        resp.getWriter().write(Files.toString(file, Charsets.UTF_8));\n+      } else {\n+        resp.sendError(404);\n+      }\n+    }\n+  }\n+\n+\n+  private boolean canHandleGetMethod(Invocation invoc) {\n+    return invoc != null && invoc.getHttpMethod() instanceof GET;\n+  }\n+\n+  @Override\n+  protected void doPost(HttpServletRequest req, HttpServletResponse resp)\n+      throws ServletException, IOException {\n     String uri = req.getRequestURI();\n \n     Invocation invoc = resources.get(uri);\n \n-    if (resources.containsKey(uri) && canHandleGetMethod(invoc)) {\n+    if (canHandlePostMethod(invoc)) {\n       handleMethod(req, resp, invoc);\n-    } else if (files.containsKey(uri)) {\n-      File file = files.get(uri);\n-      resp.getWriter().write(Files.toString(file, Charsets.UTF_8));\n     } else {\n       resp.sendError(404);\n     }\n   }\n \n-  private void handleMethod(HttpServletRequest req, HttpServletResponse resp, Invocation invoc) throws IOException {\n+  private boolean canHandlePostMethod(Invocation invoc) {\n+    return invoc.getHttpMethod() instanceof POST;\n+  }\n+\n+  private void handleMethod(HttpServletRequest req, HttpServletResponse resp, Invocation invoc)\n+      throws IOException {\n \n     String result = hasQueryParams(req) ? getHttpResult(req, invoc) : invoc.invoke();\n     resp.getWriter().write(result);\n@@ -76,30 +123,6 @@ public class DispatcherServlet extends HttpServlet {\n     return req.getQueryString() != null;\n   }\n \n-  private boolean canHandleGetMethod(Invocation invoc) {\n-    return invoc.getHttpMethod() instanceof GET;\n-  }\n-\n-  @Override\n-  protected void doPost(HttpServletRequest req, HttpServletResponse resp)\n-      throws ServletException, IOException {\n-    String uri = req.getRequestURI();\n-    Invocation invoc = resources.get(uri);\n-    if (canHandlePostMethod(invoc)) {\n-      handleMethod(req, resp, invoc);\n-    } else {\n-      resp.sendError(404);\n-    }\n-  }\n-\n-  private boolean canHandlePostMethod(Invocation invoc) {\n-    return invoc.getHttpMethod() instanceof POST;\n-  }\n-\n-  /**\n-   * Add web-mapping for a specified file.\n-   * File must exists.\n-   */\n   public DispatcherServlet addFileMapping(String url, File file) {\n     checkNotNull(url, \"URL is Null.\");\n     checkNotNull(file, \"FILE is Null.\");\n@@ -108,4 +131,6 @@ public class DispatcherServlet extends HttpServlet {\n     files.put(url, file);\n     return this;\n   }\n+\n+\n }\n\\ No newline at end of file\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "daa73816"
        },
        {
          "diff": "@@ -0,0 +1,44 @@\n+package ua.danit.framework;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+\n+public class LoginServlet extends HttpServlet {\n+\n+  private static final String loginForm =\n+      \"<html><body>\" +\n+      \" <form method = 'post'>\" +\n+      \" <input name = 'login' type = 'text'><br>\" +\n+      \" <input name = 'password' type = 'password'><br>\" +\n+      \" <button type = 'submit'>Submit</button><br>\" +\n+      \"</form></body></html>\";\n+\n+  @Override\n+  protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+    String loginName = null;\n+\n+    if (req.getCookies() != null) {\n+\n+      for (Cookie cookie : req.getCookies()) {\n+        String cookieName = cookie.getName();\n+        if (cookieName != null && cookieName.equals(\"flight-user\")) {\n+          loginName = cookie.getValue();\n+        }\n+      }\n+    }\n+\n+    resp.getWriter().write(loginName == null\n+        || loginName.isEmpty() ? loginForm : loginName);\n+  }\n+\n+  @Override\n+  protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+    String login = req.getParameter(\"login\");\n+    String password = req.getParameter(\"password\");\n+    resp.addCookie(new Cookie(\"flight-user\", login));\n+  }\n+}\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/LoginServlet.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/LoginServlet.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "daa73816"
        }
      ]
    },
    {
      "id": "064b82a0cb2ba7c642fb6b7fccfaa3ac7112fdf7",
      "project_id": 4888518,
      "message": "make it better\n",
      "title": "make it better",
      "short_id": "064b82a0",
      "author_name": "Oleksandr Rodiuk",
      "branches": null,
      "created_at": "2018-01-10T14:56:43Z",
      "diffs": [
        {
          "diff": "@@ -65,7 +65,7 @@ public class DispatcherServlet extends HttpServlet {\n     } else {\n       String uri = req.getRequestURI();\n \n-     //Invocation invoc = resources.get(uri);\n+     Invocation invoc = resources.get(uri);\n \n       if (resources.containsKey(uri) && canHandleGetMethod(invoc)) {\n         handleMethod(req, resp, invoc);\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "064b82a0"
        }
      ]
    },
    {
      "id": "691be2a270f1f3eb6a7632fbc204e993ca1e84df",
      "project_id": 4888518,
      "message": "make it better\n",
      "title": "make it better",
      "short_id": "691be2a2",
      "author_name": "Oleksandr Rodiuk",
      "branches": null,
      "created_at": "2018-01-10T14:56:31Z",
      "diffs": [
        {
          "diff": "@@ -65,7 +65,7 @@ public class DispatcherServlet extends HttpServlet {\n     } else {\n       String uri = req.getRequestURI();\n \n-     Invocation invoc = resources.get(uri);\n+     //Invocation invoc = resources.get(uri);\n \n       if (resources.containsKey(uri) && canHandleGetMethod(invoc)) {\n         handleMethod(req, resp, invoc);\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "691be2a2"
        }
      ]
    },
    {
      "id": "8c8652e7a2229761a50a2155ac3736d3ffc436c3",
      "project_id": 4888518,
      "message": "second try\n",
      "title": "second try",
      "short_id": "8c8652e7",
      "author_name": "Oleksandr Rodiuk",
      "branches": null,
      "created_at": "2018-01-10T14:54:59Z",
      "diffs": [
        {
          "diff": "@@ -65,7 +65,7 @@ public class DispatcherServlet extends HttpServlet {\n     } else {\n       String uri = req.getRequestURI();\n \n-     // Invocation invoc = resources.get(uri);\n+     Invocation invoc = resources.get(uri);\n \n       if (resources.containsKey(uri) && canHandleGetMethod(invoc)) {\n         handleMethod(req, resp, invoc);\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "8c8652e7"
        }
      ]
    },
    {
      "id": "158658c2e3121f0113c1445396d9bc7a591faaed",
      "project_id": 4888518,
      "message": "second try\n",
      "title": "second try",
      "short_id": "158658c2",
      "author_name": "Oleksandr Rodiuk",
      "branches": null,
      "created_at": "2018-01-10T14:54:47Z",
      "diffs": [
        {
          "diff": "@@ -65,7 +65,7 @@ public class DispatcherServlet extends HttpServlet {\n     } else {\n       String uri = req.getRequestURI();\n \n-      Invocation invoc = resources.get(uri);\n+     // Invocation invoc = resources.get(uri);\n \n       if (resources.containsKey(uri) && canHandleGetMethod(invoc)) {\n         handleMethod(req, resp, invoc);\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "158658c2"
        }
      ]
    },
    {
      "id": "b5c77f92e0ae3ee1506329991f550978631fa260",
      "project_id": 4888518,
      "message": "Updated index.html with ajax and jquery\n",
      "title": "Updated index.html with ajax and jquery",
      "short_id": "b5c77f92",
      "author_name": "Maxim Pogorelov",
      "branches": null,
      "created_at": "2017-12-28T09:59:53Z",
      "diffs": [
        {
          "diff": "@@ -25,7 +25,22 @@\n </div>\n <script src=\"/jquery.min.js\"></script>\n <script>\n+    $(document).ready(function () {\n+        $('#searchBtn').click(function() {\n \n+            $.ajax({\n+                url: '/flights/top',\n+                type: 'GET',\n+                success: function (data) {\n+                    var t = JSON.parse(data);\n+\n+                    console.log(t[0].id);\n+                    console.log(t[0].from);\n+                    console.log(t[0].to);\n+                }\n+            });\n+        });\n+    });\n </script>\n </body>\n </html>\n\\ No newline at end of file\n",
          "old_path": "flights-app/resources/index.html",
          "new_path": "flights-app/resources/index.html",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "b5c77f92"
        },
        {
          "diff": "@@ -13,34 +13,35 @@ import ua.danit.framework.LoginServlet;\n \n public class WebApp {\n \n-  /**\n-   * This method is the entry point of our application ...\n-   * creates a server, creates a handler, parser classes\n-   */\n+    /**\n+     * This method is the entry point of our application ...\n+     * creates a server, creates a handler, parser classes\n+     */\n \n-  public static void main(String[] args) throws Exception {\n+    public static void main(String[] args) throws Exception {\n \n-    Server server = new Server(8080);\n-    ServletContextHandler handler = new ServletContextHandler();\n+        Server server = new Server(8080);\n+        ServletContextHandler handler = new ServletContextHandler();\n \n-    DispatcherServlet servlet = new DispatcherServlet(Resource.class)\n-        .addFileMapping(\"/\", new File(\"flights-app/resources/index.html\"))\n-        .addFileMapping(\"/bootstrap.css\", new File(\"flights-app/resources/bootstrap.min.css\"));\n+        DispatcherServlet servlet = new DispatcherServlet(Resource.class)\n+                .addFileMapping(\"/\", new File(\"flights-app/resources/index.html\"))\n+                .addFileMapping(\"/bootstrap.css\", new File(\"flights-app/resources/bootstrap.min.css\"))\n+                .addFileMapping(\"/jquery.min.js\", new File(\"flights-app/resources/js/jquery.min.js\"));\n \n-    servlet.addResource(FlightResource.class);\n+        servlet.addResource(FlightResource.class);\n \n-    handler.addServlet(new ServletHolder(servlet), \"/*\");\n+        handler.addServlet(new ServletHolder(servlet), \"/*\");\n \n-    LoginServlet loginServlet = new LoginServlet();\n-    handler.addServlet(new ServletHolder(loginServlet), \"/login\");\n+        LoginServlet loginServlet = new LoginServlet();\n+        handler.addServlet(new ServletHolder(loginServlet), \"/login\");\n \n-    server.setHandler(handler);\n-    server.start();\n-    server.join();\n-  }\n+        server.setHandler(handler);\n+        server.start();\n+        server.join();\n+    }\n \n-  public static void main1(String[] args) throws IOException {\n+    public static void main1(String[] args) throws IOException {\n //    String flights = new FlightResource(new FlightDao()).getTopFlights();\n //    System.out.println(flights);\n-  }\n+    }\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "b5c77f92"
        },
        {
          "diff": "@@ -28,5 +28,5 @@ public class FlightResource {\n     return mapper.writeValueAsString(flights);\n   }\n \n-  //Get By Id\n+  //TODO: add new Path for Get By Id\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/resources/FlightResource.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/resources/FlightResource.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "b5c77f92"
        }
      ]
    },
    {
      "id": "61e708eb20071eca2ffce101233204c1797cf6d5",
      "project_id": 4888518,
      "message": "Added jquery\n",
      "title": "Added jquery",
      "short_id": "61e708eb",
      "author_name": "Maxim Pogorelov",
      "branches": null,
      "created_at": "2017-12-27T19:30:36Z",
      "diffs": [
        {
          "diff": "@@ -12,11 +12,18 @@\n         <h1>Flights Search</h1>\n         <p class=\"lead\">Find all tickets in one place.</p>\n         <p>\n-            <a class=\"btn btn-lg btn-success\" href=\"#\" role=\"button\">Sign up today</a>\n+            <a class=\"btn btn-lg btn-success\" href=\"/login\" role=\"button\">Sign up today</a>\n         </p>\n     </div>\n+    <div class=\"row\">\n+        <div class=\"col-xs-1 col-md-3\">\n+            <div class=\"form-group\">\n+                <a id=\"searchBtn\" class=\"btn btn-lg btn-success\" role=\"button\">Search</a>\n+            </div>\n+        </div>\n+    </div>\n </div>\n-\n+<script src=\"/jquery.min.js\"></script>\n <script>\n \n </script>\n",
          "old_path": "flights-app/resources/index.html",
          "new_path": "flights-app/resources/index.html",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "61e708eb"
        },
        {
          "diff": "@@ -0,0 +1,5 @@\n+/*! jQuery v1.11.1 | (c) 2005, 2014 jQuery Foundation, Inc. | jquery.org/license */\n+!function(a,b){\"object\"==typeof module&&\"object\"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error(\"jQuery requires a window with a document\");return b(a)}:b(a)}(\"undefined\"!=typeof window?window:this,function(a,b){var c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k={},l=\"1.11.1\",m=function(a,b){return new m.fn.init(a,b)},n=/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,o=/^-ms-/,p=/-([\\da-z])/gi,q=function(a,b){return b.toUpperCase()};m.fn=m.prototype={jquery:l,constructor:m,selector:\"\",length:0,toArray:function(){return d.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:d.call(this)},pushStack:function(a){var b=m.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a,b){return m.each(this,a,b)},map:function(a){return this.pushStack(m.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:c.sort,splice:c.splice},m.extend=m.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for(\"boolean\"==typeof g&&(j=g,g=arguments[h]||{},h++),\"object\"==typeof g||m.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(e=arguments[h]))for(d in e)a=g[d],c=e[d],g!==c&&(j&&c&&(m.isPlainObject(c)||(b=m.isArray(c)))?(b?(b=!1,f=a&&m.isArray(a)?a:[]):f=a&&m.isPlainObject(a)?a:{},g[d]=m.extend(j,f,c)):void 0!==c&&(g[d]=c));return g},m.extend({expando:\"jQuery\"+(l+Math.random()).replace(/\\D/g,\"\"),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return\"function\"===m.type(a)},isArray:Array.isArray||function(a){return\"array\"===m.type(a)},isWindow:function(a){return null!=a&&a==a.window},isNumeric:function(a){return!m.isArray(a)&&a-parseFloat(a)>=0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},isPlainObject:function(a){var b;if(!a||\"object\"!==m.type(a)||a.nodeType||m.isWindow(a))return!1;try{if(a.constructor&&!j.call(a,\"constructor\")&&!j.call(a.constructor.prototype,\"isPrototypeOf\"))return!1}catch(c){return!1}if(k.ownLast)for(b in a)return j.call(a,b);for(b in a);return void 0===b||j.call(a,b)},type:function(a){return null==a?a+\"\":\"object\"==typeof a||\"function\"==typeof a?h[i.call(a)]||\"object\":typeof a},globalEval:function(b){b&&m.trim(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(o,\"ms-\").replace(p,q)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b,c){var d,e=0,f=a.length,g=r(a);if(c){if(g){for(;f>e;e++)if(d=b.apply(a[e],c),d===!1)break}else for(e in a)if(d=b.apply(a[e],c),d===!1)break}else if(g){for(;f>e;e++)if(d=b.call(a[e],e,a[e]),d===!1)break}else for(e in a)if(d=b.call(a[e],e,a[e]),d===!1)break;return a},trim:function(a){return null==a?\"\":(a+\"\").replace(n,\"\")},makeArray:function(a,b){var c=b||[];return null!=a&&(r(Object(a))?m.merge(c,\"string\"==typeof a?[a]:a):f.call(c,a)),c},inArray:function(a,b,c){var d;if(b){if(g)return g.call(b,a,c);for(d=b.length,c=c?0>c?Math.max(0,d+c):c:0;d>c;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,b){var c=+b.length,d=0,e=a.length;while(c>d)a[e++]=b[d++];if(c!==c)while(void 0!==b[d])a[e++]=b[d++];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,f=0,g=a.length,h=r(a),i=[];if(h)for(;g>f;f++)d=b(a[f],f,c),null!=d&&i.push(d);else for(f in a)d=b(a[f],f,c),null!=d&&i.push(d);return e.apply([],i)},guid:1,proxy:function(a,b){var c,e,f;return\"string\"==typeof b&&(f=a[b],b=a,a=f),m.isFunction(a)?(c=d.call(arguments,2),e=function(){return a.apply(b||this,c.concat(d.call(arguments)))},e.guid=a.guid=a.guid||m.guid++,e):void 0},now:function(){return+new Date},support:k}),m.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"),function(a,b){h[\"[object \"+b+\"]\"]=b.toLowerCase()});function r(a){var b=a.length,c=m.type(a);return\"function\"===c||m.isWindow(a)?!1:1===a.nodeType&&b?!0:\"array\"===c||0===b||\"number\"==typeof b&&b>0&&b-1 in a}var s=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u=\"sizzle\"+-new Date,v=a.document,w=0,x=0,y=gb(),z=gb(),A=gb(),B=function(a,b){return a===b&&(l=!0),0},C=\"undefined\",D=1<<31,E={}.hasOwnProperty,F=[],G=F.pop,H=F.push,I=F.push,J=F.slice,K=F.indexOf||function(a){for(var b=0,c=this.length;c>b;b++)if(this[b]===a)return b;return-1},L=\"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",M=\"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",N=\"(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+\",O=N.replace(\"w\",\"w#\"),P=\"\\\\[\"+M+\"*(\"+N+\")(?:\"+M+\"*([*^$|!~]?=)\"+M+\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\"+O+\"))|)\"+M+\"*\\\\]\",Q=\":(\"+N+\")(?:\\\\((('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\"+P+\")*)|.*)\\\\)|)\",R=new RegExp(\"^\"+M+\"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\"+M+\"+$\",\"g\"),S=new RegExp(\"^\"+M+\"*,\"+M+\"*\"),T=new RegExp(\"^\"+M+\"*([>+~]|\"+M+\")\"+M+\"*\"),U=new RegExp(\"=\"+M+\"*([^\\\\]'\\\"]*?)\"+M+\"*\\\\]\",\"g\"),V=new RegExp(Q),W=new RegExp(\"^\"+O+\"$\"),X={ID:new RegExp(\"^#(\"+N+\")\"),CLASS:new RegExp(\"^\\\\.(\"+N+\")\"),TAG:new RegExp(\"^(\"+N.replace(\"w\",\"w*\")+\")\"),ATTR:new RegExp(\"^\"+P),PSEUDO:new RegExp(\"^\"+Q),CHILD:new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\"+M+\"*(even|odd|(([+-]|)(\\\\d*)n|)\"+M+\"*(?:([+-]|)\"+M+\"*(\\\\d+)|))\"+M+\"*\\\\)|)\",\"i\"),bool:new RegExp(\"^(?:\"+L+\")$\",\"i\"),needsContext:new RegExp(\"^\"+M+\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\"+M+\"*((?:-\\\\d)?\\\\d*)\"+M+\"*\\\\)|)(?=[^-]|$)\",\"i\")},Y=/^(?:input|select|textarea|button)$/i,Z=/^h\\d$/i,$=/^[^{]+\\{\\s*\\[native \\w/,_=/^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,ab=/[+~]/,bb=/'|\\\\/g,cb=new RegExp(\"\\\\\\\\([\\\\da-f]{1,6}\"+M+\"?|(\"+M+\")|.)\",\"ig\"),db=function(a,b,c){var d=\"0x\"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)};try{I.apply(F=J.call(v.childNodes),v.childNodes),F[v.childNodes.length].nodeType}catch(eb){I={apply:F.length?function(a,b){H.apply(a,J.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function fb(a,b,d,e){var f,h,j,k,l,o,r,s,w,x;if((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,d=d||[],!a||\"string\"!=typeof a)return d;if(1!==(k=b.nodeType)&&9!==k)return[];if(p&&!e){if(f=_.exec(a))if(j=f[1]){if(9===k){if(h=b.getElementById(j),!h||!h.parentNode)return d;if(h.id===j)return d.push(h),d}else if(b.ownerDocument&&(h=b.ownerDocument.getElementById(j))&&t(b,h)&&h.id===j)return d.push(h),d}else{if(f[2])return I.apply(d,b.getElementsByTagName(a)),d;if((j=f[3])&&c.getElementsByClassName&&b.getElementsByClassName)return I.apply(d,b.getElementsByClassName(j)),d}if(c.qsa&&(!q||!q.test(a))){if(s=r=u,w=b,x=9===k&&a,1===k&&\"object\"!==b.nodeName.toLowerCase()){o=g(a),(r=b.getAttribute(\"id\"))?s=r.replace(bb,\"\\\\$&\"):b.setAttribute(\"id\",s),s=\"[id='\"+s+\"'] \",l=o.length;while(l--)o[l]=s+qb(o[l]);w=ab.test(a)&&ob(b.parentNode)||b,x=o.join(\",\")}if(x)try{return I.apply(d,w.querySelectorAll(x)),d}catch(y){}finally{r||b.removeAttribute(\"id\")}}}return i(a.replace(R,\"$1\"),b,d,e)}function gb(){var a=[];function b(c,e){return a.push(c+\" \")>d.cacheLength&&delete b[a.shift()],b[c+\" \"]=e}return b}function hb(a){return a[u]=!0,a}function ib(a){var b=n.createElement(\"div\");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function jb(a,b){var c=a.split(\"|\"),e=a.length;while(e--)d.attrHandle[c[e]]=b}function kb(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||D)-(~a.sourceIndex||D);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function lb(a){return function(b){var c=b.nodeName.toLowerCase();return\"input\"===c&&b.type===a}}function mb(a){return function(b){var c=b.nodeName.toLowerCase();return(\"input\"===c||\"button\"===c)&&b.type===a}}function nb(a){return hb(function(b){return b=+b,hb(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function ob(a){return a&&typeof a.getElementsByTagName!==C&&a}c=fb.support={},f=fb.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?\"HTML\"!==b.nodeName:!1},m=fb.setDocument=function(a){var b,e=a?a.ownerDocument||a:v,g=e.defaultView;return e!==n&&9===e.nodeType&&e.documentElement?(n=e,o=e.documentElement,p=!f(e),g&&g!==g.top&&(g.addEventListener?g.addEventListener(\"unload\",function(){m()},!1):g.attachEvent&&g.attachEvent(\"onunload\",function(){m()})),c.attributes=ib(function(a){return a.className=\"i\",!a.getAttribute(\"className\")}),c.getElementsByTagName=ib(function(a){return a.appendChild(e.createComment(\"\")),!a.getElementsByTagName(\"*\").length}),c.getElementsByClassName=$.test(e.getElementsByClassName)&&ib(function(a){return a.innerHTML=\"<div class='a'></div><div class='a i'></div>\",a.firstChild.className=\"i\",2===a.getElementsByClassName(\"i\").length}),c.getById=ib(function(a){return o.appendChild(a).id=u,!e.getElementsByName||!e.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if(typeof b.getElementById!==C&&p){var c=b.getElementById(a);return c&&c.parentNode?[c]:[]}},d.filter.ID=function(a){var b=a.replace(cb,db);return function(a){return a.getAttribute(\"id\")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(cb,db);return function(a){var c=typeof a.getAttributeNode!==C&&a.getAttributeNode(\"id\");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return typeof b.getElementsByTagName!==C?b.getElementsByTagName(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if(\"*\"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return typeof b.getElementsByClassName!==C&&p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=$.test(e.querySelectorAll))&&(ib(function(a){a.innerHTML=\"<select msallowclip=''><option selected=''></option></select>\",a.querySelectorAll(\"[msallowclip^='']\").length&&q.push(\"[*^$]=\"+M+\"*(?:''|\\\"\\\")\"),a.querySelectorAll(\"[selected]\").length||q.push(\"\\\\[\"+M+\"*(?:value|\"+L+\")\"),a.querySelectorAll(\":checked\").length||q.push(\":checked\")}),ib(function(a){var b=e.createElement(\"input\");b.setAttribute(\"type\",\"hidden\"),a.appendChild(b).setAttribute(\"name\",\"D\"),a.querySelectorAll(\"[name=d]\").length&&q.push(\"name\"+M+\"*[*^$|!~]?=\"),a.querySelectorAll(\":enabled\").length||q.push(\":enabled\",\":disabled\"),a.querySelectorAll(\"*,:x\"),q.push(\",.*:\")})),(c.matchesSelector=$.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ib(function(a){c.disconnectedMatch=s.call(a,\"div\"),s.call(a,\"[s!='']:x\"),r.push(\"!=\",Q)}),q=q.length&&new RegExp(q.join(\"|\")),r=r.length&&new RegExp(r.join(\"|\")),b=$.test(o.compareDocumentPosition),t=b||$.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===e||a.ownerDocument===v&&t(v,a)?-1:b===e||b.ownerDocument===v&&t(v,b)?1:k?K.call(k,a)-K.call(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,f=a.parentNode,g=b.parentNode,h=[a],i=[b];if(!f||!g)return a===e?-1:b===e?1:f?-1:g?1:k?K.call(k,a)-K.call(k,b):0;if(f===g)return kb(a,b);c=a;while(c=c.parentNode)h.unshift(c);c=b;while(c=c.parentNode)i.unshift(c);while(h[d]===i[d])d++;return d?kb(h[d],i[d]):h[d]===v?-1:i[d]===v?1:0},e):n},fb.matches=function(a,b){return fb(a,null,null,b)},fb.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(U,\"='$1']\"),!(!c.matchesSelector||!p||r&&r.test(b)||q&&q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return fb(b,n,null,[a]).length>0},fb.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},fb.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&E.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},fb.error=function(a){throw new Error(\"Syntax error, unrecognized expression: \"+a)},fb.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=fb.getText=function(a){var b,c=\"\",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if(\"string\"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=fb.selectors={cacheLength:50,createPseudo:hb,match:X,attrHandle:{},find:{},relative:{\">\":{dir:\"parentNode\",first:!0},\" \":{dir:\"parentNode\"},\"+\":{dir:\"previousSibling\",first:!0},\"~\":{dir:\"previousSibling\"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(cb,db),a[3]=(a[3]||a[4]||a[5]||\"\").replace(cb,db),\"~=\"===a[2]&&(a[3]=\" \"+a[3]+\" \"),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),\"nth\"===a[1].slice(0,3)?(a[3]||fb.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*(\"even\"===a[3]||\"odd\"===a[3])),a[5]=+(a[7]+a[8]||\"odd\"===a[3])):a[3]&&fb.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return X.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||\"\":c&&V.test(c)&&(b=g(c,!0))&&(b=c.indexOf(\")\",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(cb,db).toLowerCase();return\"*\"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+\" \"];return b||(b=new RegExp(\"(^|\"+M+\")\"+a+\"(\"+M+\"|$)\"))&&y(a,function(a){return b.test(\"string\"==typeof a.className&&a.className||typeof a.getAttribute!==C&&a.getAttribute(\"class\")||\"\")})},ATTR:function(a,b,c){return function(d){var e=fb.attr(d,a);return null==e?\"!=\"===b:b?(e+=\"\",\"=\"===b?e===c:\"!=\"===b?e!==c:\"^=\"===b?c&&0===e.indexOf(c):\"*=\"===b?c&&e.indexOf(c)>-1:\"$=\"===b?c&&e.slice(-c.length)===c:\"~=\"===b?(\" \"+e+\" \").indexOf(c)>-1:\"|=\"===b?e===c||e.slice(0,c.length+1)===c+\"-\":!1):!0}},CHILD:function(a,b,c,d,e){var f=\"nth\"!==a.slice(0,3),g=\"last\"!==a.slice(-4),h=\"of-type\"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?\"nextSibling\":\"previousSibling\",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h;if(q){if(f){while(p){l=b;while(l=l[p])if(h?l.nodeName.toLowerCase()===r:1===l.nodeType)return!1;o=p=\"only\"===a&&!o&&\"nextSibling\"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){k=q[u]||(q[u]={}),j=k[a]||[],n=j[0]===w&&j[1],m=j[0]===w&&j[2],l=n&&q.childNodes[n];while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if(1===l.nodeType&&++m&&l===b){k[a]=[w,n,m];break}}else if(s&&(j=(b[u]||(b[u]={}))[a])&&j[0]===w)m=j[1];else while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if((h?l.nodeName.toLowerCase()===r:1===l.nodeType)&&++m&&(s&&((l[u]||(l[u]={}))[a]=[w,m]),l===b))break;return m-=e,m===d||m%d===0&&m/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||fb.error(\"unsupported pseudo: \"+a);return e[u]?e(b):e.length>1?(c=[a,a,\"\",b],d.setFilters.hasOwnProperty(a.toLowerCase())?hb(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=K.call(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:hb(function(a){var b=[],c=[],d=h(a.replace(R,\"$1\"));return d[u]?hb(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),!c.pop()}}),has:hb(function(a){return function(b){return fb(a,b).length>0}}),contains:hb(function(a){return function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:hb(function(a){return W.test(a||\"\")||fb.error(\"unsupported lang: \"+a),a=a.replace(cb,db).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute(\"xml:lang\")||b.getAttribute(\"lang\"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+\"-\");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return\"input\"===b&&!!a.checked||\"option\"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Z.test(a.nodeName)},input:function(a){return Y.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return\"input\"===b&&\"button\"===a.type||\"button\"===b},text:function(a){var b;return\"input\"===a.nodeName.toLowerCase()&&\"text\"===a.type&&(null==(b=a.getAttribute(\"type\"))||\"text\"===b.toLowerCase())},first:nb(function(){return[0]}),last:nb(function(a,b){return[b-1]}),eq:nb(function(a,b,c){return[0>c?c+b:c]}),even:nb(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:nb(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:nb(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:nb(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=lb(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=mb(b);function pb(){}pb.prototype=d.filters=d.pseudos,d.setFilters=new pb,g=fb.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+\" \"];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){(!c||(e=S.exec(h)))&&(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=T.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(R,\" \")}),h=h.slice(c.length));for(g in d.filter)!(e=X[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?fb.error(a):z(a,i).slice(0)};function qb(a){for(var b=0,c=a.length,d=\"\";c>b;b++)d+=a[b].value;return d}function rb(a,b,c){var d=b.dir,e=c&&\"parentNode\"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(i=b[u]||(b[u]={}),(h=i[d])&&h[0]===w&&h[1]===f)return j[2]=h[2];if(i[d]=j,j[2]=a(b,c,g))return!0}}}function sb(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function tb(a,b,c){for(var d=0,e=b.length;e>d;d++)fb(a,b[d],c);return c}function ub(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(!c||c(f,d,e))&&(g.push(f),j&&b.push(h));return g}function vb(a,b,c,d,e,f){return d&&!d[u]&&(d=vb(d)),e&&!e[u]&&(e=vb(e,f)),hb(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||tb(b||\"*\",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:ub(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=ub(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?K.call(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=ub(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):I.apply(g,r)})}function wb(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[\" \"],i=g?1:0,k=rb(function(a){return a===b},h,!0),l=rb(function(a){return K.call(b,a)>-1},h,!0),m=[function(a,c,d){return!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d))}];f>i;i++)if(c=d.relative[a[i].type])m=[rb(sb(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return vb(i>1&&sb(m),i>1&&qb(a.slice(0,i-1).concat({value:\" \"===a[i-2].type?\"*\":\"\"})).replace(R,\"$1\"),c,e>i&&wb(a.slice(i,e)),f>e&&wb(a=a.slice(e)),f>e&&qb(a))}m.push(c)}return sb(m)}function xb(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,m,o,p=0,q=\"0\",r=f&&[],s=[],t=j,u=f||e&&d.find.TAG(\"*\",k),v=w+=null==t?1:Math.random()||.1,x=u.length;for(k&&(j=g!==n&&g);q!==x&&null!=(l=u[q]);q++){if(e&&l){m=0;while(o=a[m++])if(o(l,g,h)){i.push(l);break}k&&(w=v)}c&&((l=!o&&l)&&p--,f&&r.push(l))}if(p+=q,c&&q!==p){m=0;while(o=b[m++])o(r,s,g,h);if(f){if(p>0)while(q--)r[q]||s[q]||(s[q]=G.call(i));s=ub(s)}I.apply(i,s),k&&!f&&s.length>0&&p+b.length>1&&fb.uniqueSort(i)}return k&&(w=v,j=t),r};return c?hb(f):f}return h=fb.compile=function(a,b){var c,d=[],e=[],f=A[a+\" \"];if(!f){b||(b=g(a)),c=b.length;while(c--)f=wb(b[c]),f[u]?d.push(f):e.push(f);f=A(a,xb(e,d)),f.selector=a}return f},i=fb.select=function(a,b,e,f){var i,j,k,l,m,n=\"function\"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&\"ID\"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(cb,db),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=X.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(cb,db),ab.test(j[0].type)&&ob(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&qb(j),!a)return I.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,ab.test(a)&&ob(b.parentNode)||b),e},c.sortStable=u.split(\"\").sort(B).join(\"\")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ib(function(a){return 1&a.compareDocumentPosition(n.createElement(\"div\"))}),ib(function(a){return a.innerHTML=\"<a href='#'></a>\",\"#\"===a.firstChild.getAttribute(\"href\")})||jb(\"type|href|height|width\",function(a,b,c){return c?void 0:a.getAttribute(b,\"type\"===b.toLowerCase()?1:2)}),c.attributes&&ib(function(a){return a.innerHTML=\"<input/>\",a.firstChild.setAttribute(\"value\",\"\"),\"\"===a.firstChild.getAttribute(\"value\")})||jb(\"value\",function(a,b,c){return c||\"input\"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ib(function(a){return null==a.getAttribute(\"disabled\")})||jb(L,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),fb}(a);m.find=s,m.expr=s.selectors,m.expr[\":\"]=m.expr.pseudos,m.unique=s.uniqueSort,m.text=s.getText,m.isXMLDoc=s.isXML,m.contains=s.contains;var t=m.expr.match.needsContext,u=/^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/,v=/^.[^:#\\[\\.,]*$/;function w(a,b,c){if(m.isFunction(b))return m.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return m.grep(a,function(a){return a===b!==c});if(\"string\"==typeof b){if(v.test(b))return m.filter(b,a,c);b=m.filter(b,a)}return m.grep(a,function(a){return m.inArray(a,b)>=0!==c})}m.filter=function(a,b,c){var d=b[0];return c&&(a=\":not(\"+a+\")\"),1===b.length&&1===d.nodeType?m.find.matchesSelector(d,a)?[d]:[]:m.find.matches(a,m.grep(b,function(a){return 1===a.nodeType}))},m.fn.extend({find:function(a){var b,c=[],d=this,e=d.length;if(\"string\"!=typeof a)return this.pushStack(m(a).filter(function(){for(b=0;e>b;b++)if(m.contains(d[b],this))return!0}));for(b=0;e>b;b++)m.find(a,d[b],c);return c=this.pushStack(e>1?m.unique(c):c),c.selector=this.selector?this.selector+\" \"+a:a,c},filter:function(a){return this.pushStack(w(this,a||[],!1))},not:function(a){return this.pushStack(w(this,a||[],!0))},is:function(a){return!!w(this,\"string\"==typeof a&&t.test(a)?m(a):a||[],!1).length}});var x,y=a.document,z=/^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,A=m.fn.init=function(a,b){var c,d;if(!a)return this;if(\"string\"==typeof a){if(c=\"<\"===a.charAt(0)&&\">\"===a.charAt(a.length-1)&&a.length>=3?[null,a,null]:z.exec(a),!c||!c[1]&&b)return!b||b.jquery?(b||x).find(a):this.constructor(b).find(a);if(c[1]){if(b=b instanceof m?b[0]:b,m.merge(this,m.parseHTML(c[1],b&&b.nodeType?b.ownerDocument||b:y,!0)),u.test(c[1])&&m.isPlainObject(b))for(c in b)m.isFunction(this[c])?this[c](b[c]):this.attr(c,b[c]);return this}if(d=y.getElementById(c[2]),d&&d.parentNode){if(d.id!==c[2])return x.find(a);this.length=1,this[0]=d}return this.context=y,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):m.isFunction(a)?\"undefined\"!=typeof x.ready?x.ready(a):a(m):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),m.makeArray(a,this))};A.prototype=m.fn,x=m(y);var B=/^(?:parents|prev(?:Until|All))/,C={children:!0,contents:!0,next:!0,prev:!0};m.extend({dir:function(a,b,c){var d=[],e=a[b];while(e&&9!==e.nodeType&&(void 0===c||1!==e.nodeType||!m(e).is(c)))1===e.nodeType&&d.push(e),e=e[b];return d},sibling:function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c}}),m.fn.extend({has:function(a){var b,c=m(a,this),d=c.length;return this.filter(function(){for(b=0;d>b;b++)if(m.contains(this,c[b]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=t.test(a)||\"string\"!=typeof a?m(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&m.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?m.unique(f):f)},index:function(a){return a?\"string\"==typeof a?m.inArray(this[0],m(a)):m.inArray(a.jquery?a[0]:a,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(m.unique(m.merge(this.get(),m(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function D(a,b){do a=a[b];while(a&&1!==a.nodeType);return a}m.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return m.dir(a,\"parentNode\")},parentsUntil:function(a,b,c){return m.dir(a,\"parentNode\",c)},next:function(a){return D(a,\"nextSibling\")},prev:function(a){return D(a,\"previousSibling\")},nextAll:function(a){return m.dir(a,\"nextSibling\")},prevAll:function(a){return m.dir(a,\"previousSibling\")},nextUntil:function(a,b,c){return m.dir(a,\"nextSibling\",c)},prevUntil:function(a,b,c){return m.dir(a,\"previousSibling\",c)},siblings:function(a){return m.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return m.sibling(a.firstChild)},contents:function(a){return m.nodeName(a,\"iframe\")?a.contentDocument||a.contentWindow.document:m.merge([],a.childNodes)}},function(a,b){m.fn[a]=function(c,d){var e=m.map(this,b,c);return\"Until\"!==a.slice(-5)&&(d=c),d&&\"string\"==typeof d&&(e=m.filter(d,e)),this.length>1&&(C[a]||(e=m.unique(e)),B.test(a)&&(e=e.reverse())),this.pushStack(e)}});var E=/\\S+/g,F={};function G(a){var b=F[a]={};return m.each(a.match(E)||[],function(a,c){b[c]=!0}),b}m.Callbacks=function(a){a=\"string\"==typeof a?F[a]||G(a):m.extend({},a);var b,c,d,e,f,g,h=[],i=!a.once&&[],j=function(l){for(c=a.memory&&l,d=!0,f=g||0,g=0,e=h.length,b=!0;h&&e>f;f++)if(h[f].apply(l[0],l[1])===!1&&a.stopOnFalse){c=!1;break}b=!1,h&&(i?i.length&&j(i.shift()):c?h=[]:k.disable())},k={add:function(){if(h){var d=h.length;!function f(b){m.each(b,function(b,c){var d=m.type(c);\"function\"===d?a.unique&&k.has(c)||h.push(c):c&&c.length&&\"string\"!==d&&f(c)})}(arguments),b?e=h.length:c&&(g=d,j(c))}return this},remove:function(){return h&&m.each(arguments,function(a,c){var d;while((d=m.inArray(c,h,d))>-1)h.splice(d,1),b&&(e>=d&&e--,f>=d&&f--)}),this},has:function(a){return a?m.inArray(a,h)>-1:!(!h||!h.length)},empty:function(){return h=[],e=0,this},disable:function(){return h=i=c=void 0,this},disabled:function(){return!h},lock:function(){return i=void 0,c||k.disable(),this},locked:function(){return!i},fireWith:function(a,c){return!h||d&&!i||(c=c||[],c=[a,c.slice?c.slice():c],b?i.push(c):j(c)),this},fire:function(){return k.fireWith(this,arguments),this},fired:function(){return!!d}};return k},m.extend({Deferred:function(a){var b=[[\"resolve\",\"done\",m.Callbacks(\"once memory\"),\"resolved\"],[\"reject\",\"fail\",m.Callbacks(\"once memory\"),\"rejected\"],[\"notify\",\"progress\",m.Callbacks(\"memory\")]],c=\"pending\",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return m.Deferred(function(c){m.each(b,function(b,f){var g=m.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&m.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f[0]+\"With\"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?m.extend(a,d):d}},e={};return d.pipe=d.then,m.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+\"With\"](this===e?d:this,arguments),this},e[f[0]+\"With\"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=d.call(arguments),e=c.length,f=1!==e||a&&m.isFunction(a.promise)?e:0,g=1===f?a:m.Deferred(),h=function(a,b,c){return function(e){b[a]=this,c[a]=arguments.length>1?d.call(arguments):e,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(e>1)for(i=new Array(e),j=new Array(e),k=new Array(e);e>b;b++)c[b]&&m.isFunction(c[b].promise)?c[b].promise().done(h(b,k,c)).fail(g.reject).progress(h(b,j,i)):--f;return f||g.resolveWith(k,c),g.promise()}});var H;m.fn.ready=function(a){return m.ready.promise().done(a),this},m.extend({isReady:!1,readyWait:1,holdReady:function(a){a?m.readyWait++:m.ready(!0)},ready:function(a){if(a===!0?!--m.readyWait:!m.isReady){if(!y.body)return setTimeout(m.ready);m.isReady=!0,a!==!0&&--m.readyWait>0||(H.resolveWith(y,[m]),m.fn.triggerHandler&&(m(y).triggerHandler(\"ready\"),m(y).off(\"ready\")))}}});function I(){y.addEventListener?(y.removeEventListener(\"DOMContentLoaded\",J,!1),a.removeEventListener(\"load\",J,!1)):(y.detachEvent(\"onreadystatechange\",J),a.detachEvent(\"onload\",J))}function J(){(y.addEventListener||\"load\"===event.type||\"complete\"===y.readyState)&&(I(),m.ready())}m.ready.promise=function(b){if(!H)if(H=m.Deferred(),\"complete\"===y.readyState)setTimeout(m.ready);else if(y.addEventListener)y.addEventListener(\"DOMContentLoaded\",J,!1),a.addEventListener(\"load\",J,!1);else{y.attachEvent(\"onreadystatechange\",J),a.attachEvent(\"onload\",J);var c=!1;try{c=null==a.frameElement&&y.documentElement}catch(d){}c&&c.doScroll&&!function e(){if(!m.isReady){try{c.doScroll(\"left\")}catch(a){return setTimeout(e,50)}I(),m.ready()}}()}return H.promise(b)};var K=\"undefined\",L;for(L in m(k))break;k.ownLast=\"0\"!==L,k.inlineBlockNeedsLayout=!1,m(function(){var a,b,c,d;c=y.getElementsByTagName(\"body\")[0],c&&c.style&&(b=y.createElement(\"div\"),d=y.createElement(\"div\"),d.style.cssText=\"position:absolute;border:0;width:0;height:0;top:0;left:-9999px\",c.appendChild(d).appendChild(b),typeof b.style.zoom!==K&&(b.style.cssText=\"display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1\",k.inlineBlockNeedsLayout=a=3===b.offsetWidth,a&&(c.style.zoom=1)),c.removeChild(d))}),function(){var a=y.createElement(\"div\");if(null==k.deleteExpando){k.deleteExpando=!0;try{delete a.test}catch(b){k.deleteExpando=!1}}a=null}(),m.acceptData=function(a){var b=m.noData[(a.nodeName+\" \").toLowerCase()],c=+a.nodeType||1;return 1!==c&&9!==c?!1:!b||b!==!0&&a.getAttribute(\"classid\")===b};var M=/^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,N=/([A-Z])/g;function O(a,b,c){if(void 0===c&&1===a.nodeType){var d=\"data-\"+b.replace(N,\"-$1\").toLowerCase();if(c=a.getAttribute(d),\"string\"==typeof c){try{c=\"true\"===c?!0:\"false\"===c?!1:\"null\"===c?null:+c+\"\"===c?+c:M.test(c)?m.parseJSON(c):c}catch(e){}m.data(a,b,c)}else c=void 0}return c}function P(a){var b;for(b in a)if((\"data\"!==b||!m.isEmptyObject(a[b]))&&\"toJSON\"!==b)return!1;return!0}function Q(a,b,d,e){if(m.acceptData(a)){var f,g,h=m.expando,i=a.nodeType,j=i?m.cache:a,k=i?a[h]:a[h]&&h;\n+if(k&&j[k]&&(e||j[k].data)||void 0!==d||\"string\"!=typeof b)return k||(k=i?a[h]=c.pop()||m.guid++:h),j[k]||(j[k]=i?{}:{toJSON:m.noop}),(\"object\"==typeof b||\"function\"==typeof b)&&(e?j[k]=m.extend(j[k],b):j[k].data=m.extend(j[k].data,b)),g=j[k],e||(g.data||(g.data={}),g=g.data),void 0!==d&&(g[m.camelCase(b)]=d),\"string\"==typeof b?(f=g[b],null==f&&(f=g[m.camelCase(b)])):f=g,f}}function R(a,b,c){if(m.acceptData(a)){var d,e,f=a.nodeType,g=f?m.cache:a,h=f?a[m.expando]:m.expando;if(g[h]){if(b&&(d=c?g[h]:g[h].data)){m.isArray(b)?b=b.concat(m.map(b,m.camelCase)):b in d?b=[b]:(b=m.camelCase(b),b=b in d?[b]:b.split(\" \")),e=b.length;while(e--)delete d[b[e]];if(c?!P(d):!m.isEmptyObject(d))return}(c||(delete g[h].data,P(g[h])))&&(f?m.cleanData([a],!0):k.deleteExpando||g!=g.window?delete g[h]:g[h]=null)}}}m.extend({cache:{},noData:{\"applet \":!0,\"embed \":!0,\"object \":\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"},hasData:function(a){return a=a.nodeType?m.cache[a[m.expando]]:a[m.expando],!!a&&!P(a)},data:function(a,b,c){return Q(a,b,c)},removeData:function(a,b){return R(a,b)},_data:function(a,b,c){return Q(a,b,c,!0)},_removeData:function(a,b){return R(a,b,!0)}}),m.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=m.data(f),1===f.nodeType&&!m._data(f,\"parsedAttrs\"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf(\"data-\")&&(d=m.camelCase(d.slice(5)),O(f,d,e[d])));m._data(f,\"parsedAttrs\",!0)}return e}return\"object\"==typeof a?this.each(function(){m.data(this,a)}):arguments.length>1?this.each(function(){m.data(this,a,b)}):f?O(f,a,m.data(f,a)):void 0},removeData:function(a){return this.each(function(){m.removeData(this,a)})}}),m.extend({queue:function(a,b,c){var d;return a?(b=(b||\"fx\")+\"queue\",d=m._data(a,b),c&&(!d||m.isArray(c)?d=m._data(a,b,m.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||\"fx\";var c=m.queue(a,b),d=c.length,e=c.shift(),f=m._queueHooks(a,b),g=function(){m.dequeue(a,b)};\"inprogress\"===e&&(e=c.shift(),d--),e&&(\"fx\"===b&&c.unshift(\"inprogress\"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+\"queueHooks\";return m._data(a,c)||m._data(a,c,{empty:m.Callbacks(\"once memory\").add(function(){m._removeData(a,b+\"queue\"),m._removeData(a,c)})})}}),m.fn.extend({queue:function(a,b){var c=2;return\"string\"!=typeof a&&(b=a,a=\"fx\",c--),arguments.length<c?m.queue(this[0],a):void 0===b?this:this.each(function(){var c=m.queue(this,a,b);m._queueHooks(this,a),\"fx\"===a&&\"inprogress\"!==c[0]&&m.dequeue(this,a)})},dequeue:function(a){return this.each(function(){m.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||\"fx\",[])},promise:function(a,b){var c,d=1,e=m.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};\"string\"!=typeof a&&(b=a,a=void 0),a=a||\"fx\";while(g--)c=m._data(f[g],a+\"queueHooks\"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var S=/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,T=[\"Top\",\"Right\",\"Bottom\",\"Left\"],U=function(a,b){return a=b||a,\"none\"===m.css(a,\"display\")||!m.contains(a.ownerDocument,a)},V=m.access=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if(\"object\"===m.type(c)){e=!0;for(h in c)m.access(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,m.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(m(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},W=/^(?:checkbox|radio)$/i;!function(){var a=y.createElement(\"input\"),b=y.createElement(\"div\"),c=y.createDocumentFragment();if(b.innerHTML=\"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\",k.leadingWhitespace=3===b.firstChild.nodeType,k.tbody=!b.getElementsByTagName(\"tbody\").length,k.htmlSerialize=!!b.getElementsByTagName(\"link\").length,k.html5Clone=\"<:nav></:nav>\"!==y.createElement(\"nav\").cloneNode(!0).outerHTML,a.type=\"checkbox\",a.checked=!0,c.appendChild(a),k.appendChecked=a.checked,b.innerHTML=\"<textarea>x</textarea>\",k.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue,c.appendChild(b),b.innerHTML=\"<input type='radio' checked='checked' name='t'/>\",k.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,k.noCloneEvent=!0,b.attachEvent&&(b.attachEvent(\"onclick\",function(){k.noCloneEvent=!1}),b.cloneNode(!0).click()),null==k.deleteExpando){k.deleteExpando=!0;try{delete b.test}catch(d){k.deleteExpando=!1}}}(),function(){var b,c,d=y.createElement(\"div\");for(b in{submit:!0,change:!0,focusin:!0})c=\"on\"+b,(k[b+\"Bubbles\"]=c in a)||(d.setAttribute(c,\"t\"),k[b+\"Bubbles\"]=d.attributes[c].expando===!1);d=null}();var X=/^(?:input|select|textarea)$/i,Y=/^key/,Z=/^(?:mouse|pointer|contextmenu)|click/,$=/^(?:focusinfocus|focusoutblur)$/,_=/^([^.]*)(?:\\.(.+)|)$/;function ab(){return!0}function bb(){return!1}function cb(){try{return y.activeElement}catch(a){}}m.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,n,o,p,q,r=m._data(a);if(r){c.handler&&(i=c,c=i.handler,e=i.selector),c.guid||(c.guid=m.guid++),(g=r.events)||(g=r.events={}),(k=r.handle)||(k=r.handle=function(a){return typeof m===K||a&&m.event.triggered===a.type?void 0:m.event.dispatch.apply(k.elem,arguments)},k.elem=a),b=(b||\"\").match(E)||[\"\"],h=b.length;while(h--)f=_.exec(b[h])||[],o=q=f[1],p=(f[2]||\"\").split(\".\").sort(),o&&(j=m.event.special[o]||{},o=(e?j.delegateType:j.bindType)||o,j=m.event.special[o]||{},l=m.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&m.expr.match.needsContext.test(e),namespace:p.join(\".\")},i),(n=g[o])||(n=g[o]=[],n.delegateCount=0,j.setup&&j.setup.call(a,d,p,k)!==!1||(a.addEventListener?a.addEventListener(o,k,!1):a.attachEvent&&a.attachEvent(\"on\"+o,k))),j.add&&(j.add.call(a,l),l.handler.guid||(l.handler.guid=c.guid)),e?n.splice(n.delegateCount++,0,l):n.push(l),m.event.global[o]=!0);a=null}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,n,o,p,q,r=m.hasData(a)&&m._data(a);if(r&&(k=r.events)){b=(b||\"\").match(E)||[\"\"],j=b.length;while(j--)if(h=_.exec(b[j])||[],o=q=h[1],p=(h[2]||\"\").split(\".\").sort(),o){l=m.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,n=k[o]||[],h=h[2]&&new RegExp(\"(^|\\\\.)\"+p.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"),i=f=n.length;while(f--)g=n[f],!e&&q!==g.origType||c&&c.guid!==g.guid||h&&!h.test(g.namespace)||d&&d!==g.selector&&(\"**\"!==d||!g.selector)||(n.splice(f,1),g.selector&&n.delegateCount--,l.remove&&l.remove.call(a,g));i&&!n.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||m.removeEvent(a,o,r.handle),delete k[o])}else for(o in k)m.event.remove(a,o+b[j],c,d,!0);m.isEmptyObject(k)&&(delete r.handle,m._removeData(a,\"events\"))}},trigger:function(b,c,d,e){var f,g,h,i,k,l,n,o=[d||y],p=j.call(b,\"type\")?b.type:b,q=j.call(b,\"namespace\")?b.namespace.split(\".\"):[];if(h=l=d=d||y,3!==d.nodeType&&8!==d.nodeType&&!$.test(p+m.event.triggered)&&(p.indexOf(\".\")>=0&&(q=p.split(\".\"),p=q.shift(),q.sort()),g=p.indexOf(\":\")<0&&\"on\"+p,b=b[m.expando]?b:new m.Event(p,\"object\"==typeof b&&b),b.isTrigger=e?2:3,b.namespace=q.join(\".\"),b.namespace_re=b.namespace?new RegExp(\"(^|\\\\.)\"+q.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"):null,b.result=void 0,b.target||(b.target=d),c=null==c?[b]:m.makeArray(c,[b]),k=m.event.special[p]||{},e||!k.trigger||k.trigger.apply(d,c)!==!1)){if(!e&&!k.noBubble&&!m.isWindow(d)){for(i=k.delegateType||p,$.test(i+p)||(h=h.parentNode);h;h=h.parentNode)o.push(h),l=h;l===(d.ownerDocument||y)&&o.push(l.defaultView||l.parentWindow||a)}n=0;while((h=o[n++])&&!b.isPropagationStopped())b.type=n>1?i:k.bindType||p,f=(m._data(h,\"events\")||{})[b.type]&&m._data(h,\"handle\"),f&&f.apply(h,c),f=g&&h[g],f&&f.apply&&m.acceptData(h)&&(b.result=f.apply(h,c),b.result===!1&&b.preventDefault());if(b.type=p,!e&&!b.isDefaultPrevented()&&(!k._default||k._default.apply(o.pop(),c)===!1)&&m.acceptData(d)&&g&&d[p]&&!m.isWindow(d)){l=d[g],l&&(d[g]=null),m.event.triggered=p;try{d[p]()}catch(r){}m.event.triggered=void 0,l&&(d[g]=l)}return b.result}},dispatch:function(a){a=m.event.fix(a);var b,c,e,f,g,h=[],i=d.call(arguments),j=(m._data(this,\"events\")||{})[a.type]||[],k=m.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=m.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,g=0;while((e=f.handlers[g++])&&!a.isImmediatePropagationStopped())(!a.namespace_re||a.namespace_re.test(e.namespace))&&(a.handleObj=e,a.data=e.data,c=((m.event.special[e.origType]||{}).handle||e.handler).apply(f.elem,i),void 0!==c&&(a.result=c)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&(!a.button||\"click\"!==a.type))for(;i!=this;i=i.parentNode||this)if(1===i.nodeType&&(i.disabled!==!0||\"click\"!==a.type)){for(e=[],f=0;h>f;f++)d=b[f],c=d.selector+\" \",void 0===e[c]&&(e[c]=d.needsContext?m(c,this).index(i)>=0:m.find(c,this,null,[i]).length),e[c]&&e.push(d);e.length&&g.push({elem:i,handlers:e})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},fix:function(a){if(a[m.expando])return a;var b,c,d,e=a.type,f=a,g=this.fixHooks[e];g||(this.fixHooks[e]=g=Z.test(e)?this.mouseHooks:Y.test(e)?this.keyHooks:{}),d=g.props?this.props.concat(g.props):this.props,a=new m.Event(f),b=d.length;while(b--)c=d[b],a[c]=f[c];return a.target||(a.target=f.srcElement||y),3===a.target.nodeType&&(a.target=a.target.parentNode),a.metaKey=!!a.metaKey,g.filter?g.filter(a,f):a},props:\"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which\".split(\" \"),fixHooks:{},keyHooks:{props:\"char charCode key keyCode\".split(\" \"),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:\"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement\".split(\" \"),filter:function(a,b){var c,d,e,f=b.button,g=b.fromElement;return null==a.pageX&&null!=b.clientX&&(d=a.target.ownerDocument||y,e=d.documentElement,c=d.body,a.pageX=b.clientX+(e&&e.scrollLeft||c&&c.scrollLeft||0)-(e&&e.clientLeft||c&&c.clientLeft||0),a.pageY=b.clientY+(e&&e.scrollTop||c&&c.scrollTop||0)-(e&&e.clientTop||c&&c.clientTop||0)),!a.relatedTarget&&g&&(a.relatedTarget=g===a.target?b.toElement:g),a.which||void 0===f||(a.which=1&f?1:2&f?3:4&f?2:0),a}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==cb()&&this.focus)try{return this.focus(),!1}catch(a){}},delegateType:\"focusin\"},blur:{trigger:function(){return this===cb()&&this.blur?(this.blur(),!1):void 0},delegateType:\"focusout\"},click:{trigger:function(){return m.nodeName(this,\"input\")&&\"checkbox\"===this.type&&this.click?(this.click(),!1):void 0},_default:function(a){return m.nodeName(a.target,\"a\")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c,d){var e=m.extend(new m.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?m.event.trigger(e,null,b):m.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},m.removeEvent=y.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){var d=\"on\"+b;a.detachEvent&&(typeof a[d]===K&&(a[d]=null),a.detachEvent(d,c))},m.Event=function(a,b){return this instanceof m.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?ab:bb):this.type=a,b&&m.extend(this,b),this.timeStamp=a&&a.timeStamp||m.now(),void(this[m.expando]=!0)):new m.Event(a,b)},m.Event.prototype={isDefaultPrevented:bb,isPropagationStopped:bb,isImmediatePropagationStopped:bb,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=ab,a&&(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=ab,a&&(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=ab,a&&a.stopImmediatePropagation&&a.stopImmediatePropagation(),this.stopPropagation()}},m.each({mouseenter:\"mouseover\",mouseleave:\"mouseout\",pointerenter:\"pointerover\",pointerleave:\"pointerout\"},function(a,b){m.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return(!e||e!==d&&!m.contains(d,e))&&(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),k.submitBubbles||(m.event.special.submit={setup:function(){return m.nodeName(this,\"form\")?!1:void m.event.add(this,\"click._submit keypress._submit\",function(a){var b=a.target,c=m.nodeName(b,\"input\")||m.nodeName(b,\"button\")?b.form:void 0;c&&!m._data(c,\"submitBubbles\")&&(m.event.add(c,\"submit._submit\",function(a){a._submit_bubble=!0}),m._data(c,\"submitBubbles\",!0))})},postDispatch:function(a){a._submit_bubble&&(delete a._submit_bubble,this.parentNode&&!a.isTrigger&&m.event.simulate(\"submit\",this.parentNode,a,!0))},teardown:function(){return m.nodeName(this,\"form\")?!1:void m.event.remove(this,\"._submit\")}}),k.changeBubbles||(m.event.special.change={setup:function(){return X.test(this.nodeName)?((\"checkbox\"===this.type||\"radio\"===this.type)&&(m.event.add(this,\"propertychange._change\",function(a){\"checked\"===a.originalEvent.propertyName&&(this._just_changed=!0)}),m.event.add(this,\"click._change\",function(a){this._just_changed&&!a.isTrigger&&(this._just_changed=!1),m.event.simulate(\"change\",this,a,!0)})),!1):void m.event.add(this,\"beforeactivate._change\",function(a){var b=a.target;X.test(b.nodeName)&&!m._data(b,\"changeBubbles\")&&(m.event.add(b,\"change._change\",function(a){!this.parentNode||a.isSimulated||a.isTrigger||m.event.simulate(\"change\",this.parentNode,a,!0)}),m._data(b,\"changeBubbles\",!0))})},handle:function(a){var b=a.target;return this!==b||a.isSimulated||a.isTrigger||\"radio\"!==b.type&&\"checkbox\"!==b.type?a.handleObj.handler.apply(this,arguments):void 0},teardown:function(){return m.event.remove(this,\"._change\"),!X.test(this.nodeName)}}),k.focusinBubbles||m.each({focus:\"focusin\",blur:\"focusout\"},function(a,b){var c=function(a){m.event.simulate(b,a.target,m.event.fix(a),!0)};m.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=m._data(d,b);e||d.addEventListener(a,c,!0),m._data(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=m._data(d,b)-1;e?m._data(d,b,e):(d.removeEventListener(a,c,!0),m._removeData(d,b))}}}),m.fn.extend({on:function(a,b,c,d,e){var f,g;if(\"object\"==typeof a){\"string\"!=typeof b&&(c=c||b,b=void 0);for(f in a)this.on(f,b,c,a[f],e);return this}if(null==c&&null==d?(d=b,c=b=void 0):null==d&&(\"string\"==typeof b?(d=c,c=void 0):(d=c,c=b,b=void 0)),d===!1)d=bb;else if(!d)return this;return 1===e&&(g=d,d=function(a){return m().off(a),g.apply(this,arguments)},d.guid=g.guid||(g.guid=m.guid++)),this.each(function(){m.event.add(this,a,d,c,b)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,m(a.delegateTarget).off(d.namespace?d.origType+\".\"+d.namespace:d.origType,d.selector,d.handler),this;if(\"object\"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return(b===!1||\"function\"==typeof b)&&(c=b,b=void 0),c===!1&&(c=bb),this.each(function(){m.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){m.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?m.event.trigger(a,b,c,!0):void 0}});function db(a){var b=eb.split(\"|\"),c=a.createDocumentFragment();if(c.createElement)while(b.length)c.createElement(b.pop());return c}var eb=\"abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video\",fb=/ jQuery\\d+=\"(?:null|\\d+)\"/g,gb=new RegExp(\"<(?:\"+eb+\")[\\\\s/>]\",\"i\"),hb=/^\\s+/,ib=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi,jb=/<([\\w:]+)/,kb=/<tbody/i,lb=/<|&#?\\w+;/,mb=/<(?:script|style|link)/i,nb=/checked\\s*(?:[^=]|=\\s*.checked.)/i,ob=/^$|\\/(?:java|ecma)script/i,pb=/^true\\/(.*)/,qb=/^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g,rb={option:[1,\"<select multiple='multiple'>\",\"</select>\"],legend:[1,\"<fieldset>\",\"</fieldset>\"],area:[1,\"<map>\",\"</map>\"],param:[1,\"<object>\",\"</object>\"],thead:[1,\"<table>\",\"</table>\"],tr:[2,\"<table><tbody>\",\"</tbody></table>\"],col:[2,\"<table><tbody></tbody><colgroup>\",\"</colgroup></table>\"],td:[3,\"<table><tbody><tr>\",\"</tr></tbody></table>\"],_default:k.htmlSerialize?[0,\"\",\"\"]:[1,\"X<div>\",\"</div>\"]},sb=db(y),tb=sb.appendChild(y.createElement(\"div\"));rb.optgroup=rb.option,rb.tbody=rb.tfoot=rb.colgroup=rb.caption=rb.thead,rb.th=rb.td;function ub(a,b){var c,d,e=0,f=typeof a.getElementsByTagName!==K?a.getElementsByTagName(b||\"*\"):typeof a.querySelectorAll!==K?a.querySelectorAll(b||\"*\"):void 0;if(!f)for(f=[],c=a.childNodes||a;null!=(d=c[e]);e++)!b||m.nodeName(d,b)?f.push(d):m.merge(f,ub(d,b));return void 0===b||b&&m.nodeName(a,b)?m.merge([a],f):f}function vb(a){W.test(a.type)&&(a.defaultChecked=a.checked)}function wb(a,b){return m.nodeName(a,\"table\")&&m.nodeName(11!==b.nodeType?b:b.firstChild,\"tr\")?a.getElementsByTagName(\"tbody\")[0]||a.appendChild(a.ownerDocument.createElement(\"tbody\")):a}function xb(a){return a.type=(null!==m.find.attr(a,\"type\"))+\"/\"+a.type,a}function yb(a){var b=pb.exec(a.type);return b?a.type=b[1]:a.removeAttribute(\"type\"),a}function zb(a,b){for(var c,d=0;null!=(c=a[d]);d++)m._data(c,\"globalEval\",!b||m._data(b[d],\"globalEval\"))}function Ab(a,b){if(1===b.nodeType&&m.hasData(a)){var c,d,e,f=m._data(a),g=m._data(b,f),h=f.events;if(h){delete g.handle,g.events={};for(c in h)for(d=0,e=h[c].length;e>d;d++)m.event.add(b,c,h[c][d])}g.data&&(g.data=m.extend({},g.data))}}function Bb(a,b){var c,d,e;if(1===b.nodeType){if(c=b.nodeName.toLowerCase(),!k.noCloneEvent&&b[m.expando]){e=m._data(b);for(d in e.events)m.removeEvent(b,d,e.handle);b.removeAttribute(m.expando)}\"script\"===c&&b.text!==a.text?(xb(b).text=a.text,yb(b)):\"object\"===c?(b.parentNode&&(b.outerHTML=a.outerHTML),k.html5Clone&&a.innerHTML&&!m.trim(b.innerHTML)&&(b.innerHTML=a.innerHTML)):\"input\"===c&&W.test(a.type)?(b.defaultChecked=b.checked=a.checked,b.value!==a.value&&(b.value=a.value)):\"option\"===c?b.defaultSelected=b.selected=a.defaultSelected:(\"input\"===c||\"textarea\"===c)&&(b.defaultValue=a.defaultValue)}}m.extend({clone:function(a,b,c){var d,e,f,g,h,i=m.contains(a.ownerDocument,a);if(k.html5Clone||m.isXMLDoc(a)||!gb.test(\"<\"+a.nodeName+\">\")?f=a.cloneNode(!0):(tb.innerHTML=a.outerHTML,tb.removeChild(f=tb.firstChild)),!(k.noCloneEvent&&k.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||m.isXMLDoc(a)))for(d=ub(f),h=ub(a),g=0;null!=(e=h[g]);++g)d[g]&&Bb(e,d[g]);if(b)if(c)for(h=h||ub(a),d=d||ub(f),g=0;null!=(e=h[g]);g++)Ab(e,d[g]);else Ab(a,f);return d=ub(f,\"script\"),d.length>0&&zb(d,!i&&ub(a,\"script\")),d=h=e=null,f},buildFragment:function(a,b,c,d){for(var e,f,g,h,i,j,l,n=a.length,o=db(b),p=[],q=0;n>q;q++)if(f=a[q],f||0===f)if(\"object\"===m.type(f))m.merge(p,f.nodeType?[f]:f);else if(lb.test(f)){h=h||o.appendChild(b.createElement(\"div\")),i=(jb.exec(f)||[\"\",\"\"])[1].toLowerCase(),l=rb[i]||rb._default,h.innerHTML=l[1]+f.replace(ib,\"<$1></$2>\")+l[2],e=l[0];while(e--)h=h.lastChild;if(!k.leadingWhitespace&&hb.test(f)&&p.push(b.createTextNode(hb.exec(f)[0])),!k.tbody){f=\"table\"!==i||kb.test(f)?\"<table>\"!==l[1]||kb.test(f)?0:h:h.firstChild,e=f&&f.childNodes.length;while(e--)m.nodeName(j=f.childNodes[e],\"tbody\")&&!j.childNodes.length&&f.removeChild(j)}m.merge(p,h.childNodes),h.textContent=\"\";while(h.firstChild)h.removeChild(h.firstChild);h=o.lastChild}else p.push(b.createTextNode(f));h&&o.removeChild(h),k.appendChecked||m.grep(ub(p,\"input\"),vb),q=0;while(f=p[q++])if((!d||-1===m.inArray(f,d))&&(g=m.contains(f.ownerDocument,f),h=ub(o.appendChild(f),\"script\"),g&&zb(h),c)){e=0;while(f=h[e++])ob.test(f.type||\"\")&&c.push(f)}return h=null,o},cleanData:function(a,b){for(var d,e,f,g,h=0,i=m.expando,j=m.cache,l=k.deleteExpando,n=m.event.special;null!=(d=a[h]);h++)if((b||m.acceptData(d))&&(f=d[i],g=f&&j[f])){if(g.events)for(e in g.events)n[e]?m.event.remove(d,e):m.removeEvent(d,e,g.handle);j[f]&&(delete j[f],l?delete d[i]:typeof d.removeAttribute!==K?d.removeAttribute(i):d[i]=null,c.push(f))}}}),m.fn.extend({text:function(a){return V(this,function(a){return void 0===a?m.text(this):this.empty().append((this[0]&&this[0].ownerDocument||y).createTextNode(a))},null,a,arguments.length)},append:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=wb(this,a);b.appendChild(a)}})},prepend:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=wb(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},remove:function(a,b){for(var c,d=a?m.filter(a,this):this,e=0;null!=(c=d[e]);e++)b||1!==c.nodeType||m.cleanData(ub(c)),c.parentNode&&(b&&m.contains(c.ownerDocument,c)&&zb(ub(c,\"script\")),c.parentNode.removeChild(c));return this},empty:function(){for(var a,b=0;null!=(a=this[b]);b++){1===a.nodeType&&m.cleanData(ub(a,!1));while(a.firstChild)a.removeChild(a.firstChild);a.options&&m.nodeName(a,\"select\")&&(a.options.length=0)}return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return m.clone(this,a,b)})},html:function(a){return V(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a)return 1===b.nodeType?b.innerHTML.replace(fb,\"\"):void 0;if(!(\"string\"!=typeof a||mb.test(a)||!k.htmlSerialize&&gb.test(a)||!k.leadingWhitespace&&hb.test(a)||rb[(jb.exec(a)||[\"\",\"\"])[1].toLowerCase()])){a=a.replace(ib,\"<$1></$2>\");try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(m.cleanData(ub(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=arguments[0];return this.domManip(arguments,function(b){a=this.parentNode,m.cleanData(ub(this)),a&&a.replaceChild(b,this)}),a&&(a.length||a.nodeType)?this:this.remove()},detach:function(a){return this.remove(a,!0)},domManip:function(a,b){a=e.apply([],a);var c,d,f,g,h,i,j=0,l=this.length,n=this,o=l-1,p=a[0],q=m.isFunction(p);if(q||l>1&&\"string\"==typeof p&&!k.checkClone&&nb.test(p))return this.each(function(c){var d=n.eq(c);q&&(a[0]=p.call(this,c,d.html())),d.domManip(a,b)});if(l&&(i=m.buildFragment(a,this[0].ownerDocument,!1,this),c=i.firstChild,1===i.childNodes.length&&(i=c),c)){for(g=m.map(ub(i,\"script\"),xb),f=g.length;l>j;j++)d=i,j!==o&&(d=m.clone(d,!0,!0),f&&m.merge(g,ub(d,\"script\"))),b.call(this[j],d,j);if(f)for(h=g[g.length-1].ownerDocument,m.map(g,yb),j=0;f>j;j++)d=g[j],ob.test(d.type||\"\")&&!m._data(d,\"globalEval\")&&m.contains(h,d)&&(d.src?m._evalUrl&&m._evalUrl(d.src):m.globalEval((d.text||d.textContent||d.innerHTML||\"\").replace(qb,\"\")));i=c=null}return this}}),m.each({appendTo:\"append\",prependTo:\"prepend\",insertBefore:\"before\",insertAfter:\"after\",replaceAll:\"replaceWith\"},function(a,b){m.fn[a]=function(a){for(var c,d=0,e=[],g=m(a),h=g.length-1;h>=d;d++)c=d===h?this:this.clone(!0),m(g[d])[b](c),f.apply(e,c.get());return this.pushStack(e)}});var Cb,Db={};function Eb(b,c){var d,e=m(c.createElement(b)).appendTo(c.body),f=a.getDefaultComputedStyle&&(d=a.getDefaultComputedStyle(e[0]))?d.display:m.css(e[0],\"display\");return e.detach(),f}function Fb(a){var b=y,c=Db[a];return c||(c=Eb(a,b),\"none\"!==c&&c||(Cb=(Cb||m(\"<iframe frameborder='0' width='0' height='0'/>\")).appendTo(b.documentElement),b=(Cb[0].contentWindow||Cb[0].contentDocument).document,b.write(),b.close(),c=Eb(a,b),Cb.detach()),Db[a]=c),c}!function(){var a;k.shrinkWrapBlocks=function(){if(null!=a)return a;a=!1;var b,c,d;return c=y.getElementsByTagName(\"body\")[0],c&&c.style?(b=y.createElement(\"div\"),d=y.createElement(\"div\"),d.style.cssText=\"position:absolute;border:0;width:0;height:0;top:0;left:-9999px\",c.appendChild(d).appendChild(b),typeof b.style.zoom!==K&&(b.style.cssText=\"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1\",b.appendChild(y.createElement(\"div\")).style.width=\"5px\",a=3!==b.offsetWidth),c.removeChild(d),a):void 0}}();var Gb=/^margin/,Hb=new RegExp(\"^(\"+S+\")(?!px)[a-z%]+$\",\"i\"),Ib,Jb,Kb=/^(top|right|bottom|left)$/;a.getComputedStyle?(Ib=function(a){return a.ownerDocument.defaultView.getComputedStyle(a,null)},Jb=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Ib(a),g=c?c.getPropertyValue(b)||c[b]:void 0,c&&(\"\"!==g||m.contains(a.ownerDocument,a)||(g=m.style(a,b)),Hb.test(g)&&Gb.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0===g?g:g+\"\"}):y.documentElement.currentStyle&&(Ib=function(a){return a.currentStyle},Jb=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Ib(a),g=c?c[b]:void 0,null==g&&h&&h[b]&&(g=h[b]),Hb.test(g)&&!Kb.test(b)&&(d=h.left,e=a.runtimeStyle,f=e&&e.left,f&&(e.left=a.currentStyle.left),h.left=\"fontSize\"===b?\"1em\":g,g=h.pixelLeft+\"px\",h.left=d,f&&(e.left=f)),void 0===g?g:g+\"\"||\"auto\"});function Lb(a,b){return{get:function(){var c=a();if(null!=c)return c?void delete this.get:(this.get=b).apply(this,arguments)}}}!function(){var b,c,d,e,f,g,h;if(b=y.createElement(\"div\"),b.innerHTML=\"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\",d=b.getElementsByTagName(\"a\")[0],c=d&&d.style){c.cssText=\"float:left;opacity:.5\",k.opacity=\"0.5\"===c.opacity,k.cssFloat=!!c.cssFloat,b.style.backgroundClip=\"content-box\",b.cloneNode(!0).style.backgroundClip=\"\",k.clearCloneStyle=\"content-box\"===b.style.backgroundClip,k.boxSizing=\"\"===c.boxSizing||\"\"===c.MozBoxSizing||\"\"===c.WebkitBoxSizing,m.extend(k,{reliableHiddenOffsets:function(){return null==g&&i(),g},boxSizingReliable:function(){return null==f&&i(),f},pixelPosition:function(){return null==e&&i(),e},reliableMarginRight:function(){return null==h&&i(),h}});function i(){var b,c,d,i;c=y.getElementsByTagName(\"body\")[0],c&&c.style&&(b=y.createElement(\"div\"),d=y.createElement(\"div\"),d.style.cssText=\"position:absolute;border:0;width:0;height:0;top:0;left:-9999px\",c.appendChild(d).appendChild(b),b.style.cssText=\"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute\",e=f=!1,h=!0,a.getComputedStyle&&(e=\"1%\"!==(a.getComputedStyle(b,null)||{}).top,f=\"4px\"===(a.getComputedStyle(b,null)||{width:\"4px\"}).width,i=b.appendChild(y.createElement(\"div\")),i.style.cssText=b.style.cssText=\"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0\",i.style.marginRight=i.style.width=\"0\",b.style.width=\"1px\",h=!parseFloat((a.getComputedStyle(i,null)||{}).marginRight)),b.innerHTML=\"<table><tr><td></td><td>t</td></tr></table>\",i=b.getElementsByTagName(\"td\"),i[0].style.cssText=\"margin:0;border:0;padding:0;display:none\",g=0===i[0].offsetHeight,g&&(i[0].style.display=\"\",i[1].style.display=\"none\",g=0===i[0].offsetHeight),c.removeChild(d))}}}(),m.swap=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};var Mb=/alpha\\([^)]*\\)/i,Nb=/opacity\\s*=\\s*([^)]*)/,Ob=/^(none|table(?!-c[ea]).+)/,Pb=new RegExp(\"^(\"+S+\")(.*)$\",\"i\"),Qb=new RegExp(\"^([+-])=(\"+S+\")\",\"i\"),Rb={position:\"absolute\",visibility:\"hidden\",display:\"block\"},Sb={letterSpacing:\"0\",fontWeight:\"400\"},Tb=[\"Webkit\",\"O\",\"Moz\",\"ms\"];function Ub(a,b){if(b in a)return b;var c=b.charAt(0).toUpperCase()+b.slice(1),d=b,e=Tb.length;while(e--)if(b=Tb[e]+c,b in a)return b;return d}function Vb(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=m._data(d,\"olddisplay\"),c=d.style.display,b?(f[g]||\"none\"!==c||(d.style.display=\"\"),\"\"===d.style.display&&U(d)&&(f[g]=m._data(d,\"olddisplay\",Fb(d.nodeName)))):(e=U(d),(c&&\"none\"!==c||!e)&&m._data(d,\"olddisplay\",e?c:m.css(d,\"display\"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&\"none\"!==d.style.display&&\"\"!==d.style.display||(d.style.display=b?f[g]||\"\":\"none\"));return a}function Wb(a,b,c){var d=Pb.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||\"px\"):b}function Xb(a,b,c,d,e){for(var f=c===(d?\"border\":\"content\")?4:\"width\"===b?1:0,g=0;4>f;f+=2)\"margin\"===c&&(g+=m.css(a,c+T[f],!0,e)),d?(\"content\"===c&&(g-=m.css(a,\"padding\"+T[f],!0,e)),\"margin\"!==c&&(g-=m.css(a,\"border\"+T[f]+\"Width\",!0,e))):(g+=m.css(a,\"padding\"+T[f],!0,e),\"padding\"!==c&&(g+=m.css(a,\"border\"+T[f]+\"Width\",!0,e)));return g}function Yb(a,b,c){var d=!0,e=\"width\"===b?a.offsetWidth:a.offsetHeight,f=Ib(a),g=k.boxSizing&&\"border-box\"===m.css(a,\"boxSizing\",!1,f);if(0>=e||null==e){if(e=Jb(a,b,f),(0>e||null==e)&&(e=a.style[b]),Hb.test(e))return e;d=g&&(k.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+Xb(a,b,c||(g?\"border\":\"content\"),d,f)+\"px\"}m.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Jb(a,\"opacity\");return\"\"===c?\"1\":c}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{\"float\":k.cssFloat?\"cssFloat\":\"styleFloat\"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=m.camelCase(b),i=a.style;if(b=m.cssProps[h]||(m.cssProps[h]=Ub(i,h)),g=m.cssHooks[b]||m.cssHooks[h],void 0===c)return g&&\"get\"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b];if(f=typeof c,\"string\"===f&&(e=Qb.exec(c))&&(c=(e[1]+1)*e[2]+parseFloat(m.css(a,b)),f=\"number\"),null!=c&&c===c&&(\"number\"!==f||m.cssNumber[h]||(c+=\"px\"),k.clearCloneStyle||\"\"!==c||0!==b.indexOf(\"background\")||(i[b]=\"inherit\"),!(g&&\"set\"in g&&void 0===(c=g.set(a,c,d)))))try{i[b]=c}catch(j){}}},css:function(a,b,c,d){var e,f,g,h=m.camelCase(b);return b=m.cssProps[h]||(m.cssProps[h]=Ub(a.style,h)),g=m.cssHooks[b]||m.cssHooks[h],g&&\"get\"in g&&(f=g.get(a,!0,c)),void 0===f&&(f=Jb(a,b,d)),\"normal\"===f&&b in Sb&&(f=Sb[b]),\"\"===c||c?(e=parseFloat(f),c===!0||m.isNumeric(e)?e||0:f):f}}),m.each([\"height\",\"width\"],function(a,b){m.cssHooks[b]={get:function(a,c,d){return c?Ob.test(m.css(a,\"display\"))&&0===a.offsetWidth?m.swap(a,Rb,function(){return Yb(a,b,d)}):Yb(a,b,d):void 0},set:function(a,c,d){var e=d&&Ib(a);return Wb(a,c,d?Xb(a,b,d,k.boxSizing&&\"border-box\"===m.css(a,\"boxSizing\",!1,e),e):0)}}}),k.opacity||(m.cssHooks.opacity={get:function(a,b){return Nb.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||\"\")?.01*parseFloat(RegExp.$1)+\"\":b?\"1\":\"\"},set:function(a,b){var c=a.style,d=a.currentStyle,e=m.isNumeric(b)?\"alpha(opacity=\"+100*b+\")\":\"\",f=d&&d.filter||c.filter||\"\";c.zoom=1,(b>=1||\"\"===b)&&\"\"===m.trim(f.replace(Mb,\"\"))&&c.removeAttribute&&(c.removeAttribute(\"filter\"),\"\"===b||d&&!d.filter)||(c.filter=Mb.test(f)?f.replace(Mb,e):f+\" \"+e)}}),m.cssHooks.marginRight=Lb(k.reliableMarginRight,function(a,b){return b?m.swap(a,{display:\"inline-block\"},Jb,[a,\"marginRight\"]):void 0}),m.each({margin:\"\",padding:\"\",border:\"Width\"},function(a,b){m.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f=\"string\"==typeof c?c.split(\" \"):[c];4>d;d++)e[a+T[d]+b]=f[d]||f[d-2]||f[0];return e}},Gb.test(a)||(m.cssHooks[a+b].set=Wb)}),m.fn.extend({css:function(a,b){return V(this,function(a,b,c){var d,e,f={},g=0;if(m.isArray(b)){for(d=Ib(a),e=b.length;e>g;g++)f[b[g]]=m.css(a,b[g],!1,d);return f}return void 0!==c?m.style(a,b,c):m.css(a,b)},a,b,arguments.length>1)},show:function(){return Vb(this,!0)},hide:function(){return Vb(this)},toggle:function(a){return\"boolean\"==typeof a?a?this.show():this.hide():this.each(function(){U(this)?m(this).show():m(this).hide()})}});function Zb(a,b,c,d,e){return new Zb.prototype.init(a,b,c,d,e)}m.Tween=Zb,Zb.prototype={constructor:Zb,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||\"swing\",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(m.cssNumber[c]?\"\":\"px\")\n+},cur:function(){var a=Zb.propHooks[this.prop];return a&&a.get?a.get(this):Zb.propHooks._default.get(this)},run:function(a){var b,c=Zb.propHooks[this.prop];return this.pos=b=this.options.duration?m.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Zb.propHooks._default.set(this),this}},Zb.prototype.init.prototype=Zb.prototype,Zb.propHooks={_default:{get:function(a){var b;return null==a.elem[a.prop]||a.elem.style&&null!=a.elem.style[a.prop]?(b=m.css(a.elem,a.prop,\"\"),b&&\"auto\"!==b?b:0):a.elem[a.prop]},set:function(a){m.fx.step[a.prop]?m.fx.step[a.prop](a):a.elem.style&&(null!=a.elem.style[m.cssProps[a.prop]]||m.cssHooks[a.prop])?m.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},Zb.propHooks.scrollTop=Zb.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},m.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},m.fx=Zb.prototype.init,m.fx.step={};var $b,_b,ac=/^(?:toggle|show|hide)$/,bc=new RegExp(\"^(?:([+-])=|)(\"+S+\")([a-z%]*)$\",\"i\"),cc=/queueHooks$/,dc=[ic],ec={\"*\":[function(a,b){var c=this.createTween(a,b),d=c.cur(),e=bc.exec(b),f=e&&e[3]||(m.cssNumber[a]?\"\":\"px\"),g=(m.cssNumber[a]||\"px\"!==f&&+d)&&bc.exec(m.css(c.elem,a)),h=1,i=20;if(g&&g[3]!==f){f=f||g[3],e=e||[],g=+d||1;do h=h||\".5\",g/=h,m.style(c.elem,a,g+f);while(h!==(h=c.cur()/d)&&1!==h&&--i)}return e&&(g=c.start=+g||+d||0,c.unit=f,c.end=e[1]?g+(e[1]+1)*e[2]:+e[2]),c}]};function fc(){return setTimeout(function(){$b=void 0}),$b=m.now()}function gc(a,b){var c,d={height:a},e=0;for(b=b?1:0;4>e;e+=2-b)c=T[e],d[\"margin\"+c]=d[\"padding\"+c]=a;return b&&(d.opacity=d.width=a),d}function hc(a,b,c){for(var d,e=(ec[b]||[]).concat(ec[\"*\"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function ic(a,b,c){var d,e,f,g,h,i,j,l,n=this,o={},p=a.style,q=a.nodeType&&U(a),r=m._data(a,\"fxshow\");c.queue||(h=m._queueHooks(a,\"fx\"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,n.always(function(){n.always(function(){h.unqueued--,m.queue(a,\"fx\").length||h.empty.fire()})})),1===a.nodeType&&(\"height\"in b||\"width\"in b)&&(c.overflow=[p.overflow,p.overflowX,p.overflowY],j=m.css(a,\"display\"),l=\"none\"===j?m._data(a,\"olddisplay\")||Fb(a.nodeName):j,\"inline\"===l&&\"none\"===m.css(a,\"float\")&&(k.inlineBlockNeedsLayout&&\"inline\"!==Fb(a.nodeName)?p.zoom=1:p.display=\"inline-block\")),c.overflow&&(p.overflow=\"hidden\",k.shrinkWrapBlocks()||n.always(function(){p.overflow=c.overflow[0],p.overflowX=c.overflow[1],p.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],ac.exec(e)){if(delete b[d],f=f||\"toggle\"===e,e===(q?\"hide\":\"show\")){if(\"show\"!==e||!r||void 0===r[d])continue;q=!0}o[d]=r&&r[d]||m.style(a,d)}else j=void 0;if(m.isEmptyObject(o))\"inline\"===(\"none\"===j?Fb(a.nodeName):j)&&(p.display=j);else{r?\"hidden\"in r&&(q=r.hidden):r=m._data(a,\"fxshow\",{}),f&&(r.hidden=!q),q?m(a).show():n.done(function(){m(a).hide()}),n.done(function(){var b;m._removeData(a,\"fxshow\");for(b in o)m.style(a,b,o[b])});for(d in o)g=hc(q?r[d]:0,d,n),d in r||(r[d]=g.start,q&&(g.end=g.start,g.start=\"width\"===d||\"height\"===d?1:0))}}function jc(a,b){var c,d,e,f,g;for(c in a)if(d=m.camelCase(c),e=b[d],f=a[c],m.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=m.cssHooks[d],g&&\"expand\"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function kc(a,b,c){var d,e,f=0,g=dc.length,h=m.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=$b||fc(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:m.extend({},b),opts:m.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:$b||fc(),duration:c.duration,tweens:[],createTween:function(b,c){var d=m.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;for(jc(k,j.opts.specialEasing);g>f;f++)if(d=dc[f].call(j,a,k,j.opts))return d;return m.map(k,hc,j),m.isFunction(j.opts.start)&&j.opts.start.call(a,j),m.fx.timer(m.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}m.Animation=m.extend(kc,{tweener:function(a,b){m.isFunction(a)?(b=a,a=[\"*\"]):a=a.split(\" \");for(var c,d=0,e=a.length;e>d;d++)c=a[d],ec[c]=ec[c]||[],ec[c].unshift(b)},prefilter:function(a,b){b?dc.unshift(a):dc.push(a)}}),m.speed=function(a,b,c){var d=a&&\"object\"==typeof a?m.extend({},a):{complete:c||!c&&b||m.isFunction(a)&&a,duration:a,easing:c&&b||b&&!m.isFunction(b)&&b};return d.duration=m.fx.off?0:\"number\"==typeof d.duration?d.duration:d.duration in m.fx.speeds?m.fx.speeds[d.duration]:m.fx.speeds._default,(null==d.queue||d.queue===!0)&&(d.queue=\"fx\"),d.old=d.complete,d.complete=function(){m.isFunction(d.old)&&d.old.call(this),d.queue&&m.dequeue(this,d.queue)},d},m.fn.extend({fadeTo:function(a,b,c,d){return this.filter(U).css(\"opacity\",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=m.isEmptyObject(a),f=m.speed(b,c,d),g=function(){var b=kc(this,m.extend({},a),f);(e||m._data(this,\"finish\"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return\"string\"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||\"fx\",[]),this.each(function(){var b=!0,e=null!=a&&a+\"queueHooks\",f=m.timers,g=m._data(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&cc.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));(b||!c)&&m.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||\"fx\"),this.each(function(){var b,c=m._data(this),d=c[a+\"queue\"],e=c[a+\"queueHooks\"],f=m.timers,g=d?d.length:0;for(c.finish=!0,m.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),m.each([\"toggle\",\"show\",\"hide\"],function(a,b){var c=m.fn[b];m.fn[b]=function(a,d,e){return null==a||\"boolean\"==typeof a?c.apply(this,arguments):this.animate(gc(b,!0),a,d,e)}}),m.each({slideDown:gc(\"show\"),slideUp:gc(\"hide\"),slideToggle:gc(\"toggle\"),fadeIn:{opacity:\"show\"},fadeOut:{opacity:\"hide\"},fadeToggle:{opacity:\"toggle\"}},function(a,b){m.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),m.timers=[],m.fx.tick=function(){var a,b=m.timers,c=0;for($b=m.now();c<b.length;c++)a=b[c],a()||b[c]!==a||b.splice(c--,1);b.length||m.fx.stop(),$b=void 0},m.fx.timer=function(a){m.timers.push(a),a()?m.fx.start():m.timers.pop()},m.fx.interval=13,m.fx.start=function(){_b||(_b=setInterval(m.fx.tick,m.fx.interval))},m.fx.stop=function(){clearInterval(_b),_b=null},m.fx.speeds={slow:600,fast:200,_default:400},m.fn.delay=function(a,b){return a=m.fx?m.fx.speeds[a]||a:a,b=b||\"fx\",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},function(){var a,b,c,d,e;b=y.createElement(\"div\"),b.setAttribute(\"className\",\"t\"),b.innerHTML=\"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\",d=b.getElementsByTagName(\"a\")[0],c=y.createElement(\"select\"),e=c.appendChild(y.createElement(\"option\")),a=b.getElementsByTagName(\"input\")[0],d.style.cssText=\"top:1px\",k.getSetAttribute=\"t\"!==b.className,k.style=/top/.test(d.getAttribute(\"style\")),k.hrefNormalized=\"/a\"===d.getAttribute(\"href\"),k.checkOn=!!a.value,k.optSelected=e.selected,k.enctype=!!y.createElement(\"form\").enctype,c.disabled=!0,k.optDisabled=!e.disabled,a=y.createElement(\"input\"),a.setAttribute(\"value\",\"\"),k.input=\"\"===a.getAttribute(\"value\"),a.value=\"t\",a.setAttribute(\"type\",\"radio\"),k.radioValue=\"t\"===a.value}();var lc=/\\r/g;m.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=m.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,m(this).val()):a,null==e?e=\"\":\"number\"==typeof e?e+=\"\":m.isArray(e)&&(e=m.map(e,function(a){return null==a?\"\":a+\"\"})),b=m.valHooks[this.type]||m.valHooks[this.nodeName.toLowerCase()],b&&\"set\"in b&&void 0!==b.set(this,e,\"value\")||(this.value=e))});if(e)return b=m.valHooks[e.type]||m.valHooks[e.nodeName.toLowerCase()],b&&\"get\"in b&&void 0!==(c=b.get(e,\"value\"))?c:(c=e.value,\"string\"==typeof c?c.replace(lc,\"\"):null==c?\"\":c)}}}),m.extend({valHooks:{option:{get:function(a){var b=m.find.attr(a,\"value\");return null!=b?b:m.trim(m.text(a))}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f=\"select-one\"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],!(!c.selected&&i!==e||(k.optDisabled?c.disabled:null!==c.getAttribute(\"disabled\"))||c.parentNode.disabled&&m.nodeName(c.parentNode,\"optgroup\"))){if(b=m(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=m.makeArray(b),g=e.length;while(g--)if(d=e[g],m.inArray(m.valHooks.option.get(d),f)>=0)try{d.selected=c=!0}catch(h){d.scrollHeight}else d.selected=!1;return c||(a.selectedIndex=-1),e}}}}),m.each([\"radio\",\"checkbox\"],function(){m.valHooks[this]={set:function(a,b){return m.isArray(b)?a.checked=m.inArray(m(a).val(),b)>=0:void 0}},k.checkOn||(m.valHooks[this].get=function(a){return null===a.getAttribute(\"value\")?\"on\":a.value})});var mc,nc,oc=m.expr.attrHandle,pc=/^(?:checked|selected)$/i,qc=k.getSetAttribute,rc=k.input;m.fn.extend({attr:function(a,b){return V(this,m.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){m.removeAttr(this,a)})}}),m.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(a&&3!==f&&8!==f&&2!==f)return typeof a.getAttribute===K?m.prop(a,b,c):(1===f&&m.isXMLDoc(a)||(b=b.toLowerCase(),d=m.attrHooks[b]||(m.expr.match.bool.test(b)?nc:mc)),void 0===c?d&&\"get\"in d&&null!==(e=d.get(a,b))?e:(e=m.find.attr(a,b),null==e?void 0:e):null!==c?d&&\"set\"in d&&void 0!==(e=d.set(a,c,b))?e:(a.setAttribute(b,c+\"\"),c):void m.removeAttr(a,b))},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(E);if(f&&1===a.nodeType)while(c=f[e++])d=m.propFix[c]||c,m.expr.match.bool.test(c)?rc&&qc||!pc.test(c)?a[d]=!1:a[m.camelCase(\"default-\"+c)]=a[d]=!1:m.attr(a,c,\"\"),a.removeAttribute(qc?c:d)},attrHooks:{type:{set:function(a,b){if(!k.radioValue&&\"radio\"===b&&m.nodeName(a,\"input\")){var c=a.value;return a.setAttribute(\"type\",b),c&&(a.value=c),b}}}}}),nc={set:function(a,b,c){return b===!1?m.removeAttr(a,c):rc&&qc||!pc.test(c)?a.setAttribute(!qc&&m.propFix[c]||c,c):a[m.camelCase(\"default-\"+c)]=a[c]=!0,c}},m.each(m.expr.match.bool.source.match(/\\w+/g),function(a,b){var c=oc[b]||m.find.attr;oc[b]=rc&&qc||!pc.test(b)?function(a,b,d){var e,f;return d||(f=oc[b],oc[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,oc[b]=f),e}:function(a,b,c){return c?void 0:a[m.camelCase(\"default-\"+b)]?b.toLowerCase():null}}),rc&&qc||(m.attrHooks.value={set:function(a,b,c){return m.nodeName(a,\"input\")?void(a.defaultValue=b):mc&&mc.set(a,b,c)}}),qc||(mc={set:function(a,b,c){var d=a.getAttributeNode(c);return d||a.setAttributeNode(d=a.ownerDocument.createAttribute(c)),d.value=b+=\"\",\"value\"===c||b===a.getAttribute(c)?b:void 0}},oc.id=oc.name=oc.coords=function(a,b,c){var d;return c?void 0:(d=a.getAttributeNode(b))&&\"\"!==d.value?d.value:null},m.valHooks.button={get:function(a,b){var c=a.getAttributeNode(b);return c&&c.specified?c.value:void 0},set:mc.set},m.attrHooks.contenteditable={set:function(a,b,c){mc.set(a,\"\"===b?!1:b,c)}},m.each([\"width\",\"height\"],function(a,b){m.attrHooks[b]={set:function(a,c){return\"\"===c?(a.setAttribute(b,\"auto\"),c):void 0}}})),k.style||(m.attrHooks.style={get:function(a){return a.style.cssText||void 0},set:function(a,b){return a.style.cssText=b+\"\"}});var sc=/^(?:input|select|textarea|button|object)$/i,tc=/^(?:a|area)$/i;m.fn.extend({prop:function(a,b){return V(this,m.prop,a,b,arguments.length>1)},removeProp:function(a){return a=m.propFix[a]||a,this.each(function(){try{this[a]=void 0,delete this[a]}catch(b){}})}}),m.extend({propFix:{\"for\":\"htmlFor\",\"class\":\"className\"},prop:function(a,b,c){var d,e,f,g=a.nodeType;if(a&&3!==g&&8!==g&&2!==g)return f=1!==g||!m.isXMLDoc(a),f&&(b=m.propFix[b]||b,e=m.propHooks[b]),void 0!==c?e&&\"set\"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&\"get\"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=m.find.attr(a,\"tabindex\");return b?parseInt(b,10):sc.test(a.nodeName)||tc.test(a.nodeName)&&a.href?0:-1}}}}),k.hrefNormalized||m.each([\"href\",\"src\"],function(a,b){m.propHooks[b]={get:function(a){return a.getAttribute(b,4)}}}),k.optSelected||(m.propHooks.selected={get:function(a){var b=a.parentNode;return b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex),null}}),m.each([\"tabIndex\",\"readOnly\",\"maxLength\",\"cellSpacing\",\"cellPadding\",\"rowSpan\",\"colSpan\",\"useMap\",\"frameBorder\",\"contentEditable\"],function(){m.propFix[this.toLowerCase()]=this}),k.enctype||(m.propFix.enctype=\"encoding\");var uc=/[\\t\\r\\n\\f]/g;m.fn.extend({addClass:function(a){var b,c,d,e,f,g,h=0,i=this.length,j=\"string\"==typeof a&&a;if(m.isFunction(a))return this.each(function(b){m(this).addClass(a.call(this,b,this.className))});if(j)for(b=(a||\"\").match(E)||[];i>h;h++)if(c=this[h],d=1===c.nodeType&&(c.className?(\" \"+c.className+\" \").replace(uc,\" \"):\" \")){f=0;while(e=b[f++])d.indexOf(\" \"+e+\" \")<0&&(d+=e+\" \");g=m.trim(d),c.className!==g&&(c.className=g)}return this},removeClass:function(a){var b,c,d,e,f,g,h=0,i=this.length,j=0===arguments.length||\"string\"==typeof a&&a;if(m.isFunction(a))return this.each(function(b){m(this).removeClass(a.call(this,b,this.className))});if(j)for(b=(a||\"\").match(E)||[];i>h;h++)if(c=this[h],d=1===c.nodeType&&(c.className?(\" \"+c.className+\" \").replace(uc,\" \"):\"\")){f=0;while(e=b[f++])while(d.indexOf(\" \"+e+\" \")>=0)d=d.replace(\" \"+e+\" \",\" \");g=a?m.trim(d):\"\",c.className!==g&&(c.className=g)}return this},toggleClass:function(a,b){var c=typeof a;return\"boolean\"==typeof b&&\"string\"===c?b?this.addClass(a):this.removeClass(a):this.each(m.isFunction(a)?function(c){m(this).toggleClass(a.call(this,c,this.className,b),b)}:function(){if(\"string\"===c){var b,d=0,e=m(this),f=a.match(E)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else(c===K||\"boolean\"===c)&&(this.className&&m._data(this,\"__className__\",this.className),this.className=this.className||a===!1?\"\":m._data(this,\"__className__\")||\"\")})},hasClass:function(a){for(var b=\" \"+a+\" \",c=0,d=this.length;d>c;c++)if(1===this[c].nodeType&&(\" \"+this[c].className+\" \").replace(uc,\" \").indexOf(b)>=0)return!0;return!1}}),m.each(\"blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu\".split(\" \"),function(a,b){m.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),m.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,\"**\"):this.off(b,a||\"**\",c)}});var vc=m.now(),wc=/\\?/,xc=/(,)|(\\[|{)|(}|])|\"(?:[^\"\\\\\\r\\n]|\\\\[\"\\\\\\/bfnrt]|\\\\u[\\da-fA-F]{4})*\"\\s*:?|true|false|null|-?(?!0\\d)\\d+(?:\\.\\d+|)(?:[eE][+-]?\\d+|)/g;m.parseJSON=function(b){if(a.JSON&&a.JSON.parse)return a.JSON.parse(b+\"\");var c,d=null,e=m.trim(b+\"\");return e&&!m.trim(e.replace(xc,function(a,b,e,f){return c&&b&&(d=0),0===d?a:(c=e||b,d+=!f-!e,\"\")}))?Function(\"return \"+e)():m.error(\"Invalid JSON: \"+b)},m.parseXML=function(b){var c,d;if(!b||\"string\"!=typeof b)return null;try{a.DOMParser?(d=new DOMParser,c=d.parseFromString(b,\"text/xml\")):(c=new ActiveXObject(\"Microsoft.XMLDOM\"),c.async=\"false\",c.loadXML(b))}catch(e){c=void 0}return c&&c.documentElement&&!c.getElementsByTagName(\"parsererror\").length||m.error(\"Invalid XML: \"+b),c};var yc,zc,Ac=/#.*$/,Bc=/([?&])_=[^&]*/,Cc=/^(.*?):[ \\t]*([^\\r\\n]*)\\r?$/gm,Dc=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Ec=/^(?:GET|HEAD)$/,Fc=/^\\/\\//,Gc=/^([\\w.+-]+:)(?:\\/\\/(?:[^\\/?#]*@|)([^\\/?#:]*)(?::(\\d+)|)|)/,Hc={},Ic={},Jc=\"*/\".concat(\"*\");try{zc=location.href}catch(Kc){zc=y.createElement(\"a\"),zc.href=\"\",zc=zc.href}yc=Gc.exec(zc.toLowerCase())||[];function Lc(a){return function(b,c){\"string\"!=typeof b&&(c=b,b=\"*\");var d,e=0,f=b.toLowerCase().match(E)||[];if(m.isFunction(c))while(d=f[e++])\"+\"===d.charAt(0)?(d=d.slice(1)||\"*\",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function Mc(a,b,c,d){var e={},f=a===Ic;function g(h){var i;return e[h]=!0,m.each(a[h]||[],function(a,h){var j=h(b,c,d);return\"string\"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e[\"*\"]&&g(\"*\")}function Nc(a,b){var c,d,e=m.ajaxSettings.flatOptions||{};for(d in b)void 0!==b[d]&&((e[d]?a:c||(c={}))[d]=b[d]);return c&&m.extend(!0,a,c),a}function Oc(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while(\"*\"===i[0])i.shift(),void 0===e&&(e=a.mimeType||b.getResponseHeader(\"Content-Type\"));if(e)for(g in h)if(h[g]&&h[g].test(e)){i.unshift(g);break}if(i[0]in c)f=i[0];else{for(g in c){if(!i[0]||a.converters[g+\" \"+i[0]]){f=g;break}d||(d=g)}f=f||d}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function Pc(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if(\"*\"===f)f=i;else if(\"*\"!==i&&i!==f){if(g=j[i+\" \"+f]||j[\"* \"+f],!g)for(e in j)if(h=e.split(\" \"),h[1]===f&&(g=j[i+\" \"+h[0]]||j[\"* \"+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a[\"throws\"])b=g(b);else try{b=g(b)}catch(l){return{state:\"parsererror\",error:g?l:\"No conversion from \"+i+\" to \"+f}}}return{state:\"success\",data:b}}m.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:zc,type:\"GET\",isLocal:Dc.test(yc[1]),global:!0,processData:!0,async:!0,contentType:\"application/x-www-form-urlencoded; charset=UTF-8\",accepts:{\"*\":Jc,text:\"text/plain\",html:\"text/html\",xml:\"application/xml, text/xml\",json:\"application/json, text/javascript\"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:\"responseXML\",text:\"responseText\",json:\"responseJSON\"},converters:{\"* text\":String,\"text html\":!0,\"text json\":m.parseJSON,\"text xml\":m.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?Nc(Nc(a,m.ajaxSettings),b):Nc(m.ajaxSettings,a)},ajaxPrefilter:Lc(Hc),ajaxTransport:Lc(Ic),ajax:function(a,b){\"object\"==typeof a&&(b=a,a=void 0),b=b||{};var c,d,e,f,g,h,i,j,k=m.ajaxSetup({},b),l=k.context||k,n=k.context&&(l.nodeType||l.jquery)?m(l):m.event,o=m.Deferred(),p=m.Callbacks(\"once memory\"),q=k.statusCode||{},r={},s={},t=0,u=\"canceled\",v={readyState:0,getResponseHeader:function(a){var b;if(2===t){if(!j){j={};while(b=Cc.exec(f))j[b[1].toLowerCase()]=b[2]}b=j[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===t?f:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return t||(a=s[c]=s[c]||a,r[a]=b),this},overrideMimeType:function(a){return t||(k.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>t)for(b in a)q[b]=[q[b],a[b]];else v.always(a[v.status]);return this},abort:function(a){var b=a||u;return i&&i.abort(b),x(0,b),this}};if(o.promise(v).complete=p.add,v.success=v.done,v.error=v.fail,k.url=((a||k.url||zc)+\"\").replace(Ac,\"\").replace(Fc,yc[1]+\"//\"),k.type=b.method||b.type||k.method||k.type,k.dataTypes=m.trim(k.dataType||\"*\").toLowerCase().match(E)||[\"\"],null==k.crossDomain&&(c=Gc.exec(k.url.toLowerCase()),k.crossDomain=!(!c||c[1]===yc[1]&&c[2]===yc[2]&&(c[3]||(\"http:\"===c[1]?\"80\":\"443\"))===(yc[3]||(\"http:\"===yc[1]?\"80\":\"443\")))),k.data&&k.processData&&\"string\"!=typeof k.data&&(k.data=m.param(k.data,k.traditional)),Mc(Hc,k,b,v),2===t)return v;h=k.global,h&&0===m.active++&&m.event.trigger(\"ajaxStart\"),k.type=k.type.toUpperCase(),k.hasContent=!Ec.test(k.type),e=k.url,k.hasContent||(k.data&&(e=k.url+=(wc.test(e)?\"&\":\"?\")+k.data,delete k.data),k.cache===!1&&(k.url=Bc.test(e)?e.replace(Bc,\"$1_=\"+vc++):e+(wc.test(e)?\"&\":\"?\")+\"_=\"+vc++)),k.ifModified&&(m.lastModified[e]&&v.setRequestHeader(\"If-Modified-Since\",m.lastModified[e]),m.etag[e]&&v.setRequestHeader(\"If-None-Match\",m.etag[e])),(k.data&&k.hasContent&&k.contentType!==!1||b.contentType)&&v.setRequestHeader(\"Content-Type\",k.contentType),v.setRequestHeader(\"Accept\",k.dataTypes[0]&&k.accepts[k.dataTypes[0]]?k.accepts[k.dataTypes[0]]+(\"*\"!==k.dataTypes[0]?\", \"+Jc+\"; q=0.01\":\"\"):k.accepts[\"*\"]);for(d in k.headers)v.setRequestHeader(d,k.headers[d]);if(k.beforeSend&&(k.beforeSend.call(l,v,k)===!1||2===t))return v.abort();u=\"abort\";for(d in{success:1,error:1,complete:1})v[d](k[d]);if(i=Mc(Ic,k,b,v)){v.readyState=1,h&&n.trigger(\"ajaxSend\",[v,k]),k.async&&k.timeout>0&&(g=setTimeout(function(){v.abort(\"timeout\")},k.timeout));try{t=1,i.send(r,x)}catch(w){if(!(2>t))throw w;x(-1,w)}}else x(-1,\"No Transport\");function x(a,b,c,d){var j,r,s,u,w,x=b;2!==t&&(t=2,g&&clearTimeout(g),i=void 0,f=d||\"\",v.readyState=a>0?4:0,j=a>=200&&300>a||304===a,c&&(u=Oc(k,v,c)),u=Pc(k,u,v,j),j?(k.ifModified&&(w=v.getResponseHeader(\"Last-Modified\"),w&&(m.lastModified[e]=w),w=v.getResponseHeader(\"etag\"),w&&(m.etag[e]=w)),204===a||\"HEAD\"===k.type?x=\"nocontent\":304===a?x=\"notmodified\":(x=u.state,r=u.data,s=u.error,j=!s)):(s=x,(a||!x)&&(x=\"error\",0>a&&(a=0))),v.status=a,v.statusText=(b||x)+\"\",j?o.resolveWith(l,[r,x,v]):o.rejectWith(l,[v,x,s]),v.statusCode(q),q=void 0,h&&n.trigger(j?\"ajaxSuccess\":\"ajaxError\",[v,k,j?r:s]),p.fireWith(l,[v,x]),h&&(n.trigger(\"ajaxComplete\",[v,k]),--m.active||m.event.trigger(\"ajaxStop\")))}return v},getJSON:function(a,b,c){return m.get(a,b,c,\"json\")},getScript:function(a,b){return m.get(a,void 0,b,\"script\")}}),m.each([\"get\",\"post\"],function(a,b){m[b]=function(a,c,d,e){return m.isFunction(c)&&(e=e||d,d=c,c=void 0),m.ajax({url:a,type:b,dataType:e,data:c,success:d})}}),m.each([\"ajaxStart\",\"ajaxStop\",\"ajaxComplete\",\"ajaxError\",\"ajaxSuccess\",\"ajaxSend\"],function(a,b){m.fn[b]=function(a){return this.on(b,a)}}),m._evalUrl=function(a){return m.ajax({url:a,type:\"GET\",dataType:\"script\",async:!1,global:!1,\"throws\":!0})},m.fn.extend({wrapAll:function(a){if(m.isFunction(a))return this.each(function(b){m(this).wrapAll(a.call(this,b))});if(this[0]){var b=m(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&1===a.firstChild.nodeType)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){return this.each(m.isFunction(a)?function(b){m(this).wrapInner(a.call(this,b))}:function(){var b=m(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=m.isFunction(a);return this.each(function(c){m(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){m.nodeName(this,\"body\")||m(this).replaceWith(this.childNodes)}).end()}}),m.expr.filters.hidden=function(a){return a.offsetWidth<=0&&a.offsetHeight<=0||!k.reliableHiddenOffsets()&&\"none\"===(a.style&&a.style.display||m.css(a,\"display\"))},m.expr.filters.visible=function(a){return!m.expr.filters.hidden(a)};var Qc=/%20/g,Rc=/\\[\\]$/,Sc=/\\r?\\n/g,Tc=/^(?:submit|button|image|reset|file)$/i,Uc=/^(?:input|select|textarea|keygen)/i;function Vc(a,b,c,d){var e;if(m.isArray(b))m.each(b,function(b,e){c||Rc.test(a)?d(a,e):Vc(a+\"[\"+(\"object\"==typeof e?b:\"\")+\"]\",e,c,d)});else if(c||\"object\"!==m.type(b))d(a,b);else for(e in b)Vc(a+\"[\"+e+\"]\",b[e],c,d)}m.param=function(a,b){var c,d=[],e=function(a,b){b=m.isFunction(b)?b():null==b?\"\":b,d[d.length]=encodeURIComponent(a)+\"=\"+encodeURIComponent(b)};if(void 0===b&&(b=m.ajaxSettings&&m.ajaxSettings.traditional),m.isArray(a)||a.jquery&&!m.isPlainObject(a))m.each(a,function(){e(this.name,this.value)});else for(c in a)Vc(c,a[c],b,e);return d.join(\"&\").replace(Qc,\"+\")},m.fn.extend({serialize:function(){return m.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=m.prop(this,\"elements\");return a?m.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!m(this).is(\":disabled\")&&Uc.test(this.nodeName)&&!Tc.test(a)&&(this.checked||!W.test(a))}).map(function(a,b){var c=m(this).val();return null==c?null:m.isArray(c)?m.map(c,function(a){return{name:b.name,value:a.replace(Sc,\"\\r\\n\")}}):{name:b.name,value:c.replace(Sc,\"\\r\\n\")}}).get()}}),m.ajaxSettings.xhr=void 0!==a.ActiveXObject?function(){return!this.isLocal&&/^(get|post|head|put|delete|options)$/i.test(this.type)&&Zc()||$c()}:Zc;var Wc=0,Xc={},Yc=m.ajaxSettings.xhr();a.ActiveXObject&&m(a).on(\"unload\",function(){for(var a in Xc)Xc[a](void 0,!0)}),k.cors=!!Yc&&\"withCredentials\"in Yc,Yc=k.ajax=!!Yc,Yc&&m.ajaxTransport(function(a){if(!a.crossDomain||k.cors){var b;return{send:function(c,d){var e,f=a.xhr(),g=++Wc;if(f.open(a.type,a.url,a.async,a.username,a.password),a.xhrFields)for(e in a.xhrFields)f[e]=a.xhrFields[e];a.mimeType&&f.overrideMimeType&&f.overrideMimeType(a.mimeType),a.crossDomain||c[\"X-Requested-With\"]||(c[\"X-Requested-With\"]=\"XMLHttpRequest\");for(e in c)void 0!==c[e]&&f.setRequestHeader(e,c[e]+\"\");f.send(a.hasContent&&a.data||null),b=function(c,e){var h,i,j;if(b&&(e||4===f.readyState))if(delete Xc[g],b=void 0,f.onreadystatechange=m.noop,e)4!==f.readyState&&f.abort();else{j={},h=f.status,\"string\"==typeof f.responseText&&(j.text=f.responseText);try{i=f.statusText}catch(k){i=\"\"}h||!a.isLocal||a.crossDomain?1223===h&&(h=204):h=j.text?200:404}j&&d(h,i,j,f.getAllResponseHeaders())},a.async?4===f.readyState?setTimeout(b):f.onreadystatechange=Xc[g]=b:b()},abort:function(){b&&b(void 0,!0)}}}});function Zc(){try{return new a.XMLHttpRequest}catch(b){}}function $c(){try{return new a.ActiveXObject(\"Microsoft.XMLHTTP\")}catch(b){}}m.ajaxSetup({accepts:{script:\"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"},contents:{script:/(?:java|ecma)script/},converters:{\"text script\":function(a){return m.globalEval(a),a}}}),m.ajaxPrefilter(\"script\",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type=\"GET\",a.global=!1)}),m.ajaxTransport(\"script\",function(a){if(a.crossDomain){var b,c=y.head||m(\"head\")[0]||y.documentElement;return{send:function(d,e){b=y.createElement(\"script\"),b.async=!0,a.scriptCharset&&(b.charset=a.scriptCharset),b.src=a.url,b.onload=b.onreadystatechange=function(a,c){(c||!b.readyState||/loaded|complete/.test(b.readyState))&&(b.onload=b.onreadystatechange=null,b.parentNode&&b.parentNode.removeChild(b),b=null,c||e(200,\"success\"))},c.insertBefore(b,c.firstChild)},abort:function(){b&&b.onload(void 0,!0)}}}});var _c=[],ad=/(=)\\?(?=&|$)|\\?\\?/;m.ajaxSetup({jsonp:\"callback\",jsonpCallback:function(){var a=_c.pop()||m.expando+\"_\"+vc++;return this[a]=!0,a}}),m.ajaxPrefilter(\"json jsonp\",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(ad.test(b.url)?\"url\":\"string\"==typeof b.data&&!(b.contentType||\"\").indexOf(\"application/x-www-form-urlencoded\")&&ad.test(b.data)&&\"data\");return h||\"jsonp\"===b.dataTypes[0]?(e=b.jsonpCallback=m.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(ad,\"$1\"+e):b.jsonp!==!1&&(b.url+=(wc.test(b.url)?\"&\":\"?\")+b.jsonp+\"=\"+e),b.converters[\"script json\"]=function(){return g||m.error(e+\" was not called\"),g[0]},b.dataTypes[0]=\"json\",f=a[e],a[e]=function(){g=arguments},d.always(function(){a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,_c.push(e)),g&&m.isFunction(f)&&f(g[0]),g=f=void 0}),\"script\"):void 0}),m.parseHTML=function(a,b,c){if(!a||\"string\"!=typeof a)return null;\"boolean\"==typeof b&&(c=b,b=!1),b=b||y;var d=u.exec(a),e=!c&&[];return d?[b.createElement(d[1])]:(d=m.buildFragment([a],b,e),e&&e.length&&m(e).remove(),m.merge([],d.childNodes))};var bd=m.fn.load;m.fn.load=function(a,b,c){if(\"string\"!=typeof a&&bd)return bd.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(\" \");return h>=0&&(d=m.trim(a.slice(h,a.length)),a=a.slice(0,h)),m.isFunction(b)?(c=b,b=void 0):b&&\"object\"==typeof b&&(f=\"POST\"),g.length>0&&m.ajax({url:a,type:f,dataType:\"html\",data:b}).done(function(a){e=arguments,g.html(d?m(\"<div>\").append(m.parseHTML(a)).find(d):a)}).complete(c&&function(a,b){g.each(c,e||[a.responseText,b,a])}),this},m.expr.filters.animated=function(a){return m.grep(m.timers,function(b){return a===b.elem}).length};var cd=a.document.documentElement;function dd(a){return m.isWindow(a)?a:9===a.nodeType?a.defaultView||a.parentWindow:!1}m.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=m.css(a,\"position\"),l=m(a),n={};\"static\"===k&&(a.style.position=\"relative\"),h=l.offset(),f=m.css(a,\"top\"),i=m.css(a,\"left\"),j=(\"absolute\"===k||\"fixed\"===k)&&m.inArray(\"auto\",[f,i])>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),m.isFunction(b)&&(b=b.call(a,c,h)),null!=b.top&&(n.top=b.top-h.top+g),null!=b.left&&(n.left=b.left-h.left+e),\"using\"in b?b.using.call(a,n):l.css(n)}},m.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){m.offset.setOffset(this,a,b)});var b,c,d={top:0,left:0},e=this[0],f=e&&e.ownerDocument;if(f)return b=f.documentElement,m.contains(b,e)?(typeof e.getBoundingClientRect!==K&&(d=e.getBoundingClientRect()),c=dd(f),{top:d.top+(c.pageYOffset||b.scrollTop)-(b.clientTop||0),left:d.left+(c.pageXOffset||b.scrollLeft)-(b.clientLeft||0)}):d},position:function(){if(this[0]){var a,b,c={top:0,left:0},d=this[0];return\"fixed\"===m.css(d,\"position\")?b=d.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),m.nodeName(a[0],\"html\")||(c=a.offset()),c.top+=m.css(a[0],\"borderTopWidth\",!0),c.left+=m.css(a[0],\"borderLeftWidth\",!0)),{top:b.top-c.top-m.css(d,\"marginTop\",!0),left:b.left-c.left-m.css(d,\"marginLeft\",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||cd;while(a&&!m.nodeName(a,\"html\")&&\"static\"===m.css(a,\"position\"))a=a.offsetParent;return a||cd})}}),m.each({scrollLeft:\"pageXOffset\",scrollTop:\"pageYOffset\"},function(a,b){var c=/Y/.test(b);m.fn[a]=function(d){return V(this,function(a,d,e){var f=dd(a);return void 0===e?f?b in f?f[b]:f.document.documentElement[d]:a[d]:void(f?f.scrollTo(c?m(f).scrollLeft():e,c?e:m(f).scrollTop()):a[d]=e)},a,d,arguments.length,null)}}),m.each([\"top\",\"left\"],function(a,b){m.cssHooks[b]=Lb(k.pixelPosition,function(a,c){return c?(c=Jb(a,b),Hb.test(c)?m(a).position()[b]+\"px\":c):void 0})}),m.each({Height:\"height\",Width:\"width\"},function(a,b){m.each({padding:\"inner\"+a,content:b,\"\":\"outer\"+a},function(c,d){m.fn[d]=function(d,e){var f=arguments.length&&(c||\"boolean\"!=typeof d),g=c||(d===!0||e===!0?\"margin\":\"border\");return V(this,function(b,c,d){var e;return m.isWindow(b)?b.document.documentElement[\"client\"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body[\"scroll\"+a],e[\"scroll\"+a],b.body[\"offset\"+a],e[\"offset\"+a],e[\"client\"+a])):void 0===d?m.css(b,c,g):m.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),m.fn.size=function(){return this.length},m.fn.andSelf=m.fn.addBack,\"function\"==typeof define&&define.amd&&define(\"jquery\",[],function(){return m});var ed=a.jQuery,fd=a.$;return m.noConflict=function(b){return a.$===m&&(a.$=fd),b&&a.jQuery===m&&(a.jQuery=ed),m},typeof b===K&&(a.jQuery=a.$=m),m});\n+//# sourceMappingURL=jquery.min.map\n\\ No newline at end of file\n",
          "old_path": "flights-app/resources/js/jquery.min.js",
          "new_path": "flights-app/resources/js/jquery.min.js",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "61e708eb"
        },
        {
          "diff": "@@ -20,12 +20,12 @@ public class WebApp {\n \n   public static void main(String[] args) throws Exception {\n \n-    Server server = new Server(8082);\n+    Server server = new Server(8080);\n     ServletContextHandler handler = new ServletContextHandler();\n \n     DispatcherServlet servlet = new DispatcherServlet(Resource.class)\n-        .addFileMapping(\"/\", new File(\"/Users/pogorelov/Development/Projects/DanIT/course-projects/fs1/Flights/flights-app/resources/index.html\"))\n-        .addFileMapping(\"/bootstrap.css\", new File(\"/Users/pogorelov/Development/Projects/DanIT/course-projects/fs1/Flights/flights-app/resources/bootstrap.min.css\"));\n+        .addFileMapping(\"/\", new File(\"flights-app/resources/index.html\"))\n+        .addFileMapping(\"/bootstrap.css\", new File(\"flights-app/resources/bootstrap.min.css\"));\n \n     servlet.addResource(FlightResource.class);\n \n",
          "old_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "61e708eb"
        }
      ]
    },
    {
      "id": "9fea5a19e7b2e355bb5b98ce0aa8bfdc6d26240e",
      "project_id": 4888518,
      "message": "update\n",
      "title": "update",
      "short_id": "9fea5a19",
      "author_name": "Maxim Pogorelov",
      "branches": null,
      "created_at": "2017-12-27T19:21:48Z",
      "diffs": [
        {
          "diff": "@@ -1,20 +1,24 @@\n <!DOCTYPE html>\n <html>\n <head>\n-  <title>Flights Search</title>\n-  <link rel=\"stylesheet\" href=\"/bootstrap.css\" type=\"text/css\">\n+    <title>Flights Search</title>\n+    <link rel=\"stylesheet\" href=\"/bootstrap.css\" type=\"text/css\">\n </head>\n <body>\n \n <div class=\"container\">\n \n-  <div class=\"jumbotron centered\">\n-    <h1>Flights Search</h1>\n-    <p class=\"lead\">Find all tickets in one place.</p>\n-    <p>\n-      <a class=\"btn btn-lg btn-success\" href=\"#\" role=\"button\">Sign up today</a>\n-    </p>\n-  </div>\n+    <div class=\"jumbotron centered\">\n+        <h1>Flights Search</h1>\n+        <p class=\"lead\">Find all tickets in one place.</p>\n+        <p>\n+            <a class=\"btn btn-lg btn-success\" href=\"#\" role=\"button\">Sign up today</a>\n+        </p>\n+    </div>\n </div>\n+\n+<script>\n+\n+</script>\n </body>\n </html>\n\\ No newline at end of file\n",
          "old_path": "flights-app/resources/index.html",
          "new_path": "flights-app/resources/index.html",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "9fea5a19"
        },
        {
          "diff": "@@ -27,4 +27,6 @@ public class FlightResource {\n     ObjectMapper mapper = new ObjectMapper();\n     return mapper.writeValueAsString(flights);\n   }\n+\n+  //Get By Id\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/resources/FlightResource.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/resources/FlightResource.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "9fea5a19"
        }
      ]
    },
    {
      "id": "0bb51a2197ab59123c4e17d0076a4bee0074ed59",
      "project_id": 4888518,
      "message": "Merge remote-tracking branch 'origin/master'\n",
      "title": "Merge remote-tracking branch 'origin/master'",
      "short_id": "0bb51a21",
      "author_name": "Maxim Pogorelov",
      "branches": null,
      "created_at": "2017-12-27T19:14:04Z",
      "diffs": [
        {
          "diff": "@@ -1,16 +1,8 @@\n \n-CREATE TABLE IF NOT EXISTS FLIGHTS (\n+CREATE TABLE  IF NOT EXISTS FLIGHTS (\n   `ID` BIGINT PRIMARY KEY AUTO_INCREMENT,\n   `DEPARTURE_TIME` BIGINT NOT NULL,\n   `FROM` VARCHAR(255) NOT NULL ,\n   `TO` VARCHAR(255) NOT NULL,\n   `ARRIVAL_TIME` BIGINT NOT NULL\n-);\n-\n-CREATE TABLE IF NOT EXISTS TICKETS\n-(\n-  \"IS\" BOOLEAN DEFAULT TRUE ,\n-  ID BIGINT PRIMARY KEY ,\n-  \"FROM\" VARCHAR(255) NOT NULL,\n-  TO VARCHAR(255) NOT NULL\n );\n\\ No newline at end of file\n",
          "old_path": "flights-app/resources/schema.sql",
          "new_path": "flights-app/resources/schema.sql",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "0bb51a21"
        }
      ]
    },
    {
      "id": "f003d727f909abdb0970f9b33fbedb9f51430507",
      "project_id": 4888518,
      "message": "Handle rest /flights/top\n",
      "title": "Handle rest /flights/top",
      "short_id": "f003d727",
      "author_name": "Maxim Pogorelov",
      "branches": null,
      "created_at": "2017-12-27T19:11:32Z",
      "diffs": [
        {
          "diff": "@@ -20,16 +20,16 @@ public class WebApp {\n \n   public static void main(String[] args) throws Exception {\n \n-    Server server = new Server(8080);\n+    Server server = new Server(8082);\n     ServletContextHandler handler = new ServletContextHandler();\n \n     DispatcherServlet servlet = new DispatcherServlet(Resource.class)\n-        .addFileMapping(\"/\", new File(\"flights-app/resources/index.html\"))\n-        .addFileMapping(\"/bootstrap.css\", new File(\"flights-app/resources/bootstrap.min.css\"));\n+        .addFileMapping(\"/\", new File(\"/Users/pogorelov/Development/Projects/DanIT/course-projects/fs1/Flights/flights-app/resources/index.html\"))\n+        .addFileMapping(\"/bootstrap.css\", new File(\"/Users/pogorelov/Development/Projects/DanIT/course-projects/fs1/Flights/flights-app/resources/bootstrap.min.css\"));\n \n-    handler.addServlet(new ServletHolder(servlet), \"/*\");\n+    servlet.addResource(FlightResource.class);\n \n-//    handler.addServlet(new ServletHolder(servlet), \"/\");\n+    handler.addServlet(new ServletHolder(servlet), \"/*\");\n \n     LoginServlet loginServlet = new LoginServlet();\n     handler.addServlet(new ServletHolder(loginServlet), \"/login\");\n@@ -39,8 +39,8 @@ public class WebApp {\n     server.join();\n   }\n \n-  public static void main0(String[] args) throws IOException {\n-    String flights = new FlightResource(new FlightDao()).getTopFlights();\n-    System.out.println(flights);\n+  public static void main1(String[] args) throws IOException {\n+//    String flights = new FlightResource(new FlightDao()).getTopFlights();\n+//    System.out.println(flights);\n   }\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "f003d727"
        },
        {
          "diff": "@@ -4,6 +4,7 @@ import org.codehaus.jackson.map.ObjectMapper;\n import ua.danit.application.dao.FlightDao;\n import ua.danit.application.model.Flight;\n \n+import javax.ws.rs.GET;\n import javax.ws.rs.Path;\n import java.io.IOException;\n \n@@ -11,12 +12,17 @@ public class FlightResource {\n \n   private FlightDao flightDao;\n \n-  public FlightResource(FlightDao flightDao) {\n-    this.flightDao = flightDao;\n-  }\n+//  public FlightResource(FlightDao flightDao) {\n+//    this.flightDao = flightDao;\n+//  }\n \n   @Path(\"/flights/top\")\n+  @GET\n   public String getTopFlights() throws IOException {\n+    if (flightDao == null) {\n+      flightDao = new FlightDao();\n+    }\n+\n     Iterable<Flight> flights = flightDao.getTopFlight(5);\n     ObjectMapper mapper = new ObjectMapper();\n     return mapper.writeValueAsString(flights);\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/resources/FlightResource.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/resources/FlightResource.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "f003d727"
        },
        {
          "diff": "@@ -14,7 +14,9 @@ import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n import javax.ws.rs.QueryParam;\n \n+import com.google.common.base.Charsets;\n import com.google.common.collect.Maps;\n+import com.google.common.io.Files;\n import ua.danit.framework.invocations.Invocation;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n@@ -37,6 +39,11 @@ public class DispatcherServlet extends HttpServlet {\n     }\n   }\n \n+  public void addResource(Class<?> rClass) {\n+    this.resources.putAll(Parser.getClassInvocations(rClass));\n+  }\n+\n+\n   @Override\n   protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n       throws ServletException, IOException {\n@@ -60,8 +67,11 @@ public class DispatcherServlet extends HttpServlet {\n \n       Invocation invoc = resources.get(uri);\n \n-      if (canHandleGetMethod(invoc)) {\n+      if (resources.containsKey(uri) && canHandleGetMethod(invoc)) {\n         handleMethod(req, resp, invoc);\n+      } else if (files.containsKey(uri)) {\n+        File file = files.get(uri);\n+        resp.getWriter().write(Files.toString(file, Charsets.UTF_8));\n       } else {\n         resp.sendError(404);\n       }\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "f003d727"
        }
      ]
    },
    {
      "id": "d8809a48f233786f8ca7d616c0ba903ed6b825d7",
      "project_id": 4888518,
      "message": "Revert \"modified schema.sql to create TICKETS table\"\n\nThis reverts commit c2da16f\n",
      "title": "Revert \"modified schema.sql to create TICKETS table\"",
      "short_id": "d8809a48",
      "author_name": "full.iron",
      "branches": null,
      "created_at": "2017-12-27T18:06:20Z",
      "diffs": [
        {
          "diff": "@@ -1,16 +1,8 @@\n \n-CREATE TABLE IF NOT EXISTS FLIGHTS (\n+CREATE TABLE  IF NOT EXISTS FLIGHTS (\n   `ID` BIGINT PRIMARY KEY AUTO_INCREMENT,\n   `DEPARTURE_TIME` BIGINT NOT NULL,\n   `FROM` VARCHAR(255) NOT NULL ,\n   `TO` VARCHAR(255) NOT NULL,\n   `ARRIVAL_TIME` BIGINT NOT NULL\n-);\n-\n-CREATE TABLE IF NOT EXISTS TICKETS\n-(\n-  \"IS\" BOOLEAN DEFAULT TRUE ,\n-  ID BIGINT PRIMARY KEY ,\n-  \"FROM\" VARCHAR(255) NOT NULL,\n-  TO VARCHAR(255) NOT NULL\n );\n\\ No newline at end of file\n",
          "old_path": "flights-app/resources/schema.sql",
          "new_path": "flights-app/resources/schema.sql",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "d8809a48"
        }
      ]
    },
    {
      "id": "c2da16fcc7554f5d0673e4136fe661873c8c21d1",
      "project_id": 4888518,
      "message": "modified schema.sql to create TICKETS table\n",
      "title": "modified schema.sql to create TICKETS table",
      "short_id": "c2da16fc",
      "author_name": "full.iron",
      "branches": null,
      "created_at": "2017-12-27T18:04:26Z",
      "diffs": [
        {
          "diff": "@@ -1,8 +1,16 @@\n \n-CREATE TABLE  IF NOT EXISTS FLIGHTS (\n+CREATE TABLE IF NOT EXISTS FLIGHTS (\n   `ID` BIGINT PRIMARY KEY AUTO_INCREMENT,\n   `DEPARTURE_TIME` BIGINT NOT NULL,\n   `FROM` VARCHAR(255) NOT NULL ,\n   `TO` VARCHAR(255) NOT NULL,\n   `ARRIVAL_TIME` BIGINT NOT NULL\n+);\n+\n+CREATE TABLE IF NOT EXISTS TICKETS\n+(\n+  \"IS\" BOOLEAN DEFAULT TRUE ,\n+  ID BIGINT PRIMARY KEY ,\n+  \"FROM\" VARCHAR(255) NOT NULL,\n+  TO VARCHAR(255) NOT NULL\n );\n\\ No newline at end of file\n",
          "old_path": "flights-app/resources/schema.sql",
          "new_path": "flights-app/resources/schema.sql",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c2da16fc"
        }
      ]
    },
    {
      "id": "2033c615b522237b7ca7510c76dd680598925532",
      "project_id": 4888518,
      "message": "working\n",
      "title": "working",
      "short_id": "2033c615",
      "author_name": "Gryhoriev Mykhailo",
      "branches": null,
      "created_at": "2017-12-27T17:52:59Z",
      "diffs": [
        {
          "diff": "@@ -18,7 +18,7 @@ public class WebApp {\n    * creates a server, creates a handler, parser classes\n    */\n \n-  public static void main0(String[] args) throws Exception {\n+  public static void main(String[] args) throws Exception {\n \n     Server server = new Server(8080);\n     ServletContextHandler handler = new ServletContextHandler();\n@@ -29,7 +29,7 @@ public class WebApp {\n \n     handler.addServlet(new ServletHolder(servlet), \"/*\");\n \n-    handler.addServlet(new ServletHolder(servlet), \"/\");\n+//    handler.addServlet(new ServletHolder(servlet), \"/\");\n \n     LoginServlet loginServlet = new LoginServlet();\n     handler.addServlet(new ServletHolder(loginServlet), \"/login\");\n@@ -39,7 +39,7 @@ public class WebApp {\n     server.join();\n   }\n \n-  public static void main(String[] args) throws IOException {\n+  public static void main0(String[] args) throws IOException {\n     String flights = new FlightResource(new FlightDao()).getTopFlights();\n     System.out.println(flights);\n   }\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "2033c615"
        },
        {
          "diff": "@@ -1,5 +1,6 @@\n package ua.danit.framework;\n \n+import java.io.File;\n import java.io.IOException;\n import java.util.HashMap;\n import java.util.Map;\n@@ -13,12 +14,17 @@ import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n import javax.ws.rs.QueryParam;\n \n+import com.google.common.collect.Maps;\n import ua.danit.framework.invocations.Invocation;\n \n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n \n public class DispatcherServlet extends HttpServlet {\n \n   Map<String, Invocation> resources = new HashMap<>();\n+  Map<String, File> files = Maps.newHashMap();\n \n   /**\n    * DispatcherServlet.\n@@ -107,4 +113,14 @@ public class DispatcherServlet extends HttpServlet {\n     return req.getQueryString() != null;\n   }\n \n+  public DispatcherServlet addFileMapping(String url, File file) {\n+    checkNotNull(url, \"URL is Null.\");\n+    checkNotNull(file, \"FILE is Null.\");\n+    String message = String.format(\"File [%s] doest not exist.\", file.getAbsolutePath());\n+    checkState(file.exists(), message);\n+    files.put(url, file);\n+    return this;\n+  }\n+\n+\n }\n\\ No newline at end of file\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "2033c615"
        }
      ]
    },
    {
      "id": "a0ddd5533a7ba674d9e11ec0f5db328e0936b1dd",
      "project_id": 4888518,
      "message": "updated\n",
      "title": "updated",
      "short_id": "a0ddd553",
      "author_name": "Gryhoriev Mykhailo",
      "branches": null,
      "created_at": "2017-12-27T17:46:24Z",
      "diffs": [
        {
          "diff": "@@ -29,7 +29,6 @@ public class WebApp {\n \n     handler.addServlet(new ServletHolder(servlet), \"/*\");\n \n-    DispatcherServlet servlet = new DispatcherServlet(Resource.class);\n     handler.addServlet(new ServletHolder(servlet), \"/\");\n \n     LoginServlet loginServlet = new LoginServlet();\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "a0ddd553"
        }
      ]
    },
    {
      "id": "62b289a1bfa5fa5d218bf195b450dcab4af492fc",
      "project_id": 4888518,
      "message": "Merge branch '46-implement-end-to-end-flight-service'\n\n# Conflicts:\n#\tflights-app/src/main/java/ua/danit/application/WebApp.java\n",
      "title": "Merge branch '46-implement-end-to-end-flight-service'",
      "short_id": "62b289a1",
      "author_name": "Gryhoriev Mykhailo",
      "branches": null,
      "created_at": "2017-12-27T17:43:18Z",
      "diffs": [
        {
          "diff": "@@ -21,6 +21,18 @@\n     </properties>\n \n     <dependencies>\n+        <dependency>\n+            <groupId>org.codehaus.jackson</groupId>\n+            <artifactId>jackson-mapper-asl</artifactId>\n+            <version>1.9.13</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>mysql</groupId>\n+            <artifactId>mysql-connector-java</artifactId>\n+            <version>8.0.8-dmr</version>\n+        </dependency>\n+\n         <!--  javax.ws.rs.core e.g. Request -->\n         <dependency>\n           <groupId>javax.ws.rs</groupId>\n",
          "old_path": "flights-app/pom.xml",
          "new_path": "flights-app/pom.xml",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "62b289a1"
        },
        {
          "diff": "@@ -0,0 +1,8 @@\n+\n+CREATE TABLE  IF NOT EXISTS FLIGHTS (\n+  `ID` BIGINT PRIMARY KEY AUTO_INCREMENT,\n+  `DEPARTURE_TIME` BIGINT NOT NULL,\n+  `FROM` VARCHAR(255) NOT NULL ,\n+  `TO` VARCHAR(255) NOT NULL,\n+  `ARRIVAL_TIME` BIGINT NOT NULL\n+);\n\\ No newline at end of file\n",
          "old_path": "flights-app/resources/schema.sql",
          "new_path": "flights-app/resources/schema.sql",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "62b289a1"
        },
        {
          "diff": "@@ -1,9 +1,9 @@\n package ua.danit.application;\n \n-import javax.ws.rs.GET;\n-import javax.ws.rs.POST;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.QueryParam;\n+import javax.ws.rs.*;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n \n public class Resource {\n   public static final String HTML_TEMPLATE = \"<!DOCTYPE html>\\n\"\n@@ -13,11 +13,11 @@ public class Resource {\n   @Path(\"/weather\")\n   @GET\n   public String getWeather() {\n-    return sendResponse(\"Today weather is cool isn't\");\n+    return sendResponse(\"The weather is cool today. Isn't it?\");\n   }\n \n-  @Path(\"/flights\")\n   @GET\n+  @Path(\"/flights\")\n   public String getFlights() {\n     return sendResponse(\"Today all routes closed\");\n   }\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "62b289a1"
        },
        {
          "diff": "@@ -1,8 +1,13 @@\n package ua.danit.application;\n \n+import java.io.File;\n+import java.io.IOException;\n+\n import org.eclipse.jetty.server.Server;\n import org.eclipse.jetty.servlet.ServletContextHandler;\n import org.eclipse.jetty.servlet.ServletHolder;\n+import ua.danit.application.dao.FlightDao;\n+import ua.danit.application.resources.FlightResource;\n import ua.danit.framework.DispatcherServlet;\n import ua.danit.framework.LoginServlet;\n \n@@ -13,11 +18,17 @@ public class WebApp {\n    * creates a server, creates a handler, parser classes\n    */\n \n-  public static void main(String[] args) throws Exception {\n+  public static void main0(String[] args) throws Exception {\n \n     Server server = new Server(8080);\n     ServletContextHandler handler = new ServletContextHandler();\n \n+    DispatcherServlet servlet = new DispatcherServlet(Resource.class)\n+        .addFileMapping(\"/\", new File(\"flights-app/resources/index.html\"))\n+        .addFileMapping(\"/bootstrap.css\", new File(\"flights-app/resources/bootstrap.min.css\"));\n+\n+    handler.addServlet(new ServletHolder(servlet), \"/*\");\n+\n     DispatcherServlet servlet = new DispatcherServlet(Resource.class);\n     handler.addServlet(new ServletHolder(servlet), \"/\");\n \n@@ -28,4 +39,9 @@ public class WebApp {\n     server.start();\n     server.join();\n   }\n+\n+  public static void main(String[] args) throws IOException {\n+    String flights = new FlightResource(new FlightDao()).getTopFlights();\n+    System.out.println(flights);\n+  }\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "62b289a1"
        },
        {
          "diff": "@@ -0,0 +1,48 @@\n+package ua.danit.application.dao;\n+\n+import com.google.common.collect.Lists;\n+import ua.danit.application.model.Flight;\n+\n+import java.sql.*;\n+import java.util.List;\n+\n+public class FlightDao {\n+\n+  public Iterable<Flight> getTopFlight(int limit) {\n+    List<Flight> result = Lists.newArrayList();\n+\n+\n+    String PASSWD = \"danit1\";\n+    String DB_URL = \"jdbc:mysql://mysql8.db4free.net:3307/danit_flights?useSSL=false\";\n+    String USER = \"danit1\";\n+    try {\n+      Connection con = DriverManager.getConnection(DB_URL,USER,PASSWD);\n+      String sql = \"select id, `from`, `to`, `DEPARTURE_TIME`, `ARRIVAL_TIME` from FLIGHTS\";\n+      Statement statement = con.createStatement();\n+      ResultSet resultSet = statement.executeQuery(sql);\n+\n+      while (resultSet.next()) {\n+\n+        Long id = resultSet.getLong(\"id\");\n+        Long departureTime = resultSet.getLong(\"DEPARTURE_TIME\");\n+        Long arrivalTime = resultSet.getLong(\"ARRIVAL_TIME\");\n+        String from = resultSet.getString(\"from\");\n+        String to = resultSet.getString(\"to\");\n+\n+        Flight flight = new Flight(id, from, to, departureTime, arrivalTime);\n+        result.add(flight);\n+      }\n+\n+      resultSet.close();\n+      statement.close();\n+      con.close();\n+\n+\n+    } catch (SQLException e) {\n+      throw new RuntimeException(e);\n+    }\n+\n+\n+    return result;\n+  }\n+}\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/dao/FlightDao.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/dao/FlightDao.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "62b289a1"
        },
        {
          "diff": "@@ -0,0 +1,38 @@\n+package ua.danit.application.model;\n+\n+public class Flight {\n+  private Long id;\n+  private Long departureTime;\n+  private String from;\n+  private String to;\n+  private Long arrivalTime;\n+\n+  public Flight(Long id, String from, String to, Long departureTime, Long arrivalTime) {\n+    this.id = id;\n+    this.from = from;\n+    this.to = to;\n+    this.departureTime = departureTime;\n+\n+    this.arrivalTime = arrivalTime;\n+  }\n+\n+  public Long getId() {\n+    return id;\n+  }\n+\n+  public Long getDepartureTime() {\n+    return departureTime;\n+  }\n+\n+  public String getFrom() {\n+    return from;\n+  }\n+\n+  public String getTo() {\n+    return to;\n+  }\n+\n+  public Long getArrivalTime() {\n+    return arrivalTime;\n+  }\n+}\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/model/Flight.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/model/Flight.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "62b289a1"
        },
        {
          "diff": "@@ -0,0 +1,24 @@\n+package ua.danit.application.resources;\n+\n+import org.codehaus.jackson.map.ObjectMapper;\n+import ua.danit.application.dao.FlightDao;\n+import ua.danit.application.model.Flight;\n+\n+import javax.ws.rs.Path;\n+import java.io.IOException;\n+\n+public class FlightResource {\n+\n+  private FlightDao flightDao;\n+\n+  public FlightResource(FlightDao flightDao) {\n+    this.flightDao = flightDao;\n+  }\n+\n+  @Path(\"/flights/top\")\n+  public String getTopFlights() throws IOException {\n+    Iterable<Flight> flights = flightDao.getTopFlight(5);\n+    ObjectMapper mapper = new ObjectMapper();\n+    return mapper.writeValueAsString(flights);\n+  }\n+}\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/resources/FlightResource.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/resources/FlightResource.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "62b289a1"
        }
      ]
    },
    {
      "id": "472fd9c791f84c7c567c4ffdda1764a1e439f24a",
      "project_id": 4888518,
      "message": "add dao+db\n",
      "title": "add dao+db",
      "short_id": "472fd9c7",
      "author_name": "Yuri Podolsky",
      "branches": null,
      "created_at": "2017-12-27T17:42:20Z",
      "diffs": [
        {
          "diff": "@@ -15,6 +15,7 @@ public class FlightDao {\n     String PASSWD = \"danit1\";\n     String DB_URL = \"jdbc:mysql://mysql8.db4free.net:3307/danit_flights?useSSL=false\";\n     String USER = \"danit1\";\n+\n     try {\n       Connection con = DriverManager.getConnection(DB_URL,USER,PASSWD);\n       String sql = \"select id, `from`, `to`, `DEPARTURE_TIME`, `ARRIVAL_TIME` from FLIGHTS\";\n@@ -22,7 +23,6 @@ public class FlightDao {\n       ResultSet resultSet = statement.executeQuery(sql);\n \n       while (resultSet.next()) {\n-\n         Long id = resultSet.getLong(\"id\");\n         Long departureTime = resultSet.getLong(\"DEPARTURE_TIME\");\n         Long arrivalTime = resultSet.getLong(\"ARRIVAL_TIME\");\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/dao/FlightDao.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/dao/FlightDao.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "472fd9c7"
        },
        {
          "diff": "@@ -12,7 +12,6 @@ public class Flight {\n     this.from = from;\n     this.to = to;\n     this.departureTime = departureTime;\n-\n     this.arrivalTime = arrivalTime;\n   }\n \n",
          "old_path": "flights-app/src/main/java/ua/danit/application/model/Flight.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/model/Flight.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "472fd9c7"
        },
        {
          "diff": "@@ -55,8 +55,7 @@ public class DispatcherServlet extends HttpServlet {\n     }\n   }\n \n-  private void handleMethod(HttpServletRequest req, HttpServletResponse resp, Invocation invoc)\n-      throws IOException {\n+  private void handleMethod(HttpServletRequest req, HttpServletResponse resp, Invocation invoc) throws IOException {\n \n     String result = hasQueryParams(req) ? getHttpResult(req, invoc) : invoc.invoke();\n     resp.getWriter().write(result);\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "472fd9c7"
        },
        {
          "diff": "@@ -74,6 +74,10 @@ public class Parser {\n     return requestMethod;\n   }\n \n+\n+\n+\n+\n   private static List<QueryParam> getQueryParamList(Method method) {\n     List<QueryParam> queryParams = new ArrayList<>();\n     Annotation[][] parameterAnnotations = method.getParameterAnnotations();\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "472fd9c7"
        }
      ]
    },
    {
      "id": "c5131be997c77f559ebb1575679b803d5d8f9fef",
      "project_id": 4888518,
      "message": "Merge branch 'auth-feature'\n\n# Conflicts:\n#\tflights-app/src/main/java/ua/danit/application/WebApp.java\n#\tflights-app/src/main/java/ua/danit/framework/DispatcherServlet.java\n",
      "title": "Merge branch 'auth-feature'",
      "short_id": "c5131be9",
      "author_name": "Gryhoriev Mykhailo",
      "branches": null,
      "created_at": "2017-12-27T17:41:28Z",
      "diffs": [
        {
          "diff": "@@ -29,7 +29,8 @@ public class Resource {\n   }\n \n   /**\n-   * This method returns a string.\n+   * This method (getUsers)returns\n+   * String to sendPesponse.\n    */\n   @Path(\"/query\")\n   @GET\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c5131be9"
        },
        {
          "diff": "@@ -1,11 +1,10 @@\n package ua.danit.application;\n \n-import java.io.File;\n-\n import org.eclipse.jetty.server.Server;\n import org.eclipse.jetty.servlet.ServletContextHandler;\n import org.eclipse.jetty.servlet.ServletHolder;\n import ua.danit.framework.DispatcherServlet;\n+import ua.danit.framework.LoginServlet;\n \n public class WebApp {\n \n@@ -19,11 +18,12 @@ public class WebApp {\n     Server server = new Server(8080);\n     ServletContextHandler handler = new ServletContextHandler();\n \n-    DispatcherServlet servlet = new DispatcherServlet(Resource.class)\n-        .addFileMapping(\"/\", new File(\"flights-app/resources/index.html\"))\n-        .addFileMapping(\"/bootstrap.css\", new File(\"flights-app/resources/bootstrap.min.css\"));\n+    DispatcherServlet servlet = new DispatcherServlet(Resource.class);\n+    handler.addServlet(new ServletHolder(servlet), \"/\");\n+\n+    LoginServlet loginServlet = new LoginServlet();\n+    handler.addServlet(new ServletHolder(loginServlet), \"/login\");\n \n-    handler.addServlet(new ServletHolder(servlet), \"/*\");\n     server.setHandler(handler);\n     server.start();\n     server.join();\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c5131be9"
        },
        {
          "diff": "@@ -1,18 +1,11 @@\n package ua.danit.framework;\n \n-import static com.google.common.base.Preconditions.checkNotNull;\n-import static com.google.common.base.Preconditions.checkState;\n-\n-import com.google.common.base.Charsets;\n-import com.google.common.collect.Maps;\n-import com.google.common.io.Files;\n-\n-import java.io.File;\n import java.io.IOException;\n import java.util.HashMap;\n import java.util.Map;\n \n import javax.servlet.ServletException;\n+import javax.servlet.http.Cookie;\n import javax.servlet.http.HttpServlet;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n@@ -22,10 +15,10 @@ import javax.ws.rs.QueryParam;\n \n import ua.danit.framework.invocations.Invocation;\n \n+\n public class DispatcherServlet extends HttpServlet {\n \n   Map<String, Invocation> resources = new HashMap<>();\n-  Map<String, File> files = Maps.newHashMap();\n \n   /**\n    * DispatcherServlet.\n@@ -41,20 +34,57 @@ public class DispatcherServlet extends HttpServlet {\n   @Override\n   protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n       throws ServletException, IOException {\n+\n+    String loginName = null;\n+\n+    if (req.getCookies() != null) {\n+\n+      for (Cookie cookie : req.getCookies()) {\n+        String cookieName = cookie.getName();\n+        if (cookieName != null && cookieName.equals(\"flight-user\")) {\n+          loginName = cookie.getValue();\n+        }\n+      }\n+    }\n+\n+    if (loginName == null) {\n+      resp.sendRedirect(\"/login\");\n+    } else {\n+      String uri = req.getRequestURI();\n+\n+      Invocation invoc = resources.get(uri);\n+\n+      if (canHandleGetMethod(invoc)) {\n+        handleMethod(req, resp, invoc);\n+      } else {\n+        resp.sendError(404);\n+      }\n+    }\n+  }\n+\n+\n+  private boolean canHandleGetMethod(Invocation invoc) {\n+    return invoc != null && invoc.getHttpMethod() instanceof GET;\n+  }\n+\n+  @Override\n+  protected void doPost(HttpServletRequest req, HttpServletResponse resp)\n+      throws ServletException, IOException {\n     String uri = req.getRequestURI();\n \n     Invocation invoc = resources.get(uri);\n \n-    if (resources.containsKey(uri) && canHandleGetMethod(invoc)) {\n+    if (canHandlePostMethod(invoc)) {\n       handleMethod(req, resp, invoc);\n-    } else if (files.containsKey(uri)) {\n-      File file = files.get(uri);\n-      resp.getWriter().write(Files.toString(file, Charsets.UTF_8));\n     } else {\n       resp.sendError(404);\n     }\n   }\n \n+  private boolean canHandlePostMethod(Invocation invoc) {\n+    return invoc.getHttpMethod() instanceof POST;\n+  }\n+\n   private void handleMethod(HttpServletRequest req, HttpServletResponse resp, Invocation invoc)\n       throws IOException {\n \n@@ -77,36 +107,4 @@ public class DispatcherServlet extends HttpServlet {\n     return req.getQueryString() != null;\n   }\n \n-  private boolean canHandleGetMethod(Invocation invoc) {\n-    return invoc.getHttpMethod() instanceof GET;\n-  }\n-\n-  @Override\n-  protected void doPost(HttpServletRequest req, HttpServletResponse resp)\n-      throws ServletException, IOException {\n-    String uri = req.getRequestURI();\n-    Invocation invoc = resources.get(uri);\n-    if (canHandlePostMethod(invoc)) {\n-      handleMethod(req, resp, invoc);\n-    } else {\n-      resp.sendError(404);\n-    }\n-  }\n-\n-  private boolean canHandlePostMethod(Invocation invoc) {\n-    return invoc.getHttpMethod() instanceof POST;\n-  }\n-\n-  /**\n-   * Add web-mapping for a specified file.\n-   * File must exists.\n-   */\n-  public DispatcherServlet addFileMapping(String url, File file) {\n-    checkNotNull(url, \"URL is Null.\");\n-    checkNotNull(file, \"FILE is Null.\");\n-    String message = String.format(\"File [%s] doest not exist.\", file.getAbsolutePath());\n-    checkState(file.exists(), message);\n-    files.put(url, file);\n-    return this;\n-  }\n }\n\\ No newline at end of file\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c5131be9"
        },
        {
          "diff": "@@ -0,0 +1,44 @@\n+package ua.danit.framework;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+\n+public class LoginServlet extends HttpServlet {\n+\n+  private static final String loginForm =\n+      \"<html><body>\" +\n+      \" <form method = 'post'>\" +\n+      \" <input name = 'login' type = 'text'><br>\" +\n+      \" <input name = 'password' type = 'password'><br>\" +\n+      \" <button type = 'submit'>Submit</button><br>\" +\n+      \"</form></body></html>\";\n+\n+  @Override\n+  protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+    String loginName = null;\n+\n+    if (req.getCookies() != null) {\n+\n+      for (Cookie cookie : req.getCookies()) {\n+        String cookieName = cookie.getName();\n+        if (cookieName != null && cookieName.equals(\"flight-user\")) {\n+          loginName = cookie.getValue();\n+        }\n+      }\n+    }\n+\n+    resp.getWriter().write(loginName == null\n+        || loginName.isEmpty() ? loginForm : loginName);\n+  }\n+\n+  @Override\n+  protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+    String login = req.getParameter(\"login\");\n+    String password = req.getParameter(\"password\");\n+    resp.addCookie(new Cookie(\"flight-user\", login));\n+  }\n+}\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/LoginServlet.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/LoginServlet.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c5131be9"
        }
      ]
    },
    {
      "id": "f916d63097afc3b6bdc22092bc41d394f735c071",
      "project_id": 4888518,
      "message": "modified schema.sql to create TICKETS table\n",
      "title": "modified schema.sql to create TICKETS table",
      "short_id": "f916d630",
      "author_name": "full.iron",
      "branches": null,
      "created_at": "2017-12-26T12:58:19Z",
      "diffs": [
        {
          "diff": "@@ -1,8 +1,16 @@\n \n-CREATE TABLE  IF NOT EXISTS FLIGHTS (\n+CREATE TABLE IF NOT EXISTS FLIGHTS (\n   `ID` BIGINT PRIMARY KEY AUTO_INCREMENT,\n   `DEPARTURE_TIME` BIGINT NOT NULL,\n   `FROM` VARCHAR(255) NOT NULL ,\n   `TO` VARCHAR(255) NOT NULL,\n   `ARRIVAL_TIME` BIGINT NOT NULL\n+);\n+\n+CREATE TABLE IF NOT EXISTS TICKETS\n+(\n+  \"IS\" BOOLEAN DEFAULT TRUE ,\n+  ID BIGINT PRIMARY KEY ,\n+  \"FROM\" VARCHAR(255) NOT NULL,\n+  TO VARCHAR(255) NOT NULL\n );\n\\ No newline at end of file\n",
          "old_path": "flights-app/resources/schema.sql",
          "new_path": "flights-app/resources/schema.sql",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "f916d630"
        }
      ]
    },
    {
      "id": "cb488672b600b58695ed17b86c15d2b4e1c251d6",
      "project_id": 4888518,
      "message": "dao+resource+mysql\n",
      "title": "dao+resource+mysql",
      "short_id": "cb488672",
      "author_name": "Volodymyr Derkach",
      "branches": null,
      "created_at": "2017-12-25T19:50:21Z",
      "diffs": [
        {
          "diff": "@@ -21,14 +21,12 @@\n     </properties>\n \n     <dependencies>\n-        <!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->\n-        <!--<dependency>\n-            <groupId>mysql</groupId>\n-            <artifactId>mysql-connector-java</artifactId>\n-            <version>6.0.6</version>\n-        </dependency>-->\n+        <dependency>\n+            <groupId>org.codehaus.jackson</groupId>\n+            <artifactId>jackson-mapper-asl</artifactId>\n+            <version>1.9.13</version>\n+        </dependency>\n \n-        <!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->\n         <dependency>\n             <groupId>mysql</groupId>\n             <artifactId>mysql-connector-java</artifactId>\n",
          "old_path": "flights-app/pom.xml",
          "new_path": "flights-app/pom.xml",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "cb488672"
        },
        {
          "diff": "@@ -1,8 +1,8 @@\n \n CREATE TABLE  IF NOT EXISTS FLIGHTS (\n-  ID BIGINT PRIMARY KEY AUTO_INCREMENT,\n-  DEPARTURE_TIME BIGINT NOT NULL,\n-  FROM VARCHAR(255) NOT NULL ,\n-  TO VARCHAR(255) NOT NULL,\n-  ARRIVAL_TIME BIGINT NOT NULL\n+  `ID` BIGINT PRIMARY KEY AUTO_INCREMENT,\n+  `DEPARTURE_TIME` BIGINT NOT NULL,\n+  `FROM` VARCHAR(255) NOT NULL ,\n+  `TO` VARCHAR(255) NOT NULL,\n+  `ARRIVAL_TIME` BIGINT NOT NULL\n );\n\\ No newline at end of file\n",
          "old_path": "flights-app/resources/schema.sql",
          "new_path": "flights-app/resources/schema.sql",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "cb488672"
        },
        {
          "diff": "@@ -13,25 +13,12 @@ public class Resource {\n   @Path(\"/weather\")\n   @GET\n   public String getWeather() {\n-    return sendResponse(\"Today weather is cool isn't\");\n+    return sendResponse(\"The weather is cool today. Isn't it?\");\n   }\n \n   @GET\n   @Path(\"/flights\")\n   public String getFlights() {\n-\n-    String PASSWD = \"danit1\";\n-    String DB_URL = \"jdbc:mysql://mysql8.db4free.net:3307/danit_flights?useSSL=false\";\n-    String USER = \"danit1\";\n-    try {\n-      Connection con = DriverManager.getConnection(DB_URL,USER,PASSWD);\n-      con.createStatement().execute(\"create table tickets(id bigint)\");\n-\n-    } catch (SQLException e) {\n-      throw new RuntimeException(e);\n-    }\n-\n-\n     return sendResponse(\"Today all routes closed\");\n   }\n \n",
          "old_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "cb488672"
        },
        {
          "diff": "@@ -1,10 +1,13 @@\n package ua.danit.application;\n \n import java.io.File;\n+import java.io.IOException;\n \n import org.eclipse.jetty.server.Server;\n import org.eclipse.jetty.servlet.ServletContextHandler;\n import org.eclipse.jetty.servlet.ServletHolder;\n+import ua.danit.application.dao.FlightDao;\n+import ua.danit.application.resources.FlightResource;\n import ua.danit.framework.DispatcherServlet;\n \n public class WebApp {\n@@ -29,7 +32,8 @@ public class WebApp {\n     server.join();\n   }\n \n-  public static void main(String[] args) {\n-    new Resource().getFlights();\n+  public static void main(String[] args) throws IOException {\n+    String flights = new FlightResource(new FlightDao()).getTopFlights();\n+    System.out.println(flights);\n   }\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "cb488672"
        },
        {
          "diff": "@@ -3,12 +3,46 @@ package ua.danit.application.dao;\n import com.google.common.collect.Lists;\n import ua.danit.application.model.Flight;\n \n+import java.sql.*;\n+import java.util.List;\n+\n public class FlightDao {\n \n   public Iterable<Flight> getTopFlight(int limit) {\n+    List<Flight> result = Lists.newArrayList();\n+\n+\n+    String PASSWD = \"danit1\";\n+    String DB_URL = \"jdbc:mysql://mysql8.db4free.net:3307/danit_flights?useSSL=false\";\n+    String USER = \"danit1\";\n+    try {\n+      Connection con = DriverManager.getConnection(DB_URL,USER,PASSWD);\n+      String sql = \"select id, `from`, `to`, `DEPARTURE_TIME`, `ARRIVAL_TIME` from FLIGHTS\";\n+      Statement statement = con.createStatement();\n+      ResultSet resultSet = statement.executeQuery(sql);\n+\n+      while (resultSet.next()) {\n+\n+        Long id = resultSet.getLong(\"id\");\n+        Long departureTime = resultSet.getLong(\"DEPARTURE_TIME\");\n+        Long arrivalTime = resultSet.getLong(\"ARRIVAL_TIME\");\n+        String from = resultSet.getString(\"from\");\n+        String to = resultSet.getString(\"to\");\n+\n+        Flight flight = new Flight(id, from, to, departureTime, arrivalTime);\n+        result.add(flight);\n+      }\n+\n+      resultSet.close();\n+      statement.close();\n+      con.close();\n+\n+\n+    } catch (SQLException e) {\n+      throw new RuntimeException(e);\n+    }\n \n-    \n \n-    return Lists.newArrayList();\n+    return result;\n   }\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/dao/FlightDao.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/dao/FlightDao.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "cb488672"
        },
        {
          "diff": "@@ -6,4 +6,33 @@ public class Flight {\n   private String from;\n   private String to;\n   private Long arrivalTime;\n+\n+  public Flight(Long id, String from, String to, Long departureTime, Long arrivalTime) {\n+    this.id = id;\n+    this.from = from;\n+    this.to = to;\n+    this.departureTime = departureTime;\n+\n+    this.arrivalTime = arrivalTime;\n+  }\n+\n+  public Long getId() {\n+    return id;\n+  }\n+\n+  public Long getDepartureTime() {\n+    return departureTime;\n+  }\n+\n+  public String getFrom() {\n+    return from;\n+  }\n+\n+  public String getTo() {\n+    return to;\n+  }\n+\n+  public Long getArrivalTime() {\n+    return arrivalTime;\n+  }\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/model/Flight.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/model/Flight.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "cb488672"
        },
        {
          "diff": "@@ -1,16 +1,24 @@\n package ua.danit.application.resources;\n \n+import org.codehaus.jackson.map.ObjectMapper;\n import ua.danit.application.dao.FlightDao;\n import ua.danit.application.model.Flight;\n \n import javax.ws.rs.Path;\n+import java.io.IOException;\n \n public class FlightResource {\n \n   private FlightDao flightDao;\n \n+  public FlightResource(FlightDao flightDao) {\n+    this.flightDao = flightDao;\n+  }\n+\n   @Path(\"/flights/top\")\n-  public Iterable<Flight> getTopFlights() {\n-    return flightDao.getTopFlight(5);\n+  public String getTopFlights() throws IOException {\n+    Iterable<Flight> flights = flightDao.getTopFlight(5);\n+    ObjectMapper mapper = new ObjectMapper();\n+    return mapper.writeValueAsString(flights);\n   }\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/resources/FlightResource.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/resources/FlightResource.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "cb488672"
        }
      ]
    },
    {
      "id": "308a6a7ab57dc504364a245dca2f8afdefcccd5c",
      "project_id": 4888518,
      "message": "flights service\n",
      "title": "flights service",
      "short_id": "308a6a7a",
      "author_name": "Volodymyr Derkach",
      "branches": null,
      "created_at": "2017-12-25T19:12:02Z",
      "diffs": [
        {
          "diff": "@@ -21,6 +21,20 @@\n     </properties>\n \n     <dependencies>\n+        <!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->\n+        <!--<dependency>\n+            <groupId>mysql</groupId>\n+            <artifactId>mysql-connector-java</artifactId>\n+            <version>6.0.6</version>\n+        </dependency>-->\n+\n+        <!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->\n+        <dependency>\n+            <groupId>mysql</groupId>\n+            <artifactId>mysql-connector-java</artifactId>\n+            <version>8.0.8-dmr</version>\n+        </dependency>\n+\n         <!--  javax.ws.rs.core e.g. Request -->\n         <dependency>\n           <groupId>javax.ws.rs</groupId>\n",
          "old_path": "flights-app/pom.xml",
          "new_path": "flights-app/pom.xml",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "308a6a7a"
        },
        {
          "diff": "@@ -0,0 +1,8 @@\n+\n+CREATE TABLE  IF NOT EXISTS FLIGHTS (\n+  ID BIGINT PRIMARY KEY AUTO_INCREMENT,\n+  DEPARTURE_TIME BIGINT NOT NULL,\n+  FROM VARCHAR(255) NOT NULL ,\n+  TO VARCHAR(255) NOT NULL,\n+  ARRIVAL_TIME BIGINT NOT NULL\n+);\n\\ No newline at end of file\n",
          "old_path": "flights-app/resources/schema.sql",
          "new_path": "flights-app/resources/schema.sql",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "308a6a7a"
        },
        {
          "diff": "@@ -1,9 +1,9 @@\n package ua.danit.application;\n \n-import javax.ws.rs.GET;\n-import javax.ws.rs.POST;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.QueryParam;\n+import javax.ws.rs.*;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n \n public class Resource {\n   public static final String HTML_TEMPLATE = \"<!DOCTYPE html>\\n\"\n@@ -16,9 +16,22 @@ public class Resource {\n     return sendResponse(\"Today weather is cool isn't\");\n   }\n \n-  @Path(\"/flights\")\n   @GET\n+  @Path(\"/flights\")\n   public String getFlights() {\n+\n+    String PASSWD = \"danit1\";\n+    String DB_URL = \"jdbc:mysql://mysql8.db4free.net:3307/danit_flights?useSSL=false\";\n+    String USER = \"danit1\";\n+    try {\n+      Connection con = DriverManager.getConnection(DB_URL,USER,PASSWD);\n+      con.createStatement().execute(\"create table tickets(id bigint)\");\n+\n+    } catch (SQLException e) {\n+      throw new RuntimeException(e);\n+    }\n+\n+\n     return sendResponse(\"Today all routes closed\");\n   }\n \n",
          "old_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "308a6a7a"
        },
        {
          "diff": "@@ -14,7 +14,7 @@ public class WebApp {\n    * creates a server, creates a handler, parser classes\n    */\n \n-  public static void main(String[] args) throws Exception {\n+  public static void main0(String[] args) throws Exception {\n \n     Server server = new Server(8080);\n     ServletContextHandler handler = new ServletContextHandler();\n@@ -28,4 +28,8 @@ public class WebApp {\n     server.start();\n     server.join();\n   }\n+\n+  public static void main(String[] args) {\n+    new Resource().getFlights();\n+  }\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "308a6a7a"
        },
        {
          "diff": "@@ -0,0 +1,14 @@\n+package ua.danit.application.dao;\n+\n+import com.google.common.collect.Lists;\n+import ua.danit.application.model.Flight;\n+\n+public class FlightDao {\n+\n+  public Iterable<Flight> getTopFlight(int limit) {\n+\n+    \n+\n+    return Lists.newArrayList();\n+  }\n+}\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/dao/FlightDao.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/dao/FlightDao.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "308a6a7a"
        },
        {
          "diff": "@@ -0,0 +1,9 @@\n+package ua.danit.application.model;\n+\n+public class Flight {\n+  private Long id;\n+  private Long departureTime;\n+  private String from;\n+  private String to;\n+  private Long arrivalTime;\n+}\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/model/Flight.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/model/Flight.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "308a6a7a"
        },
        {
          "diff": "@@ -0,0 +1,16 @@\n+package ua.danit.application.resources;\n+\n+import ua.danit.application.dao.FlightDao;\n+import ua.danit.application.model.Flight;\n+\n+import javax.ws.rs.Path;\n+\n+public class FlightResource {\n+\n+  private FlightDao flightDao;\n+\n+  @Path(\"/flights/top\")\n+  public Iterable<Flight> getTopFlights() {\n+    return flightDao.getTopFlight(5);\n+  }\n+}\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/resources/FlightResource.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/resources/FlightResource.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "308a6a7a"
        }
      ]
    },
    {
      "id": "c264b6e6a3ba8fe87189ea8aacac925b5e9c2c8a",
      "project_id": 4888518,
      "message": "bootstrap\n",
      "title": "bootstrap",
      "short_id": "c264b6e6",
      "author_name": "V0L0DYMYR",
      "branches": null,
      "created_at": "2017-12-25T16:55:25Z",
      "diffs": [
        {
          "diff": "",
          "old_path": "flights-app/resources/bootstrap.min.css",
          "new_path": "flights-app/resources/bootstrap.min.css",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c264b6e6"
        },
        {
          "diff": "@@ -2,8 +2,19 @@\n <html>\n <head>\n   <title>Flights Search</title>\n+  <link rel=\"stylesheet\" href=\"/bootstrap.css\" type=\"text/css\">\n </head>\n <body>\n-  <h1>Flights Search</h1>\n+\n+<div class=\"container\">\n+\n+  <div class=\"jumbotron centered\">\n+    <h1>Flights Search</h1>\n+    <p class=\"lead\">Find all tickets in one place.</p>\n+    <p>\n+      <a class=\"btn btn-lg btn-success\" href=\"#\" role=\"button\">Sign up today</a>\n+    </p>\n+  </div>\n+</div>\n </body>\n </html>\n\\ No newline at end of file\n",
          "old_path": "flights-app/resources/index.html",
          "new_path": "flights-app/resources/index.html",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c264b6e6"
        },
        {
          "diff": "@@ -20,7 +20,8 @@ public class WebApp {\n     ServletContextHandler handler = new ServletContextHandler();\n \n     DispatcherServlet servlet = new DispatcherServlet(Resource.class)\n-        .addFileMapping(\"/\", new File(\"flights-app/resources/index.html\"));\n+        .addFileMapping(\"/\", new File(\"flights-app/resources/index.html\"))\n+        .addFileMapping(\"/bootstrap.css\", new File(\"flights-app/resources/bootstrap.min.css\"));\n \n     handler.addServlet(new ServletHolder(servlet), \"/*\");\n     server.setHandler(handler);\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c264b6e6"
        }
      ]
    },
    {
      "id": "82dabe76596f5423a368ba4cc3b69b2455e356e7",
      "project_id": 4888518,
      "message": "Parser refactoring\n",
      "title": "Parser refactoring",
      "short_id": "82dabe76",
      "author_name": "V0L0DYMYR",
      "branches": null,
      "created_at": "2017-12-25T16:38:52Z",
      "diffs": [
        {
          "diff": "@@ -28,6 +28,9 @@ public class Resource {\n     return sendResponse(\"No ticket available\");\n   }\n \n+  /**\n+   * This method returns a string.\n+   */\n   @Path(\"/query\")\n   @GET\n   public String getUsers(@QueryParam(\"user\") String name) {\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "82dabe76"
        },
        {
          "diff": "@@ -86,7 +86,6 @@ public class DispatcherServlet extends HttpServlet {\n       throws ServletException, IOException {\n     String uri = req.getRequestURI();\n     Invocation invoc = resources.get(uri);\n-\n     if (canHandlePostMethod(invoc)) {\n       handleMethod(req, resp, invoc);\n     } else {\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "82dabe76"
        },
        {
          "diff": "@@ -40,33 +40,51 @@ public class Parser {\n   }\n \n   /**\n-   * getInvocation(Class<?> someClass, Method method).\n-   * This method returns an object of the Class that\n-   * encapsulate method parameters and annotations taken by reflection API\n+   * This method.\n+   * Parsing the incoming class relative to the http methods and returns\n+   * Invocation based on this data\n    */\n \n   public static Invocation getInvocation(Class<?> someClass, Method method) {\n     Path path = (Path) Reflections.getAnnotation(method, Path.class);\n     String uri = path.value();\n-    Annotation annotation = Reflections.getAnnotation(method, GET.class);\n-    if (annotation == null) {\n-      annotation = Reflections.getAnnotation(method, POST.class);\n+    Annotation requestMethod = getParamRequestMethod(method);\n+\n+    if (requestMethod != null) {\n+      List<QueryParam> queryParamList = getQueryParamList(method);\n+      return getInvocation(someClass, method, uri, requestMethod, queryParamList);\n+    }\n+    return new Invocation(someClass, method, uri);\n+  }\n+\n+  private static Invocation getInvocation(Class<?> someClass, Method method,\n+                                          String uri, Annotation requestMethod,\n+                                          List<QueryParam> queryParamList) {\n+    return queryParamList.isEmpty() ? new Invocation(someClass, method, uri, requestMethod) :\n+        new Invocation(someClass, method, uri, requestMethod, queryParamList);\n+  }\n+\n+  private static Annotation getParamRequestMethod(Method method) {\n+    Annotation requestMethod = null;\n+    if (method.isAnnotationPresent(GET.class)) {\n+      requestMethod = Reflections.getAnnotation(method, GET.class);\n+    } else if (method.isAnnotationPresent(POST.class)) {\n+      requestMethod = Reflections.getAnnotation(method, POST.class);\n     }\n-    if (annotation != null) {\n-      List<QueryParam> some = new ArrayList<>();\n-      Annotation[][] res = method.getParameterAnnotations();\n-\n-      for (Annotation[] re : res) {\n-        for (Annotation annotation1 : re) {\n-          if (annotation1 != null) {\n-            some.add((QueryParam) annotation1);\n-          }\n+    return requestMethod;\n+  }\n+\n+  private static List<QueryParam> getQueryParamList(Method method) {\n+    List<QueryParam> queryParams = new ArrayList<>();\n+    Annotation[][] parameterAnnotations = method.getParameterAnnotations();\n+\n+    for (Annotation[] allAnnotations : parameterAnnotations) {\n+      for (Annotation paramAnnotation : allAnnotations) {\n+        if (paramAnnotation != null) {\n+          queryParams.add((QueryParam) paramAnnotation);\n         }\n       }\n-      return some == null ? new Invocation(someClass, method, uri, annotation) :\n-          new Invocation(someClass, method, uri, annotation, some);\n-\n     }\n-    return new Invocation(someClass, method, uri);\n+    return queryParams;\n   }\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "82dabe76"
        }
      ]
    },
    {
      "id": "c5426792154459d4d41836c39f136702c708f70d",
      "project_id": 4888518,
      "message": "File Mapping\n",
      "title": "File Mapping",
      "short_id": "c5426792",
      "author_name": "V0L0DYMYR",
      "branches": null,
      "created_at": "2017-12-25T16:36:43Z",
      "diffs": [
        {
          "diff": "@@ -46,9 +46,13 @@\n             <version>4.12</version>\n             <scope>test</scope>\n         </dependency>\n+      <dependency>\n+        <groupId>com.google.guava</groupId>\n+        <artifactId>guava</artifactId>\n+        <version>19.0</version>\n+      </dependency>\n \n-        <!-- https://mvnrepository.com/artifact/javax.persistence/persistence-api -->\n-        <dependency>\n+      <dependency>\n             <groupId>javax.persistence</groupId>\n             <artifactId>persistence-api</artifactId>\n             <version>1.0.2</version>\n@@ -59,7 +63,6 @@\n             <artifactId>javax.servlet-api</artifactId>\n             <version>3.1.0</version>\n         </dependency>\n-        <!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-jar-plugin -->\n     </dependencies>\n \n     <build>\n",
          "old_path": "flights-app/pom.xml",
          "new_path": "flights-app/pom.xml",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c5426792"
        },
        {
          "diff": "@@ -0,0 +1,9 @@\n+<!DOCTYPE html>\n+<html>\n+<head>\n+  <title>Flights Search</title>\n+</head>\n+<body>\n+  <h1>Flights Search</h1>\n+</body>\n+</html>\n\\ No newline at end of file\n",
          "old_path": "flights-app/resources/index.html",
          "new_path": "flights-app/resources/index.html",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c5426792"
        },
        {
          "diff": "@@ -10,12 +10,6 @@ public class Resource {\n       + \"<html>\\n<head><title>British Airlines</title></head>\"\n       + \"<body><h1 style=\\\" text-align: center; \\\">%s</h1></body></html>\";\n \n-  @Path(\"/\")\n-  @GET\n-  public String welcome() {\n-    return sendResponse(\"Welcome to British Airlines\");\n-  }\n-\n   @Path(\"/weather\")\n   @GET\n   public String getWeather() {\n@@ -34,19 +28,13 @@ public class Resource {\n     return sendResponse(\"No ticket available\");\n   }\n \n-  /**\n-   * This method returns a string.\n-   */\n-\n   @Path(\"/query\")\n   @GET\n   public String getUsers(@QueryParam(\"user\") String name) {\n-\n     return sendResponse(\"User name is : \" + name);\n \n   }\n \n-\n   private String sendResponse(String response) {\n     return String.format(HTML_TEMPLATE, response);\n   }\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c5426792"
        },
        {
          "diff": "@@ -1,5 +1,7 @@\n package ua.danit.application;\n \n+import java.io.File;\n+\n import org.eclipse.jetty.server.Server;\n import org.eclipse.jetty.servlet.ServletContextHandler;\n import org.eclipse.jetty.servlet.ServletHolder;\n@@ -17,7 +19,8 @@ public class WebApp {\n     Server server = new Server(8080);\n     ServletContextHandler handler = new ServletContextHandler();\n \n-    DispatcherServlet servlet = new DispatcherServlet(Resource.class);\n+    DispatcherServlet servlet = new DispatcherServlet(Resource.class)\n+        .addFileMapping(\"/\", new File(\"flights-app/resources/index.html\"));\n \n     handler.addServlet(new ServletHolder(servlet), \"/*\");\n     server.setHandler(handler);\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c5426792"
        },
        {
          "diff": "@@ -1,5 +1,13 @@\n package ua.danit.framework;\n \n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.collect.Maps;\n+import com.google.common.io.Files;\n+\n+import java.io.File;\n import java.io.IOException;\n import java.util.HashMap;\n import java.util.Map;\n@@ -14,10 +22,10 @@ import javax.ws.rs.QueryParam;\n \n import ua.danit.framework.invocations.Invocation;\n \n-\n public class DispatcherServlet extends HttpServlet {\n \n   Map<String, Invocation> resources = new HashMap<>();\n+  Map<String, File> files = Maps.newHashMap();\n \n   /**\n    * DispatcherServlet.\n@@ -37,8 +45,11 @@ public class DispatcherServlet extends HttpServlet {\n \n     Invocation invoc = resources.get(uri);\n \n-    if (canHandleGetMethod(invoc)) {\n+    if (resources.containsKey(uri) && canHandleGetMethod(invoc)) {\n       handleMethod(req, resp, invoc);\n+    } else if (files.containsKey(uri)) {\n+      File file = files.get(uri);\n+      resp.getWriter().write(Files.toString(file, Charsets.UTF_8));\n     } else {\n       resp.sendError(404);\n     }\n@@ -87,4 +98,16 @@ public class DispatcherServlet extends HttpServlet {\n     return invoc.getHttpMethod() instanceof POST;\n   }\n \n+  /**\n+   * Add web-mapping for a specified file.\n+   * File must exists.\n+   */\n+  public DispatcherServlet addFileMapping(String url, File file) {\n+    checkNotNull(url, \"URL is Null.\");\n+    checkNotNull(file, \"FILE is Null.\");\n+    String message = String.format(\"File [%s] doest not exist.\", file.getAbsolutePath());\n+    checkState(file.exists(), message);\n+    files.put(url, file);\n+    return this;\n+  }\n }\n\\ No newline at end of file\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c5426792"
        },
        {
          "diff": "@@ -26,7 +26,7 @@ public class Invocation {\n   }\n \n   /**\n-   * This constructor creates an object with parameters Get or Post\n+   * This constructor creates an object with parameters Get or Post.\n    */\n \n   public Invocation(Class<?> clazz, Method method, String url, Annotation httpMethod) {\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/invocations/Invocation.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/invocations/Invocation.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c5426792"
        }
      ]
    },
    {
      "id": "972fa828109836885ab5dabe219a470ce66fbf31",
      "project_id": 4888518,
      "message": "Merge branch 'mk' into 'master'\n\nMk\n\nSee merge request korsa719/Flights!13",
      "title": "Merge branch 'mk' into 'master'",
      "short_id": "972fa828",
      "author_name": "Volodymyr Derkach",
      "branches": null,
      "created_at": "2017-12-25T16:35:08Z",
      "diffs": [
        {
          "diff": "@@ -35,9 +35,9 @@ public class Resource {\n   }\n \n   /**\n-   * This method returns a string.\n+   * This method (getUsers)returns\n+   * String to sendResponse.\n    */\n-\n   @Path(\"/query\")\n   @GET\n   public String getUsers(@QueryParam(\"user\") String name) {\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "972fa828"
        },
        {
          "diff": "@@ -75,7 +75,6 @@ public class DispatcherServlet extends HttpServlet {\n       throws ServletException, IOException {\n     String uri = req.getRequestURI();\n     Invocation invoc = resources.get(uri);\n-\n     if (canHandlePostMethod(invoc)) {\n       handleMethod(req, resp, invoc);\n     } else {\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "972fa828"
        },
        {
          "diff": "@@ -40,33 +40,51 @@ public class Parser {\n   }\n \n   /**\n-   * getInvocation(Class<?> someClass, Method method).\n-   * This method returns an object of the Class that\n-   * encapsulate method parameters and annotations taken by reflection API\n+   * This method.\n+   * Parsing the incoming class relative to the http methods and returns\n+   * Invocation based on this data\n    */\n \n   public static Invocation getInvocation(Class<?> someClass, Method method) {\n     Path path = (Path) Reflections.getAnnotation(method, Path.class);\n     String uri = path.value();\n-    Annotation annotation = Reflections.getAnnotation(method, GET.class);\n-    if (annotation == null) {\n-      annotation = Reflections.getAnnotation(method, POST.class);\n+    Annotation requestMethod = getParamRequestMethod(method);\n+\n+    if (requestMethod != null) {\n+      List<QueryParam> queryParamList = getQueryParamList(method);\n+      return getInvocation(someClass, method, uri, requestMethod, queryParamList);\n+    }\n+    return new Invocation(someClass, method, uri);\n+  }\n+\n+  private static Invocation getInvocation(Class<?> someClass, Method method,\n+                                          String uri, Annotation requestMethod,\n+                                          List<QueryParam> queryParamList) {\n+    return queryParamList.isEmpty() ? new Invocation(someClass, method, uri, requestMethod) :\n+        new Invocation(someClass, method, uri, requestMethod, queryParamList);\n+  }\n+\n+  private static Annotation getParamRequestMethod(Method method) {\n+    Annotation requestMethod = null;\n+    if (method.isAnnotationPresent(GET.class)) {\n+      requestMethod = Reflections.getAnnotation(method, GET.class);\n+    } else if (method.isAnnotationPresent(POST.class)) {\n+      requestMethod = Reflections.getAnnotation(method, POST.class);\n     }\n-    if (annotation != null) {\n-      List<QueryParam> some = new ArrayList<>();\n-      Annotation[][] res = method.getParameterAnnotations();\n-\n-      for (Annotation[] re : res) {\n-        for (Annotation annotation1 : re) {\n-          if (annotation1 != null) {\n-            some.add((QueryParam) annotation1);\n-          }\n+    return requestMethod;\n+  }\n+\n+  private static List<QueryParam> getQueryParamList(Method method) {\n+    List<QueryParam> queryParams = new ArrayList<>();\n+    Annotation[][] parameterAnnotations = method.getParameterAnnotations();\n+\n+    for (Annotation[] allAnnotations : parameterAnnotations) {\n+      for (Annotation paramAnnotation : allAnnotations) {\n+        if (paramAnnotation != null) {\n+          queryParams.add((QueryParam) paramAnnotation);\n         }\n       }\n-      return some == null ? new Invocation(someClass, method, uri, annotation) :\n-          new Invocation(someClass, method, uri, annotation, some);\n-\n     }\n-    return new Invocation(someClass, method, uri);\n+    return queryParams;\n   }\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "972fa828"
        },
        {
          "diff": "@@ -26,7 +26,7 @@ public class Invocation {\n   }\n \n   /**\n-   * This constructor creates an object with parameters Get or Post\n+   * This constructor creates an object with parameters Get or Post.\n    */\n \n   public Invocation(Class<?> clazz, Method method, String url, Annotation httpMethod) {\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/invocations/Invocation.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/invocations/Invocation.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "972fa828"
        }
      ]
    },
    {
      "id": "1770077ffe429c0324e0f67908e1578bacbea808",
      "project_id": 4888518,
      "message": "2 operations instead of 2 in one\n",
      "title": "2 operations instead of 2 in one",
      "short_id": "1770077f",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2017-12-25T10:07:55Z",
      "diffs": [
        {
          "diff": "@@ -46,7 +46,8 @@ public class Parser {\n    */\n \n   public static Invocation getInvocation(Class<?> someClass, Method method) {\n-    String uri = ((Path) Reflections.getAnnotation(method, Path.class)).value();\n+    Path path = (Path) Reflections.getAnnotation(method, Path.class);\n+    String uri = path.value();\n     Annotation requestMethod = getParamRequestMethod(method);\n \n     if (requestMethod != null) {\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "1770077f"
        }
      ]
    },
    {
      "id": "192eae833f8705a6ed6bc0b90fd53286b66bdf02",
      "project_id": 4888518,
      "message": "add line before if\n",
      "title": "add line before if",
      "short_id": "192eae83",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2017-12-25T10:05:52Z",
      "diffs": [
        {
          "diff": "@@ -48,6 +48,7 @@ public class Parser {\n   public static Invocation getInvocation(Class<?> someClass, Method method) {\n     String uri = ((Path) Reflections.getAnnotation(method, Path.class)).value();\n     Annotation requestMethod = getParamRequestMethod(method);\n+\n     if (requestMethod != null) {\n       List<QueryParam> queryParamList = getQueryParamList(method);\n       return getInvocation(someClass, method, uri, requestMethod, queryParamList);\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "192eae83"
        }
      ]
    },
    {
      "id": "437d608e953301a2c6a2482f653250157657070b",
      "project_id": 4888518,
      "message": "deleted an extra line\n",
      "title": "deleted an extra line",
      "short_id": "437d608e",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2017-12-25T10:05:10Z",
      "diffs": [
        {
          "diff": "@@ -51,7 +51,6 @@ public class Parser {\n     if (requestMethod != null) {\n       List<QueryParam> queryParamList = getQueryParamList(method);\n       return getInvocation(someClass, method, uri, requestMethod, queryParamList);\n-\n     }\n     return new Invocation(someClass, method, uri);\n   }\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "437d608e"
        }
      ]
    },
    {
      "id": "97ef769e81fcb935e2938f640e9c1dfb69a4eec4",
      "project_id": 4888518,
      "message": "rename method to getParamRequestMethod\n",
      "title": "rename method to getParamRequestMethod",
      "short_id": "97ef769e",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2017-12-25T10:03:44Z",
      "diffs": [
        {
          "diff": "@@ -47,7 +47,7 @@ public class Parser {\n \n   public static Invocation getInvocation(Class<?> someClass, Method method) {\n     String uri = ((Path) Reflections.getAnnotation(method, Path.class)).value();\n-    Annotation requestMethod = getTeqRequestMethod(method);\n+    Annotation requestMethod = getParamRequestMethod(method);\n     if (requestMethod != null) {\n       List<QueryParam> queryParamList = getQueryParamList(method);\n       return getInvocation(someClass, method, uri, requestMethod, queryParamList);\n@@ -63,7 +63,7 @@ public class Parser {\n         new Invocation(someClass, method, uri, requestMethod, queryParamList);\n   }\n \n-  private static Annotation getTeqRequestMethod(Method method) {\n+  private static Annotation getParamRequestMethod(Method method) {\n     Annotation requestMethod = null;\n     if (method.isAnnotationPresent(GET.class)) {\n       requestMethod = Reflections.getAnnotation(method, GET.class);\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "97ef769e"
        }
      ]
    },
    {
      "id": "1a91fce690b9160314c548e9bcf94e682d6b1c07",
      "project_id": 4888518,
      "message": "add to Parser checkstyle change\n",
      "title": "add to Parser checkstyle change",
      "short_id": "1a91fce6",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2017-12-25T09:25:39Z",
      "diffs": [
        {
          "diff": "@@ -46,7 +46,7 @@ public class Parser {\n    */\n \n   public static Invocation getInvocation(Class<?> someClass, Method method) {\n-    String uri= ((Path) Reflections.getAnnotation(method, Path.class)).value();\n+    String uri = ((Path) Reflections.getAnnotation(method, Path.class)).value();\n     Annotation requestMethod = getTeqRequestMethod(method);\n     if (requestMethod != null) {\n       List<QueryParam> queryParamList = getQueryParamList(method);\n@@ -56,6 +56,13 @@ public class Parser {\n     return new Invocation(someClass, method, uri);\n   }\n \n+  private static Invocation getInvocation(Class<?> someClass, Method method,\n+                                          String uri, Annotation requestMethod,\n+                                          List<QueryParam> queryParamList) {\n+    return queryParamList.isEmpty() ? new Invocation(someClass, method, uri, requestMethod) :\n+        new Invocation(someClass, method, uri, requestMethod, queryParamList);\n+  }\n+\n   private static Annotation getTeqRequestMethod(Method method) {\n     Annotation requestMethod = null;\n     if (method.isAnnotationPresent(GET.class)) {\n@@ -66,11 +73,6 @@ public class Parser {\n     return requestMethod;\n   }\n \n-  private static Invocation getInvocation(Class<?> someClass, Method method, String uri, Annotation requestMethod, List<QueryParam> queryParamList) {\n-    return queryParamList.isEmpty() ? new Invocation(someClass, method, uri, requestMethod) :\n-        new Invocation(someClass, method, uri, requestMethod, queryParamList);\n-  }\n-\n   private static List<QueryParam> getQueryParamList(Method method) {\n     List<QueryParam> queryParams = new ArrayList<>();\n     Annotation[][] parameterAnnotations = method.getParameterAnnotations();\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "1a91fce6"
        }
      ]
    },
    {
      "id": "20e1440959414dc3a01f72929796c22deefe1e83",
      "project_id": 4888518,
      "message": "change name in the documentation\n",
      "title": "change name in the documentation",
      "short_id": "20e14409",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2017-12-23T11:39:32Z",
      "diffs": [
        {
          "diff": "@@ -36,7 +36,7 @@ public class Resource {\n \n   /**\n    * This method (getUsers)returns\n-   * String to sendPesponse.\n+   * String to sendResponse.\n    */\n   @Path(\"/query\")\n   @GET\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "20e14409"
        }
      ]
    },
    {
      "id": "c873e60d17c2bcb227dc79a7a707bbed6593c3f9",
      "project_id": 4888518,
      "message": "change name annotation\n",
      "title": "change name annotation",
      "short_id": "c873e60d",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2017-12-23T11:38:21Z",
      "diffs": [
        {
          "diff": "@@ -75,10 +75,10 @@ public class Parser {\n     List<QueryParam> queryParams = new ArrayList<>();\n     Annotation[][] parameterAnnotations = method.getParameterAnnotations();\n \n-    for (Annotation[] annotations : parameterAnnotations) {\n-      for (Annotation annotation1 : annotations) {\n-        if (annotation1 != null) {\n-          queryParams.add((QueryParam) annotation1);\n+    for (Annotation[] allAnnotations : parameterAnnotations) {\n+      for (Annotation paramAnnotation : allAnnotations) {\n+        if (paramAnnotation != null) {\n+          queryParams.add((QueryParam) paramAnnotation);\n         }\n       }\n     }\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c873e60d"
        }
      ]
    },
    {
      "id": "13006f7affa1fc8534f110a4253b88739ab351cf",
      "project_id": 4888518,
      "message": "change name\n",
      "title": "change name",
      "short_id": "13006f7a",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2017-12-23T11:37:05Z",
      "diffs": [
        {
          "diff": "@@ -47,7 +47,7 @@ public class Parser {\n \n   public static Invocation getInvocation(Class<?> someClass, Method method) {\n     String uri= ((Path) Reflections.getAnnotation(method, Path.class)).value();\n-    Annotation requestMethod = getTeqyestMethod(method);\n+    Annotation requestMethod = getTeqRequestMethod(method);\n     if (requestMethod != null) {\n       List<QueryParam> queryParamList = getQueryParamList(method);\n       return getInvocation(someClass, method, uri, requestMethod, queryParamList);\n@@ -56,7 +56,7 @@ public class Parser {\n     return new Invocation(someClass, method, uri);\n   }\n \n-  private static Annotation getTeqyestMethod(Method method) {\n+  private static Annotation getTeqRequestMethod(Method method) {\n     Annotation requestMethod = null;\n     if (method.isAnnotationPresent(GET.class)) {\n       requestMethod = Reflections.getAnnotation(method, GET.class);\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "13006f7a"
        }
      ]
    },
    {
      "id": "119e5af75fcf0446faf5eb2d038135f7f91e5ef8",
      "project_id": 4888518,
      "message": "new servlet Login\n",
      "title": "new servlet Login",
      "short_id": "119e5af7",
      "author_name": "Gryhoriev Mykhailo",
      "branches": null,
      "created_at": "2017-12-23T11:05:55Z",
      "diffs": [
        {
          "diff": "@@ -35,7 +35,8 @@ public class Resource {\n   }\n \n   /**\n-   * This method returns a string.\n+   * This method (getUsers)returns\n+   * String to sendPesponse.\n    */\n \n   @Path(\"/query\")\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "119e5af7"
        },
        {
          "diff": "@@ -4,6 +4,7 @@ import org.eclipse.jetty.server.Server;\n import org.eclipse.jetty.servlet.ServletContextHandler;\n import org.eclipse.jetty.servlet.ServletHolder;\n import ua.danit.framework.DispatcherServlet;\n+import ua.danit.framework.LoginServlet;\n \n public class WebApp {\n \n@@ -18,8 +19,11 @@ public class WebApp {\n     ServletContextHandler handler = new ServletContextHandler();\n \n     DispatcherServlet servlet = new DispatcherServlet(Resource.class);\n+    handler.addServlet(new ServletHolder(servlet), \"/\");\n+\n+    LoginServlet loginServlet = new LoginServlet();\n+    handler.addServlet(new ServletHolder(loginServlet), \"/login\");\n \n-    handler.addServlet(new ServletHolder(servlet), \"/*\");\n     server.setHandler(handler);\n     server.start();\n     server.join();\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "119e5af7"
        },
        {
          "diff": "@@ -5,6 +5,7 @@ import java.util.HashMap;\n import java.util.Map;\n \n import javax.servlet.ServletException;\n+import javax.servlet.http.Cookie;\n import javax.servlet.http.HttpServlet;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n@@ -33,17 +34,57 @@ public class DispatcherServlet extends HttpServlet {\n   @Override\n   protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n       throws ServletException, IOException {\n+\n+    String loginName = null;\n+\n+    if (req.getCookies() != null) {\n+\n+      for (Cookie cookie : req.getCookies()) {\n+        String cookieName = cookie.getName();\n+        if (cookieName != null && cookieName.equals(\"flight-user\")) {\n+          loginName = cookie.getValue();\n+        }\n+      }\n+    }\n+\n+    if (loginName == null) {\n+      resp.sendRedirect(\"/login\");\n+    } else {\n+      String uri = req.getRequestURI();\n+\n+      Invocation invoc = resources.get(uri);\n+\n+      if (canHandleGetMethod(invoc)) {\n+        handleMethod(req, resp, invoc);\n+      } else {\n+        resp.sendError(404);\n+      }\n+    }\n+  }\n+\n+\n+  private boolean canHandleGetMethod(Invocation invoc) {\n+    return invoc != null && invoc.getHttpMethod() instanceof GET;\n+  }\n+\n+  @Override\n+  protected void doPost(HttpServletRequest req, HttpServletResponse resp)\n+      throws ServletException, IOException {\n     String uri = req.getRequestURI();\n \n     Invocation invoc = resources.get(uri);\n \n-    if (canHandleGetMethod(invoc)) {\n+    if (canHandlePostMethod(invoc)) {\n       handleMethod(req, resp, invoc);\n     } else {\n       resp.sendError(404);\n     }\n   }\n \n+  private boolean canHandlePostMethod(Invocation invoc) {\n+    return invoc.getHttpMethod() instanceof POST;\n+  }\n+\n   private void handleMethod(HttpServletRequest req, HttpServletResponse resp, Invocation invoc)\n       throws IOException {\n \n@@ -66,25 +107,4 @@ public class DispatcherServlet extends HttpServlet {\n     return req.getQueryString() != null;\n   }\n \n-  private boolean canHandleGetMethod(Invocation invoc) {\n-    return invoc.getHttpMethod() instanceof GET;\n-  }\n-\n-  @Override\n-  protected void doPost(HttpServletRequest req, HttpServletResponse resp)\n-      throws ServletException, IOException {\n-    String uri = req.getRequestURI();\n-    Invocation invoc = resources.get(uri);\n-\n-    if (canHandlePostMethod(invoc)) {\n-      handleMethod(req, resp, invoc);\n-    } else {\n-      resp.sendError(404);\n-    }\n-  }\n-\n-  private boolean canHandlePostMethod(Invocation invoc) {\n-    return invoc.getHttpMethod() instanceof POST;\n-  }\n-\n }\n\\ No newline at end of file\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "119e5af7"
        },
        {
          "diff": "@@ -0,0 +1,44 @@\n+package ua.danit.framework;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+\n+public class LoginServlet extends HttpServlet {\n+\n+  private static final String loginForm =\n+      \"<html><body>\" +\n+      \" <form method = 'post'>\" +\n+      \" <input name = 'login' type = 'text'><br>\" +\n+      \" <input name = 'password' type = 'password'><br>\" +\n+      \" <button type = 'submit'>Submit</button><br>\" +\n+      \"</form></body></html>\";\n+\n+  @Override\n+  protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+    String loginName = null;\n+\n+    if (req.getCookies() != null) {\n+\n+      for (Cookie cookie : req.getCookies()) {\n+        String cookieName = cookie.getName();\n+        if (cookieName != null && cookieName.equals(\"flight-user\")) {\n+          loginName = cookie.getValue();\n+        }\n+      }\n+    }\n+\n+    resp.getWriter().write(loginName == null\n+        || loginName.isEmpty() ? loginForm : loginName);\n+  }\n+\n+  @Override\n+  protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+    String login = req.getParameter(\"login\");\n+    String password = req.getParameter(\"password\");\n+    resp.addCookie(new Cookie(\"flight-user\", login));\n+  }\n+}\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/LoginServlet.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/LoginServlet.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "119e5af7"
        },
        {
          "diff": "@@ -26,7 +26,7 @@ public class Invocation {\n   }\n \n   /**\n-   * This constructor creates an object with parameters Get or Post\n+   * This constructor creates an object with parameters Get or Post.\n    */\n \n   public Invocation(Class<?> clazz, Method method, String url, Annotation httpMethod) {\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/invocations/Invocation.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/invocations/Invocation.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "119e5af7"
        }
      ]
    },
    {
      "id": "3a124c8a63737ad8f3fe27eeffd6258cfd804ba3",
      "project_id": 4888518,
      "message": "some changes\n",
      "title": "some changes",
      "short_id": "3a124c8a",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2017-12-22T19:28:20Z",
      "diffs": [
        {
          "diff": "@@ -47,19 +47,28 @@ public class Parser {\n \n   public static Invocation getInvocation(Class<?> someClass, Method method) {\n     String uri= ((Path) Reflections.getAnnotation(method, Path.class)).value();\n+    Annotation requestMethod = getTeqyestMethod(method);\n+    if (requestMethod != null) {\n+      List<QueryParam> queryParamList = getQueryParamList(method);\n+      return getInvocation(someClass, method, uri, requestMethod, queryParamList);\n+\n+    }\n+    return new Invocation(someClass, method, uri);\n+  }\n+\n+  private static Annotation getTeqyestMethod(Method method) {\n     Annotation requestMethod = null;\n     if (method.isAnnotationPresent(GET.class)) {\n       requestMethod = Reflections.getAnnotation(method, GET.class);\n     } else if (method.isAnnotationPresent(POST.class)) {\n       requestMethod = Reflections.getAnnotation(method, POST.class);\n     }\n-    if (requestMethod != null) {\n-      List<QueryParam> queryParamList = getQueryParamList(method);\n-      return queryParamList.isEmpty() ? new Invocation(someClass, method, uri, requestMethod) :\n-          new Invocation(someClass, method, uri, requestMethod, queryParamList);\n+    return requestMethod;\n+  }\n \n-    }\n-    return new Invocation(someClass, method, uri);\n+  private static Invocation getInvocation(Class<?> someClass, Method method, String uri, Annotation requestMethod, List<QueryParam> queryParamList) {\n+    return queryParamList.isEmpty() ? new Invocation(someClass, method, uri, requestMethod) :\n+        new Invocation(someClass, method, uri, requestMethod, queryParamList);\n   }\n \n   private static List<QueryParam> getQueryParamList(Method method) {\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "3a124c8a"
        }
      ]
    },
    {
      "id": "fe2974004d8df5e79595378816088180cf62c1d2",
      "project_id": 4888518,
      "message": "uri=((path)from reflection).value\n",
      "title": "uri=((path)from reflection).value",
      "short_id": "fe297400",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2017-12-22T19:17:48Z",
      "diffs": [
        {
          "diff": "@@ -46,8 +46,7 @@ public class Parser {\n    */\n \n   public static Invocation getInvocation(Class<?> someClass, Method method) {\n-    Path path = (Path) Reflections.getAnnotation(method, Path.class);\n-    String uri = path.value();\n+    String uri= ((Path) Reflections.getAnnotation(method, Path.class)).value();\n     Annotation requestMethod = null;\n     if (method.isAnnotationPresent(GET.class)) {\n       requestMethod = Reflections.getAnnotation(method, GET.class);\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "fe297400"
        }
      ]
    },
    {
      "id": "c2fef8a49921a2a2b65a9dabfc2824eb12dcdc33",
      "project_id": 4888518,
      "message": "rename some re and another\n",
      "title": "rename some re and another",
      "short_id": "c2fef8a4",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2017-12-22T19:13:33Z",
      "diffs": [
        {
          "diff": "@@ -35,9 +35,9 @@ public class Resource {\n   }\n \n   /**\n-   * This method returns a string.\n+   * This method (getUsers)returns\n+   * String to sendPesponse.\n    */\n-\n   @Path(\"/query\")\n   @GET\n   public String getUsers(@QueryParam(\"user\") String name) {\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c2fef8a4"
        },
        {
          "diff": "@@ -75,7 +75,6 @@ public class DispatcherServlet extends HttpServlet {\n       throws ServletException, IOException {\n     String uri = req.getRequestURI();\n     Invocation invoc = resources.get(uri);\n-\n     if (canHandlePostMethod(invoc)) {\n       handleMethod(req, resp, invoc);\n     } else {\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c2fef8a4"
        },
        {
          "diff": "@@ -41,7 +41,8 @@ public class Parser {\n \n   /**\n    * This method.\n-   * Parsing the incoming class relative to the http methods and returns Invocation based on this data\n+   * Parsing the incoming class relative to the http methods and returns\n+   * Invocation based on this data\n    */\n \n   public static Invocation getInvocation(Class<?> someClass, Method method) {\n@@ -63,16 +64,16 @@ public class Parser {\n   }\n \n   private static List<QueryParam> getQueryParamList(Method method) {\n-    List<QueryParam> some = new ArrayList<>();\n-    Annotation[][] res = method.getParameterAnnotations();\n+    List<QueryParam> queryParams = new ArrayList<>();\n+    Annotation[][] parameterAnnotations = method.getParameterAnnotations();\n \n-    for (Annotation[] re : res) {\n-      for (Annotation annotation1 : re) {\n+    for (Annotation[] annotations : parameterAnnotations) {\n+      for (Annotation annotation1 : annotations) {\n         if (annotation1 != null) {\n-          some.add((QueryParam) annotation1);\n+          queryParams.add((QueryParam) annotation1);\n         }\n       }\n     }\n-    return some;\n+    return queryParams;\n   }\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c2fef8a4"
        },
        {
          "diff": "@@ -26,7 +26,7 @@ public class Invocation {\n   }\n \n   /**\n-   * This constructor creates an object with parameters Get or Post\n+   * This constructor creates an object with parameters Get or Post.\n    */\n \n   public Invocation(Class<?> clazz, Method method, String url, Annotation httpMethod) {\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/invocations/Invocation.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/invocations/Invocation.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c2fef8a4"
        }
      ]
    },
    {
      "id": "b689f333e4da935a162af88210573493a898b364",
      "project_id": 4888518,
      "message": "refactoring Parser.java\n",
      "title": "refactoring Parser.java",
      "short_id": "b689f333",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2017-12-22T13:45:30Z",
      "diffs": [
        {
          "diff": "@@ -40,33 +40,39 @@ public class Parser {\n   }\n \n   /**\n-   * getInvocation(Class<?> someClass, Method method).\n-   * This method returns an object of the Class that\n-   * encapsulate method parameters and annotations taken by reflection API\n+   * This method.\n+   * Parsing the incoming class relative to the http methods and returns Invocation based on this data\n    */\n \n   public static Invocation getInvocation(Class<?> someClass, Method method) {\n     Path path = (Path) Reflections.getAnnotation(method, Path.class);\n     String uri = path.value();\n-    Annotation annotation = Reflections.getAnnotation(method, GET.class);\n-    if (annotation == null) {\n-      annotation = Reflections.getAnnotation(method, POST.class);\n+    Annotation requestMethod = null;\n+    if (method.isAnnotationPresent(GET.class)) {\n+      requestMethod = Reflections.getAnnotation(method, GET.class);\n+    } else if (method.isAnnotationPresent(POST.class)) {\n+      requestMethod = Reflections.getAnnotation(method, POST.class);\n     }\n-    if (annotation != null) {\n-      List<QueryParam> some = new ArrayList<>();\n-      Annotation[][] res = method.getParameterAnnotations();\n+    if (requestMethod != null) {\n+      List<QueryParam> queryParamList = getQueryParamList(method);\n+      return queryParamList.isEmpty() ? new Invocation(someClass, method, uri, requestMethod) :\n+          new Invocation(someClass, method, uri, requestMethod, queryParamList);\n \n-      for (Annotation[] re : res) {\n-        for (Annotation annotation1 : re) {\n-          if (annotation1 != null) {\n-            some.add((QueryParam) annotation1);\n-          }\n+    }\n+    return new Invocation(someClass, method, uri);\n+  }\n+\n+  private static List<QueryParam> getQueryParamList(Method method) {\n+    List<QueryParam> some = new ArrayList<>();\n+    Annotation[][] res = method.getParameterAnnotations();\n+\n+    for (Annotation[] re : res) {\n+      for (Annotation annotation1 : re) {\n+        if (annotation1 != null) {\n+          some.add((QueryParam) annotation1);\n         }\n       }\n-      return some == null ? new Invocation(someClass, method, uri, annotation) :\n-          new Invocation(someClass, method, uri, annotation, some);\n-\n     }\n-    return new Invocation(someClass, method, uri);\n+    return some;\n   }\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "b689f333"
        }
      ]
    },
    {
      "id": "127d76e3ca047fa2a8544fc0f2c9a7c6231394ce",
      "project_id": 4888518,
      "message": "Merge branch 'mk' into 'master'\n\nMk\n\nSee merge request korsa719/Flights!8",
      "title": "Merge branch 'mk' into 'master'",
      "short_id": "127d76e3",
      "author_name": "Volodymyr Derkach",
      "branches": null,
      "created_at": "2017-12-22T11:23:10Z",
      "diffs": [
        {
          "diff": "@@ -1,8 +1,13 @@\n package ua.danit;\n \n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityTransaction;\n+import javax.persistence.FlushModeType;\n+import javax.persistence.LockModeType;\n+import javax.persistence.Query;\n+\n import ua.danit.application.Ticket;\n \n-import javax.persistence.*;\n \n public class DanItEntityManager implements EntityManager {\n   public DanItEntityManager(Class<Ticket> ticketClass) {\n@@ -24,12 +29,12 @@ public class DanItEntityManager implements EntityManager {\n   }\n \n   @Override\n-  public <T> T find(Class<T> aClass, Object o) {\n+  public <T> T find(Class<T> someClass, Object o) {\n     return null;\n   }\n \n   @Override\n-  public <T> T getReference(Class<T> aClass, Object o) {\n+  public <T> T getReference(Class<T> someClass, Object o) {\n     return null;\n   }\n \n@@ -39,13 +44,13 @@ public class DanItEntityManager implements EntityManager {\n   }\n \n   @Override\n-  public void setFlushMode(FlushModeType flushModeType) {\n-\n+  public FlushModeType getFlushMode() {\n+    return null;\n   }\n \n   @Override\n-  public FlushModeType getFlushMode() {\n-    return null;\n+  public void setFlushMode(FlushModeType flushModeType) {\n+\n   }\n \n   @Override\n@@ -84,7 +89,7 @@ public class DanItEntityManager implements EntityManager {\n   }\n \n   @Override\n-  public Query createNativeQuery(String s, Class aClass) {\n+  public Query createNativeQuery(String s, Class someClass) {\n     return null;\n   }\n \n",
          "old_path": "flights-app/src/main/java/ua/danit/DanItEntityManager.java",
          "new_path": "flights-app/src/main/java/ua/danit/DanItEntityManager.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "127d76e3"
        },
        {
          "diff": "@@ -4,46 +4,50 @@ import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n import javax.ws.rs.QueryParam;\n-import javax.ws.rs.core.Response;\n \n public class Resource {\n-    private final static String HTML_TEMPLATE = \"<!DOCTYPE html>\\n\" +\n-            \"<html>\\n<head><title>British Airlines</title></head>\" +\n-            \"<body><h1 style=\\\" text-align: center; \\\">%s</h1></body></html>\";\n-\n-    @Path(\"/\")\n-    @GET\n-    public String welcome() {\n-        return sendResponse(\"Welcome to British Airlines\");\n-    }\n-\n-    @Path(\"/weather\")\n-    @GET\n-    public String getWeather() {\n-        return sendResponse(\"Today weather is cool isn't\");\n-    }\n-\n-    @Path(\"/flights\")\n-    @GET\n-    public String getFlights() {\n-        return sendResponse(\"Today all routes closed\");\n-    }\n-\n-    @Path(\"/tickets\")\n-    @POST\n-    public String getTickets() {\n-        return sendResponse(\"No ticket available\");\n-    }\n-\n-    @Path(\"/query\")\n-    @GET\n-    public String getUsers( @QueryParam(\"user\") String name) {\n-\n-        return sendResponse(\"User name is : \"+name);\n-\n-    }\n-\n-    private String sendResponse(String response) {\n-        return String.format(HTML_TEMPLATE, response);\n-    }\n+  public static final String HTML_TEMPLATE = \"<!DOCTYPE html>\\n\"\n+      + \"<html>\\n<head><title>British Airlines</title></head>\"\n+      + \"<body><h1 style=\\\" text-align: center; \\\">%s</h1></body></html>\";\n+\n+  @Path(\"/\")\n+  @GET\n+  public String welcome() {\n+    return sendResponse(\"Welcome to British Airlines\");\n+  }\n+\n+  @Path(\"/weather\")\n+  @GET\n+  public String getWeather() {\n+    return sendResponse(\"Today weather is cool isn't\");\n+  }\n+\n+  @Path(\"/flights\")\n+  @GET\n+  public String getFlights() {\n+    return sendResponse(\"Today all routes closed\");\n+  }\n+\n+  @Path(\"/tickets\")\n+  @POST\n+  public String getTickets() {\n+    return sendResponse(\"No ticket available\");\n+  }\n+\n+  /**\n+   * This method returns a string.\n+   */\n+\n+  @Path(\"/query\")\n+  @GET\n+  public String getUsers(@QueryParam(\"user\") String name) {\n+\n+    return sendResponse(\"User name is : \" + name);\n+\n+  }\n+\n+\n+  private String sendResponse(String response) {\n+    return String.format(HTML_TEMPLATE, response);\n+  }\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "127d76e3"
        },
        {
          "diff": "@@ -1,12 +1,17 @@\n package ua.danit.application;\n \n-import ua.danit.framework.DispatcherServlet;\n-\n import org.eclipse.jetty.server.Server;\n import org.eclipse.jetty.servlet.ServletContextHandler;\n import org.eclipse.jetty.servlet.ServletHolder;\n+import ua.danit.framework.DispatcherServlet;\n \n public class WebApp {\n+\n+  /**\n+   * This method is the entry point of our application ...\n+   * creates a server, creates a handler, parser classes\n+   */\n+\n   public static void main(String[] args) throws Exception {\n \n     Server server = new Server(8080);\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "127d76e3"
        },
        {
          "diff": "@@ -1,6 +1,8 @@\n package ua.danit.framework;\n \n-import ua.danit.framework.invocations.Invocation;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n \n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServlet;\n@@ -10,22 +12,27 @@ import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n import javax.ws.rs.QueryParam;\n \n-import java.io.IOException;\n-import java.util.HashMap;\n-import java.util.Map;\n+import ua.danit.framework.invocations.Invocation;\n+\n \n public class DispatcherServlet extends HttpServlet {\n \n   Map<String, Invocation> resources = new HashMap<>();\n \n+  /**\n+   * DispatcherServlet.\n+   * This designer DispatchServlet constructor\n+   */\n+\n   public DispatcherServlet(Class<?>... classes) {\n-    for (Class<?> aClass : classes) {\n-      resources.putAll(Parser.getClassInvocations(aClass));\n+    for (Class<?> someClass : classes) {\n+      resources.putAll(Parser.getClassInvocations(someClass));\n     }\n   }\n \n   @Override\n-  protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+  protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n+      throws ServletException, IOException {\n     String uri = req.getRequestURI();\n \n     Invocation invoc = resources.get(uri);\n@@ -37,9 +44,10 @@ public class DispatcherServlet extends HttpServlet {\n     }\n   }\n \n-  private void handleMethod(HttpServletRequest req, HttpServletResponse resp, Invocation invoc) throws IOException {\n+  private void handleMethod(HttpServletRequest req, HttpServletResponse resp, Invocation invoc)\n+      throws IOException {\n \n-    String result = hasQueryParams(req) ? getHttpResult(req, invoc): invoc.invoke();\n+    String result = hasQueryParams(req) ? getHttpResult(req, invoc) : invoc.invoke();\n     resp.getWriter().write(result);\n   }\n \n@@ -63,7 +71,8 @@ public class DispatcherServlet extends HttpServlet {\n   }\n \n   @Override\n-  protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+  protected void doPost(HttpServletRequest req, HttpServletResponse resp)\n+      throws ServletException, IOException {\n     String uri = req.getRequestURI();\n     Invocation invoc = resources.get(uri);\n \n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "127d76e3"
        },
        {
          "diff": "@@ -1,12 +1,7 @@\n package ua.danit.framework;\n \n-import ua.danit.framework.invocations.Invocation;\n-import ua.danit.framework.utils.Reflections;\n+import static ua.danit.framework.utils.Reflections.getMethods;\n \n-import javax.ws.rs.GET;\n-import javax.ws.rs.POST;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.QueryParam;\n import java.lang.annotation.Annotation;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n@@ -14,16 +9,29 @@ import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n-import static ua.danit.framework.utils.Reflections.getMethods;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.QueryParam;\n+\n+import ua.danit.framework.invocations.Invocation;\n+import ua.danit.framework.utils.Reflections;\n+\n \n public class Parser {\n \n-  public static Map<String, Invocation> getClassInvocations(Class<?> aClass) {\n+  /**\n+   * getClassInvocations(Class<?> someClass).\n+   * This method returns maps with all invocations for the given class,\n+   * where value inside @Path annotation over the method represents key.\n+   */\n+\n+  public static Map<String, Invocation> getClassInvocations(Class<?> someClass) {\n     Map<String, Invocation> resources = new HashMap<>();\n \n-    for (Method method : getMethods(aClass)) {\n+    for (Method method : getMethods(someClass)) {\n       if (method.isAnnotationPresent(Path.class)) {\n-        Invocation invoc = getInvocation(aClass, method);\n+        Invocation invoc = getInvocation(someClass, method);\n         resources.put(invoc.getUrl(), invoc);\n       }\n     }\n@@ -31,8 +39,13 @@ public class Parser {\n     return resources;\n   }\n \n+  /**\n+   * getInvocation(Class<?> someClass, Method method).\n+   * This method returns an object of the Class that\n+   * encapsulate method parameters and annotations taken by reflection API\n+   */\n \n-  public static Invocation getInvocation(Class<?> aClass, Method method) {\n+  public static Invocation getInvocation(Class<?> someClass, Method method) {\n     Path path = (Path) Reflections.getAnnotation(method, Path.class);\n     String uri = path.value();\n     Annotation annotation = Reflections.getAnnotation(method, GET.class);\n@@ -50,12 +63,10 @@ public class Parser {\n           }\n         }\n       }\n-      if (some == null) {\n-        return new Invocation(aClass, method, uri, annotation);\n-      } else {\n-        return new Invocation(aClass, method, uri, annotation, some);\n-      }\n+      return some == null ? new Invocation(someClass, method, uri, annotation) :\n+          new Invocation(someClass, method, uri, annotation, some);\n+\n     }\n-    return new Invocation(aClass, method, uri);\n+    return new Invocation(someClass, method, uri);\n   }\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "127d76e3"
        },
        {
          "diff": "@@ -1,96 +1,108 @@\n package ua.danit.framework.invocations;\n \n-import javax.ws.rs.QueryParam;\n import java.lang.annotation.Annotation;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.util.List;\n \n+import javax.ws.rs.QueryParam;\n+\n public class Invocation {\n-    private Class<?> clazz;\n-    private Method method;\n-    private String url;\n-\n-    private Annotation httpMethod;\n-    private String annotationsParametr;\n-    private List<QueryParam> queryParamList;\n-\n-    public Invocation(Class<?> clazz, Method method, String url) {\n-        this.method = method;\n-        this.clazz = clazz;\n-        this.url = url;\n-    }\n+  private Class<?> clazz;\n+  private Method method;\n+  private String url;\n \n-    public Invocation ( Class <?> clazz, Method method, String url, Annotation httpMethod ) {\n-        this.url = url;\n-        this.clazz = clazz;\n-        this.method = method;\n-        this.httpMethod = httpMethod;\n-    }\n+  private Annotation httpMethod;\n+  private List<QueryParam> queryParamList;\n \n-    public Invocation ( Class <?> clazz, Method method, String url, Annotation httpMethod, String annotationsParametr ) {\n-        this.url = url;\n-        this.clazz = clazz;\n-        this.method = method;\n-        this.httpMethod = httpMethod;\n-        this.annotationsParametr = annotationsParametr;\n-    }\n+  /**\n+   * This constructor creates an object with parameters Path.\n+   */\n \n-    public List <QueryParam> getQueryParamList () {\n-        return queryParamList;\n-    }\n+  public Invocation(Class<?> clazz, Method method, String url) {\n+    this.method = method;\n+    this.clazz = clazz;\n+    this.url = url;\n+  }\n \n-    public Invocation ( Class <?> clazz, Method method, String url, Annotation httpMethod, List <QueryParam> queryParamList ) {\n-        this.clazz = clazz;\n-        this.method = method;\n-        this.url = url;\n-        this.httpMethod = httpMethod;\n+  /**\n+   * This constructor creates an object with parameters Get or Post\n+   */\n \n-        this.queryParamList = queryParamList;\n+  public Invocation(Class<?> clazz, Method method, String url, Annotation httpMethod) {\n+    this.url = url;\n+    this.clazz = clazz;\n+    this.method = method;\n+    this.httpMethod = httpMethod;\n+  }\n \n-    }\n \n-    public String getAnnotationsParametr () {\n-        return annotationsParametr;\n-    }\n+  /**\n+   * This constructor creates an object with parameters QueryParam.\n+   */\n \n-    public Annotation getHttpMethod () {\n-        return httpMethod;\n-    }\n+  public Invocation(Class<?> clazz, Method method, String url, Annotation httpMethod,\n+                    List<QueryParam> queryParamList) {\n+    this.clazz = clazz;\n+    this.method = method;\n+    this.url = url;\n+    this.httpMethod = httpMethod;\n \n-    public String getUrl() {\n-        return url;\n-    }\n+    this.queryParamList = queryParamList;\n+\n+  }\n+\n+  /**\n+   * This method return a list contains a QueryParam.\n+   */\n+\n+  public List<QueryParam> getQueryParamList() {\n+    return queryParamList;\n+  }\n \n-    public Method getMethod() {\n-        return method;\n-    }\n \n-    public String invoke() {\n-        try {\n-            return (String)method.invoke(clazz.newInstance(), null);\n-        } catch (IllegalAccessException e) {\n-            e.printStackTrace();\n-        } catch (InvocationTargetException e) {\n-            e.printStackTrace();\n-        } catch (InstantiationException e) {\n-            e.printStackTrace();\n-        }\n-\n-        return \"Error 404\";\n+  public Annotation getHttpMethod() {\n+    return httpMethod;\n+  }\n+\n+  public String getUrl() {\n+    return url;\n+  }\n+\n+\n+  /**\n+   * This method a calls invoke without parameters.\n+   */\n+\n+  public String invoke() {\n+    try {\n+      return (String) method.invoke(clazz.newInstance(), null);\n+    } catch (IllegalAccessException e) {\n+      e.printStackTrace();\n+    } catch (InvocationTargetException e) {\n+      e.printStackTrace();\n+    } catch (InstantiationException e) {\n+      e.printStackTrace();\n     }\n \n-    public String invoke(String str){\n-        try {\n-            return (String)method.invoke(clazz.newInstance(), str);\n-        } catch (IllegalAccessException e) {\n-            e.printStackTrace();\n-        } catch (InvocationTargetException e) {\n-            e.printStackTrace();\n-        } catch (InstantiationException e) {\n-            e.printStackTrace();\n-        }\n-\n-        return \"Error 404\";\n+    return \"Error 404\";\n+  }\n+\n+  /**\n+   * This method a calls invoke with parameters.\n+   */\n+\n+  public String invoke(String str) {\n+    try {\n+      return (String) method.invoke(clazz.newInstance(), str);\n+    } catch (IllegalAccessException e) {\n+      e.printStackTrace();\n+    } catch (InvocationTargetException e) {\n+      e.printStackTrace();\n+    } catch (InstantiationException e) {\n+      e.printStackTrace();\n     }\n+\n+    return \"Error 404\";\n+  }\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/invocations/Invocation.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/invocations/Invocation.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "127d76e3"
        },
        {
          "diff": "@@ -1,29 +1,46 @@\n package ua.danit.framework.utils;\n \n-import ua.danit.framework.invocations.Parameter;\n-\n import java.lang.annotation.Annotation;\n import java.lang.reflect.Method;\n import java.util.Arrays;\n import java.util.List;\n \n+import ua.danit.framework.invocations.Parameter;\n+\n+\n public class Reflections {\n \n-    public static List<Method> getMethods(Class clazz) {\n-        if (clazz == null) {\n-            return null;\n-        }\n-        return Arrays.asList(clazz.getMethods());\n+  /**\n+   * getMethods(Class clazz).\n+   * This method takes from the class all the methods that are in it,\n+   * through reflection API\n+   */\n+  public static List<Method> getMethods(Class clazz) {\n+    if (clazz == null) {\n+      return null;\n     }\n+    return Arrays.asList(clazz.getMethods());\n+  }\n \n-    public static Annotation getAnnotation (Method method, Class anno) {\n-        if (method == null) {\n-            return null;\n-        }\n-        return method.getAnnotation(anno);\n-    }\n+  /**\n+   * getAnnotation(Method method, Class anno).\n+   * This method takes from the class each methods and take all annotation that are in it,\n+   * through reflection API\n+   */\n \n-    public static List<Parameter> getParameters(Method getMethod) {\n-        return null;\n+  public static Annotation getAnnotation(Method method, Class anno) {\n+    if (method == null) {\n+      return null;\n     }\n+    return method.getAnnotation(anno);\n+  }\n+\n+  /**\n+   * getParameters(Method getMethod).\n+   * This method taken from method all parameters through reflection API\n+   */\n+\n+  public static List<Parameter> getParameters(Method getMethod) {\n+    return null;\n+  }\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/utils/Reflections.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/utils/Reflections.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "127d76e3"
        },
        {
          "diff": "@@ -2,4 +2,4 @@\n \n mvn clean package \n cd target/ \n-java -jar jax-rs-playground-1.0-SNAPSHOT-jar-with-dependencies.jar\n+java -jar *dependencies.jar\n",
          "old_path": "flights-app/start.sh",
          "new_path": "flights-app/start.sh",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "127d76e3"
        }
      ]
    },
    {
      "id": "668380093957be1cec86b8300ac2d085b4e8bdc9",
      "project_id": 4888518,
      "message": "delete getUsers from comment\n",
      "title": "delete getUsers from comment",
      "short_id": "66838009",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2017-12-22T10:32:35Z",
      "diffs": [
        {
          "diff": "@@ -35,8 +35,7 @@ public class Resource {\n   }\n \n   /**\n-   * getUsers.\n-   * This method returns a string using a parameter from the query\n+   * This method returns a string.\n    */\n \n   @Path(\"/query\")\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "66838009"
        },
        {
          "diff": "@@ -16,8 +16,7 @@ public class Invocation {\n   private List<QueryParam> queryParamList;\n \n   /**\n-   * This constructor creates an object with parameters.\n-   * Class Method Path\n+   * This constructor creates an object with parameters Path.\n    */\n \n   public Invocation(Class<?> clazz, Method method, String url) {\n@@ -27,8 +26,7 @@ public class Invocation {\n   }\n \n   /**\n-   * This constructor creates an object with parameters.\n-   * Path and GET or POST\n+   * This constructor creates an object with parameters Get or Post\n    */\n \n   public Invocation(Class<?> clazz, Method method, String url, Annotation httpMethod) {\n@@ -40,8 +38,7 @@ public class Invocation {\n \n \n   /**\n-   * This constructor creates an object with parameters.\n-   * Class Method Path  GET or POST QueryParam\n+   * This constructor creates an object with parameters QueryParam.\n    */\n \n   public Invocation(Class<?> clazz, Method method, String url, Annotation httpMethod,\n@@ -74,7 +71,7 @@ public class Invocation {\n \n \n   /**\n-   * This method a call invoke without parameters.\n+   * This method a calls invoke without parameters.\n    */\n \n   public String invoke() {\n@@ -92,7 +89,7 @@ public class Invocation {\n   }\n \n   /**\n-   * This method a call invoke with parameters.\n+   * This method a calls invoke with parameters.\n    */\n \n   public String invoke(String str) {\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/invocations/Invocation.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/invocations/Invocation.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "66838009"
        }
      ]
    },
    {
      "id": "556368e14f82e3fc6c5d5f16a162feca7b6abc12",
      "project_id": 4888518,
      "message": "add changes in class Onvocation\n",
      "title": "add changes in class Onvocation",
      "short_id": "556368e1",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2017-12-22T09:52:31Z",
      "diffs": [
        {
          "diff": "@@ -16,9 +16,8 @@ public class Invocation {\n   private List<QueryParam> queryParamList;\n \n   /**\n-   * Class<?> clazz, Method method, String url.\n-   * This method create an object with parameters taken from the method,\n-   * if the annotation method is present @Path\n+   * This constructor creates an object with parameters.\n+   * Class Method Path\n    */\n \n   public Invocation(Class<?> clazz, Method method, String url) {\n@@ -28,9 +27,8 @@ public class Invocation {\n   }\n \n   /**\n-   * Class<?> clazz, Method method, String url, Annotation httpMethod.\n-   * This method create an object with parameters taken from the method,\n-   * if the annotation method is present @Path and @GET or @POST\n+   * This constructor creates an object with parameters.\n+   * Path and GET or POST\n    */\n \n   public Invocation(Class<?> clazz, Method method, String url, Annotation httpMethod) {\n@@ -42,9 +40,8 @@ public class Invocation {\n \n \n   /**\n-   * Create an object with method parameters.\n-   * This method create an object with parameters taken from the method,\n-   * if the annotation method is present @Path and @GET or @POST and @QueryParam\n+   * This constructor creates an object with parameters.\n+   * Class Method Path  GET or POST QueryParam\n    */\n \n   public Invocation(Class<?> clazz, Method method, String url, Annotation httpMethod,\n@@ -59,9 +56,7 @@ public class Invocation {\n   }\n \n   /**\n-   * getQueryParamList.\n-   * This method get a list contains\n-   * a QueryParam taken from the method\n+   * This method return a list contains a QueryParam.\n    */\n \n   public List<QueryParam> getQueryParamList() {\n@@ -79,8 +74,7 @@ public class Invocation {\n \n \n   /**\n-   * invoke().\n-   * This method a call invoke without parameters\n+   * This method a call invoke without parameters.\n    */\n \n   public String invoke() {\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/invocations/Invocation.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/invocations/Invocation.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "556368e1"
        }
      ]
    },
    {
      "id": "000215d4c85e2b7d1f9a14bec8b6533db7b635da",
      "project_id": 4888518,
      "message": "processed 2 errors in description\n",
      "title": "processed 2 errors in description",
      "short_id": "000215d4",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2017-12-22T09:46:00Z",
      "diffs": [
        {
          "diff": "@@ -16,7 +16,7 @@ public class Invocation {\n   private List<QueryParam> queryParamList;\n \n   /**\n-   * Invocation(Class<?> clazz, Method method, String url).\n+   * Class<?> clazz, Method method, String url.\n    * This method create an object with parameters taken from the method,\n    * if the annotation method is present @Path\n    */\n@@ -28,9 +28,9 @@ public class Invocation {\n   }\n \n   /**\n-   * Invocation(Class<?> clazz, Method method, String url, Annotation httpMethod).\n+   * Class<?> clazz, Method method, String url, Annotation httpMethod.\n    * This method create an object with parameters taken from the method,\n-   * if the annotation method is present @Path and @GET ot @POST\n+   * if the annotation method is present @Path and @GET or @POST\n    */\n \n   public Invocation(Class<?> clazz, Method method, String url, Annotation httpMethod) {\n@@ -42,9 +42,9 @@ public class Invocation {\n \n \n   /**\n-   * Invocation( clazz, method, url,httpMethod,queryParamList).\n+   * Create an object with method parameters.\n    * This method create an object with parameters taken from the method,\n-   * if the annotation method is present @Path and @GET ot @POST and @QueryParam\n+   * if the annotation method is present @Path and @GET or @POST and @QueryParam\n    */\n \n   public Invocation(Class<?> clazz, Method method, String url, Annotation httpMethod,\n@@ -98,7 +98,7 @@ public class Invocation {\n   }\n \n   /**\n-   * This method a call invoke with parameters\n+   * This method a call invoke with parameters.\n    */\n \n   public String invoke(String str) {\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/invocations/Invocation.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/invocations/Invocation.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "000215d4"
        }
      ]
    },
    {
      "id": "414cb47775810f5df09e366fbbdf2e6229b7066a",
      "project_id": 4888518,
      "message": "some changes\n",
      "title": "some changes",
      "short_id": "414cb477",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2017-12-22T09:37:37Z",
      "diffs": [
        {
          "diff": "@@ -36,8 +36,7 @@ public class Resource {\n \n   /**\n    * getUsers.\n-   * This method has the parameter @QueryParam and takes the value\n-   * \"user\" as a parameter from the query\n+   * This method returns a string using a parameter from the query\n    */\n \n   @Path(\"/query\")\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "414cb477"
        },
        {
          "diff": "@@ -8,8 +8,8 @@ import ua.danit.framework.DispatcherServlet;\n public class WebApp {\n \n   /**\n-   * This method doing ..,\n-   * jdghdj\n+   * This method is the entry point of our application ...\n+   * creates a server, creates a handler, parser classes\n    */\n \n   public static void main(String[] args) throws Exception {\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "414cb477"
        },
        {
          "diff": "@@ -21,8 +21,7 @@ public class DispatcherServlet extends HttpServlet {\n \n   /**\n    * DispatcherServlet.\n-   * This method returns maps with all invocations for the given class,\n-   * foreach class taken by reflection API\n+   * This designer DispatchServlet constructor\n    */\n \n   public DispatcherServlet(Class<?>... classes) {\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "414cb477"
        },
        {
          "diff": "@@ -77,14 +77,10 @@ public class Invocation {\n     return url;\n   }\n \n-  public Method getMethod() {\n-    return method;\n-  }\n \n   /**\n    * invoke().\n-   * This method trying a call invoke\n-   * method without parameters\n+   * This method a call invoke without parameters\n    */\n \n   public String invoke() {\n@@ -102,9 +98,7 @@ public class Invocation {\n   }\n \n   /**\n-   * invoke(String str).\n-   * This method tries to call a call method with parameters defined\n-   * in the method and taken from the query\n+   * This method a call invoke with parameters\n    */\n \n   public String invoke(String str) {\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/invocations/Invocation.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/invocations/Invocation.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "414cb477"
        }
      ]
    },
    {
      "id": "3e9bf0e92f2879e82a5ebb9796ffc69c04b6ee2d",
      "project_id": 4888518,
      "message": "create some description\n",
      "title": "create some description",
      "short_id": "3e9bf0e9",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2017-12-21T23:29:17Z",
      "diffs": [
        {
          "diff": "@@ -35,8 +35,9 @@ public class Resource {\n   }\n \n   /**\n-   * This method doing ..,\n-   * jdghdj\n+   * getUsers.\n+   * This method has the parameter @QueryParam and takes the value\n+   * \"user\" as a parameter from the query\n    */\n \n   @Path(\"/query\")\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "3e9bf0e9"
        },
        {
          "diff": "@@ -20,8 +20,9 @@ public class DispatcherServlet extends HttpServlet {\n   Map<String, Invocation> resources = new HashMap<>();\n \n   /**\n-   * This method doing ..,\n-   * jdghdj\n+   * DispatcherServlet.\n+   * This method returns maps with all invocations for the given class,\n+   * foreach class taken by reflection API\n    */\n \n   public DispatcherServlet(Class<?>... classes) {\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "3e9bf0e9"
        },
        {
          "diff": "@@ -21,8 +21,9 @@ import ua.danit.framework.utils.Reflections;\n public class Parser {\n \n   /**\n-   * This method doing ..,\n-   * jdghdj\n+   * getClassInvocations(Class<?> someClass).\n+   * This method returns maps with all invocations for the given class,\n+   * where value inside @Path annotation over the method represents key.\n    */\n \n   public static Map<String, Invocation> getClassInvocations(Class<?> someClass) {\n@@ -39,8 +40,9 @@ public class Parser {\n   }\n \n   /**\n-   * This method doing ..,\n-   * jdghdj\n+   * getInvocation(Class<?> someClass, Method method).\n+   * This method returns an object of the Class that\n+   * encapsulate method parameters and annotations taken by reflection API\n    */\n \n   public static Invocation getInvocation(Class<?> someClass, Method method) {\n@@ -61,11 +63,9 @@ public class Parser {\n           }\n         }\n       }\n-      if (some == null) {\n-        return new Invocation(someClass, method, uri, annotation);\n-      } else {\n-        return new Invocation(someClass, method, uri, annotation, some);\n-      }\n+      return some == null ? new Invocation(someClass, method, uri, annotation) :\n+          new Invocation(someClass, method, uri, annotation, some);\n+\n     }\n     return new Invocation(someClass, method, uri);\n   }\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "3e9bf0e9"
        },
        {
          "diff": "@@ -13,12 +13,12 @@ public class Invocation {\n   private String url;\n \n   private Annotation httpMethod;\n-  private String annotParam;\n   private List<QueryParam> queryParamList;\n \n   /**\n-   * This method doing ..,\n-   * jdghdj\n+   * Invocation(Class<?> clazz, Method method, String url).\n+   * This method create an object with parameters taken from the method,\n+   * if the annotation method is present @Path\n    */\n \n   public Invocation(Class<?> clazz, Method method, String url) {\n@@ -28,8 +28,9 @@ public class Invocation {\n   }\n \n   /**\n-   * This method doing ..,\n-   * jdghdj\n+   * Invocation(Class<?> clazz, Method method, String url, Annotation httpMethod).\n+   * This method create an object with parameters taken from the method,\n+   * if the annotation method is present @Path and @GET ot @POST\n    */\n \n   public Invocation(Class<?> clazz, Method method, String url, Annotation httpMethod) {\n@@ -39,23 +40,11 @@ public class Invocation {\n     this.httpMethod = httpMethod;\n   }\n \n-  /**\n-   * This method doing ..,\n-   * jdghdj\n-   */\n-\n-  public Invocation(Class<?> clazz, Method method, String url,\n-                    Annotation httpMethod, String annotParam) {\n-    this.url = url;\n-    this.clazz = clazz;\n-    this.method = method;\n-    this.httpMethod = httpMethod;\n-    this.annotParam = annotParam;\n-  }\n \n   /**\n-   * This method doing ..,\n-   * jdghdj\n+   * Invocation( clazz, method, url,httpMethod,queryParamList).\n+   * This method create an object with parameters taken from the method,\n+   * if the annotation method is present @Path and @GET ot @POST and @QueryParam\n    */\n \n   public Invocation(Class<?> clazz, Method method, String url, Annotation httpMethod,\n@@ -70,17 +59,15 @@ public class Invocation {\n   }\n \n   /**\n-   * This method doing ..,\n-   * jdghdj\n+   * getQueryParamList.\n+   * This method get a list contains\n+   * a QueryParam taken from the method\n    */\n \n   public List<QueryParam> getQueryParamList() {\n     return queryParamList;\n   }\n \n-  public String getAnnotParam() {\n-    return annotParam;\n-  }\n \n   public Annotation getHttpMethod() {\n     return httpMethod;\n@@ -95,8 +82,9 @@ public class Invocation {\n   }\n \n   /**\n-   * This method doing ..,\n-   * jdghdj\n+   * invoke().\n+   * This method trying a call invoke\n+   * method without parameters\n    */\n \n   public String invoke() {\n@@ -114,8 +102,9 @@ public class Invocation {\n   }\n \n   /**\n-   * This method doing ..,\n-   * jdghdj\n+   * invoke(String str).\n+   * This method tries to call a call method with parameters defined\n+   * in the method and taken from the query\n    */\n \n   public String invoke(String str) {\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/invocations/Invocation.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/invocations/Invocation.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "3e9bf0e9"
        },
        {
          "diff": "@@ -11,8 +11,9 @@ import ua.danit.framework.invocations.Parameter;\n public class Reflections {\n \n   /**\n-   * This method doing ..,\n-   * jdghdj\n+   * getMethods(Class clazz).\n+   * This method takes from the class all the methods that are in it,\n+   * through reflection API\n    */\n   public static List<Method> getMethods(Class clazz) {\n     if (clazz == null) {\n@@ -20,9 +21,11 @@ public class Reflections {\n     }\n     return Arrays.asList(clazz.getMethods());\n   }\n+\n   /**\n-   * This method doing ..,\n-   * jdghdj\n+   * getAnnotation(Method method, Class anno).\n+   * This method takes from the class each methods and take all annotation that are in it,\n+   * through reflection API\n    */\n \n   public static Annotation getAnnotation(Method method, Class anno) {\n@@ -31,9 +34,10 @@ public class Reflections {\n     }\n     return method.getAnnotation(anno);\n   }\n+\n   /**\n-   * This method doing ..,\n-   * jdghdj\n+   * getParameters(Method getMethod).\n+   * This method taken from method all parameters through reflection API\n    */\n \n   public static List<Parameter> getParameters(Method getMethod) {\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/utils/Reflections.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/utils/Reflections.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "3e9bf0e9"
        }
      ]
    },
    {
      "id": "7a4ad88dd28d3dda8e06c746f62b119deaef2d9b",
      "project_id": 4888518,
      "message": "qq\n",
      "title": "qq",
      "short_id": "7a4ad88d",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2017-12-21T15:32:43Z",
      "diffs": [
        {
          "diff": "@@ -47,6 +47,7 @@ public class Resource {\n \n   }\n \n+\n   private String sendResponse(String response) {\n     return String.format(HTML_TEMPLATE, response);\n   }\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "7a4ad88d"
        }
      ]
    },
    {
      "id": "9c590520c9907d9f60bf50fc47f59d6f748cfa72",
      "project_id": 4888518,
      "message": "project is running\n",
      "title": "project is running",
      "short_id": "9c590520",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2017-12-21T14:50:38Z",
      "diffs": [
        {
          "diff": "@@ -1,6 +1,11 @@\n package ua.danit;\n \n-import javax.persistence.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityTransaction;\n+import javax.persistence.FlushModeType;\n+import javax.persistence.LockModeType;\n+import javax.persistence.Query;\n+\n import ua.danit.application.Ticket;\n \n \n",
          "old_path": "flights-app/src/main/java/ua/danit/DanItEntityManager.java",
          "new_path": "flights-app/src/main/java/ua/danit/DanItEntityManager.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "9c590520"
        },
        {
          "diff": "@@ -6,7 +6,7 @@ import javax.ws.rs.Path;\n import javax.ws.rs.QueryParam;\n \n public class Resource {\n-  private final static String HTML_TEMPLATE = \"<!DOCTYPE html>\\n\"\n+  public static final String HTML_TEMPLATE = \"<!DOCTYPE html>\\n\"\n       + \"<html>\\n<head><title>British Airlines</title></head>\"\n       + \"<body><h1 style=\\\" text-align: center; \\\">%s</h1></body></html>\";\n \n@@ -34,6 +34,11 @@ public class Resource {\n     return sendResponse(\"No ticket available\");\n   }\n \n+  /**\n+   * This method doing ..,\n+   * jdghdj\n+   */\n+\n   @Path(\"/query\")\n   @GET\n   public String getUsers(@QueryParam(\"user\") String name) {\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "9c590520"
        },
        {
          "diff": "@@ -6,6 +6,12 @@ import org.eclipse.jetty.servlet.ServletHolder;\n import ua.danit.framework.DispatcherServlet;\n \n public class WebApp {\n+\n+  /**\n+   * This method doing ..,\n+   * jdghdj\n+   */\n+\n   public static void main(String[] args) throws Exception {\n \n     Server server = new Server(8080);\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "9c590520"
        },
        {
          "diff": "@@ -3,6 +3,7 @@ package ua.danit.framework;\n import java.io.IOException;\n import java.util.HashMap;\n import java.util.Map;\n+\n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServlet;\n import javax.servlet.http.HttpServletRequest;\n@@ -10,6 +11,7 @@ import javax.servlet.http.HttpServletResponse;\n import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n import javax.ws.rs.QueryParam;\n+\n import ua.danit.framework.invocations.Invocation;\n \n \n@@ -17,6 +19,11 @@ public class DispatcherServlet extends HttpServlet {\n \n   Map<String, Invocation> resources = new HashMap<>();\n \n+  /**\n+   * This method doing ..,\n+   * jdghdj\n+   */\n+\n   public DispatcherServlet(Class<?>... classes) {\n     for (Class<?> someClass : classes) {\n       resources.putAll(Parser.getClassInvocations(someClass));\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "9c590520"
        },
        {
          "diff": "@@ -1,22 +1,30 @@\n package ua.danit.framework;\n \n+import static ua.danit.framework.utils.Reflections.getMethods;\n+\n import java.lang.annotation.Annotation;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+\n import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n import javax.ws.rs.QueryParam;\n+\n import ua.danit.framework.invocations.Invocation;\n import ua.danit.framework.utils.Reflections;\n \n-import static ua.danit.framework.utils.Reflections.getMethods;\n \n public class Parser {\n \n+  /**\n+   * This method doing ..,\n+   * jdghdj\n+   */\n+\n   public static Map<String, Invocation> getClassInvocations(Class<?> someClass) {\n     Map<String, Invocation> resources = new HashMap<>();\n \n@@ -30,6 +38,10 @@ public class Parser {\n     return resources;\n   }\n \n+  /**\n+   * This method doing ..,\n+   * jdghdj\n+   */\n \n   public static Invocation getInvocation(Class<?> someClass, Method method) {\n     Path path = (Path) Reflections.getAnnotation(method, Path.class);\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "9c590520"
        },
        {
          "diff": "@@ -4,6 +4,7 @@ import java.lang.annotation.Annotation;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.util.List;\n+\n import javax.ws.rs.QueryParam;\n \n public class Invocation {\n@@ -15,12 +16,22 @@ public class Invocation {\n   private String annotParam;\n   private List<QueryParam> queryParamList;\n \n+  /**\n+   * This method doing ..,\n+   * jdghdj\n+   */\n+\n   public Invocation(Class<?> clazz, Method method, String url) {\n     this.method = method;\n     this.clazz = clazz;\n     this.url = url;\n   }\n \n+  /**\n+   * This method doing ..,\n+   * jdghdj\n+   */\n+\n   public Invocation(Class<?> clazz, Method method, String url, Annotation httpMethod) {\n     this.url = url;\n     this.clazz = clazz;\n@@ -28,6 +39,11 @@ public class Invocation {\n     this.httpMethod = httpMethod;\n   }\n \n+  /**\n+   * This method doing ..,\n+   * jdghdj\n+   */\n+\n   public Invocation(Class<?> clazz, Method method, String url,\n                     Annotation httpMethod, String annotParam) {\n     this.url = url;\n@@ -37,6 +53,11 @@ public class Invocation {\n     this.annotParam = annotParam;\n   }\n \n+  /**\n+   * This method doing ..,\n+   * jdghdj\n+   */\n+\n   public Invocation(Class<?> clazz, Method method, String url, Annotation httpMethod,\n                     List<QueryParam> queryParamList) {\n     this.clazz = clazz;\n@@ -48,6 +69,11 @@ public class Invocation {\n \n   }\n \n+  /**\n+   * This method doing ..,\n+   * jdghdj\n+   */\n+\n   public List<QueryParam> getQueryParamList() {\n     return queryParamList;\n   }\n@@ -68,6 +94,11 @@ public class Invocation {\n     return method;\n   }\n \n+  /**\n+   * This method doing ..,\n+   * jdghdj\n+   */\n+\n   public String invoke() {\n     try {\n       return (String) method.invoke(clazz.newInstance(), null);\n@@ -82,6 +113,11 @@ public class Invocation {\n     return \"Error 404\";\n   }\n \n+  /**\n+   * This method doing ..,\n+   * jdghdj\n+   */\n+\n   public String invoke(String str) {\n     try {\n       return (String) method.invoke(clazz.newInstance(), str);\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/invocations/Invocation.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/invocations/Invocation.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "9c590520"
        },
        {
          "diff": "@@ -4,17 +4,26 @@ import java.lang.annotation.Annotation;\n import java.lang.reflect.Method;\n import java.util.Arrays;\n import java.util.List;\n+\n import ua.danit.framework.invocations.Parameter;\n \n \n public class Reflections {\n \n+  /**\n+   * This method doing ..,\n+   * jdghdj\n+   */\n   public static List<Method> getMethods(Class clazz) {\n     if (clazz == null) {\n       return null;\n     }\n     return Arrays.asList(clazz.getMethods());\n   }\n+  /**\n+   * This method doing ..,\n+   * jdghdj\n+   */\n \n   public static Annotation getAnnotation(Method method, Class anno) {\n     if (method == null) {\n@@ -22,6 +31,10 @@ public class Reflections {\n     }\n     return method.getAnnotation(anno);\n   }\n+  /**\n+   * This method doing ..,\n+   * jdghdj\n+   */\n \n   public static List<Parameter> getParameters(Method getMethod) {\n     return null;\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/utils/Reflections.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/utils/Reflections.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "9c590520"
        },
        {
          "diff": "@@ -2,4 +2,4 @@\n \n mvn clean package \n cd target/ \n-java -jar jax-rs-playground-1.0-SNAPSHOT-jar-with-dependencies.jar\n+java -jar *dependencies.jar\n",
          "old_path": "flights-app/start.sh",
          "new_path": "flights-app/start.sh",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "9c590520"
        }
      ]
    },
    {
      "id": "313e12f6dc1a1433af432e248a5ee7ae4bee0d91",
      "project_id": 4888518,
      "message": "refactoring step1\n",
      "title": "refactoring step1",
      "short_id": "313e12f6",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2017-12-21T13:57:16Z",
      "diffs": [
        {
          "diff": "@@ -1,8 +1,8 @@\n package ua.danit;\n \n+import javax.persistence.*;\n import ua.danit.application.Ticket;\n \n-import javax.persistence.*;\n \n public class DanItEntityManager implements EntityManager {\n   public DanItEntityManager(Class<Ticket> ticketClass) {\n@@ -24,12 +24,12 @@ public class DanItEntityManager implements EntityManager {\n   }\n \n   @Override\n-  public <T> T find(Class<T> aClass, Object o) {\n+  public <T> T find(Class<T> someClass, Object o) {\n     return null;\n   }\n \n   @Override\n-  public <T> T getReference(Class<T> aClass, Object o) {\n+  public <T> T getReference(Class<T> someClass, Object o) {\n     return null;\n   }\n \n@@ -39,13 +39,13 @@ public class DanItEntityManager implements EntityManager {\n   }\n \n   @Override\n-  public void setFlushMode(FlushModeType flushModeType) {\n-\n+  public FlushModeType getFlushMode() {\n+    return null;\n   }\n \n   @Override\n-  public FlushModeType getFlushMode() {\n-    return null;\n+  public void setFlushMode(FlushModeType flushModeType) {\n+\n   }\n \n   @Override\n@@ -84,7 +84,7 @@ public class DanItEntityManager implements EntityManager {\n   }\n \n   @Override\n-  public Query createNativeQuery(String s, Class aClass) {\n+  public Query createNativeQuery(String s, Class someClass) {\n     return null;\n   }\n \n",
          "old_path": "flights-app/src/main/java/ua/danit/DanItEntityManager.java",
          "new_path": "flights-app/src/main/java/ua/danit/DanItEntityManager.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "313e12f6"
        },
        {
          "diff": "@@ -4,46 +4,45 @@ import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n import javax.ws.rs.QueryParam;\n-import javax.ws.rs.core.Response;\n \n public class Resource {\n-    private final static String HTML_TEMPLATE = \"<!DOCTYPE html>\\n\" +\n-            \"<html>\\n<head><title>British Airlines</title></head>\" +\n-            \"<body><h1 style=\\\" text-align: center; \\\">%s</h1></body></html>\";\n-\n-    @Path(\"/\")\n-    @GET\n-    public String welcome() {\n-        return sendResponse(\"Welcome to British Airlines\");\n-    }\n-\n-    @Path(\"/weather\")\n-    @GET\n-    public String getWeather() {\n-        return sendResponse(\"Today weather is cool isn't\");\n-    }\n-\n-    @Path(\"/flights\")\n-    @GET\n-    public String getFlights() {\n-        return sendResponse(\"Today all routes closed\");\n-    }\n-\n-    @Path(\"/tickets\")\n-    @POST\n-    public String getTickets() {\n-        return sendResponse(\"No ticket available\");\n-    }\n-\n-    @Path(\"/query\")\n-    @GET\n-    public String getUsers( @QueryParam(\"user\") String name) {\n-\n-        return sendResponse(\"User name is : \"+name);\n-\n-    }\n-\n-    private String sendResponse(String response) {\n-        return String.format(HTML_TEMPLATE, response);\n-    }\n+  private final static String HTML_TEMPLATE = \"<!DOCTYPE html>\\n\"\n+      + \"<html>\\n<head><title>British Airlines</title></head>\"\n+      + \"<body><h1 style=\\\" text-align: center; \\\">%s</h1></body></html>\";\n+\n+  @Path(\"/\")\n+  @GET\n+  public String welcome() {\n+    return sendResponse(\"Welcome to British Airlines\");\n+  }\n+\n+  @Path(\"/weather\")\n+  @GET\n+  public String getWeather() {\n+    return sendResponse(\"Today weather is cool isn't\");\n+  }\n+\n+  @Path(\"/flights\")\n+  @GET\n+  public String getFlights() {\n+    return sendResponse(\"Today all routes closed\");\n+  }\n+\n+  @Path(\"/tickets\")\n+  @POST\n+  public String getTickets() {\n+    return sendResponse(\"No ticket available\");\n+  }\n+\n+  @Path(\"/query\")\n+  @GET\n+  public String getUsers(@QueryParam(\"user\") String name) {\n+\n+    return sendResponse(\"User name is : \" + name);\n+\n+  }\n+\n+  private String sendResponse(String response) {\n+    return String.format(HTML_TEMPLATE, response);\n+  }\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "313e12f6"
        },
        {
          "diff": "@@ -1,10 +1,9 @@\n package ua.danit.application;\n \n-import ua.danit.framework.DispatcherServlet;\n-\n import org.eclipse.jetty.server.Server;\n import org.eclipse.jetty.servlet.ServletContextHandler;\n import org.eclipse.jetty.servlet.ServletHolder;\n+import ua.danit.framework.DispatcherServlet;\n \n public class WebApp {\n   public static void main(String[] args) throws Exception {\n",
          "old_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "313e12f6"
        },
        {
          "diff": "@@ -1,7 +1,8 @@\n package ua.danit.framework;\n \n-import ua.danit.framework.invocations.Invocation;\n-\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServlet;\n import javax.servlet.http.HttpServletRequest;\n@@ -9,23 +10,22 @@ import javax.servlet.http.HttpServletResponse;\n import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n import javax.ws.rs.QueryParam;\n+import ua.danit.framework.invocations.Invocation;\n \n-import java.io.IOException;\n-import java.util.HashMap;\n-import java.util.Map;\n \n public class DispatcherServlet extends HttpServlet {\n \n   Map<String, Invocation> resources = new HashMap<>();\n \n   public DispatcherServlet(Class<?>... classes) {\n-    for (Class<?> aClass : classes) {\n-      resources.putAll(Parser.getClassInvocations(aClass));\n+    for (Class<?> someClass : classes) {\n+      resources.putAll(Parser.getClassInvocations(someClass));\n     }\n   }\n \n   @Override\n-  protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+  protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n+      throws ServletException, IOException {\n     String uri = req.getRequestURI();\n \n     Invocation invoc = resources.get(uri);\n@@ -37,9 +37,10 @@ public class DispatcherServlet extends HttpServlet {\n     }\n   }\n \n-  private void handleMethod(HttpServletRequest req, HttpServletResponse resp, Invocation invoc) throws IOException {\n+  private void handleMethod(HttpServletRequest req, HttpServletResponse resp, Invocation invoc)\n+      throws IOException {\n \n-    String result = hasQueryParams(req) ? getHttpResult(req, invoc): invoc.invoke();\n+    String result = hasQueryParams(req) ? getHttpResult(req, invoc) : invoc.invoke();\n     resp.getWriter().write(result);\n   }\n \n@@ -63,7 +64,8 @@ public class DispatcherServlet extends HttpServlet {\n   }\n \n   @Override\n-  protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+  protected void doPost(HttpServletRequest req, HttpServletResponse resp)\n+      throws ServletException, IOException {\n     String uri = req.getRequestURI();\n     Invocation invoc = resources.get(uri);\n \n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "313e12f6"
        },
        {
          "diff": "@@ -1,29 +1,28 @@\n package ua.danit.framework;\n \n-import ua.danit.framework.invocations.Invocation;\n-import ua.danit.framework.utils.Reflections;\n-\n-import javax.ws.rs.GET;\n-import javax.ws.rs.POST;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.QueryParam;\n import java.lang.annotation.Annotation;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.QueryParam;\n+import ua.danit.framework.invocations.Invocation;\n+import ua.danit.framework.utils.Reflections;\n \n import static ua.danit.framework.utils.Reflections.getMethods;\n \n public class Parser {\n \n-  public static Map<String, Invocation> getClassInvocations(Class<?> aClass) {\n+  public static Map<String, Invocation> getClassInvocations(Class<?> someClass) {\n     Map<String, Invocation> resources = new HashMap<>();\n \n-    for (Method method : getMethods(aClass)) {\n+    for (Method method : getMethods(someClass)) {\n       if (method.isAnnotationPresent(Path.class)) {\n-        Invocation invoc = getInvocation(aClass, method);\n+        Invocation invoc = getInvocation(someClass, method);\n         resources.put(invoc.getUrl(), invoc);\n       }\n     }\n@@ -32,7 +31,7 @@ public class Parser {\n   }\n \n \n-  public static Invocation getInvocation(Class<?> aClass, Method method) {\n+  public static Invocation getInvocation(Class<?> someClass, Method method) {\n     Path path = (Path) Reflections.getAnnotation(method, Path.class);\n     String uri = path.value();\n     Annotation annotation = Reflections.getAnnotation(method, GET.class);\n@@ -51,11 +50,11 @@ public class Parser {\n         }\n       }\n       if (some == null) {\n-        return new Invocation(aClass, method, uri, annotation);\n+        return new Invocation(someClass, method, uri, annotation);\n       } else {\n-        return new Invocation(aClass, method, uri, annotation, some);\n+        return new Invocation(someClass, method, uri, annotation, some);\n       }\n     }\n-    return new Invocation(aClass, method, uri);\n+    return new Invocation(someClass, method, uri);\n   }\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "313e12f6"
        },
        {
          "diff": "@@ -1,96 +1,98 @@\n package ua.danit.framework.invocations;\n \n-import javax.ws.rs.QueryParam;\n import java.lang.annotation.Annotation;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.util.List;\n+import javax.ws.rs.QueryParam;\n \n public class Invocation {\n-    private Class<?> clazz;\n-    private Method method;\n-    private String url;\n-\n-    private Annotation httpMethod;\n-    private String annotationsParametr;\n-    private List<QueryParam> queryParamList;\n-\n-    public Invocation(Class<?> clazz, Method method, String url) {\n-        this.method = method;\n-        this.clazz = clazz;\n-        this.url = url;\n-    }\n-\n-    public Invocation ( Class <?> clazz, Method method, String url, Annotation httpMethod ) {\n-        this.url = url;\n-        this.clazz = clazz;\n-        this.method = method;\n-        this.httpMethod = httpMethod;\n-    }\n-\n-    public Invocation ( Class <?> clazz, Method method, String url, Annotation httpMethod, String annotationsParametr ) {\n-        this.url = url;\n-        this.clazz = clazz;\n-        this.method = method;\n-        this.httpMethod = httpMethod;\n-        this.annotationsParametr = annotationsParametr;\n+  private Class<?> clazz;\n+  private Method method;\n+  private String url;\n+\n+  private Annotation httpMethod;\n+  private String annotParam;\n+  private List<QueryParam> queryParamList;\n+\n+  public Invocation(Class<?> clazz, Method method, String url) {\n+    this.method = method;\n+    this.clazz = clazz;\n+    this.url = url;\n+  }\n+\n+  public Invocation(Class<?> clazz, Method method, String url, Annotation httpMethod) {\n+    this.url = url;\n+    this.clazz = clazz;\n+    this.method = method;\n+    this.httpMethod = httpMethod;\n+  }\n+\n+  public Invocation(Class<?> clazz, Method method, String url,\n+                    Annotation httpMethod, String annotParam) {\n+    this.url = url;\n+    this.clazz = clazz;\n+    this.method = method;\n+    this.httpMethod = httpMethod;\n+    this.annotParam = annotParam;\n+  }\n+\n+  public Invocation(Class<?> clazz, Method method, String url, Annotation httpMethod,\n+                    List<QueryParam> queryParamList) {\n+    this.clazz = clazz;\n+    this.method = method;\n+    this.url = url;\n+    this.httpMethod = httpMethod;\n+\n+    this.queryParamList = queryParamList;\n+\n+  }\n+\n+  public List<QueryParam> getQueryParamList() {\n+    return queryParamList;\n+  }\n+\n+  public String getAnnotParam() {\n+    return annotParam;\n+  }\n+\n+  public Annotation getHttpMethod() {\n+    return httpMethod;\n+  }\n+\n+  public String getUrl() {\n+    return url;\n+  }\n+\n+  public Method getMethod() {\n+    return method;\n+  }\n+\n+  public String invoke() {\n+    try {\n+      return (String) method.invoke(clazz.newInstance(), null);\n+    } catch (IllegalAccessException e) {\n+      e.printStackTrace();\n+    } catch (InvocationTargetException e) {\n+      e.printStackTrace();\n+    } catch (InstantiationException e) {\n+      e.printStackTrace();\n     }\n \n-    public List <QueryParam> getQueryParamList () {\n-        return queryParamList;\n+    return \"Error 404\";\n+  }\n+\n+  public String invoke(String str) {\n+    try {\n+      return (String) method.invoke(clazz.newInstance(), str);\n+    } catch (IllegalAccessException e) {\n+      e.printStackTrace();\n+    } catch (InvocationTargetException e) {\n+      e.printStackTrace();\n+    } catch (InstantiationException e) {\n+      e.printStackTrace();\n     }\n \n-    public Invocation ( Class <?> clazz, Method method, String url, Annotation httpMethod, List <QueryParam> queryParamList ) {\n-        this.clazz = clazz;\n-        this.method = method;\n-        this.url = url;\n-        this.httpMethod = httpMethod;\n-\n-        this.queryParamList = queryParamList;\n-\n-    }\n-\n-    public String getAnnotationsParametr () {\n-        return annotationsParametr;\n-    }\n-\n-    public Annotation getHttpMethod () {\n-        return httpMethod;\n-    }\n-\n-    public String getUrl() {\n-        return url;\n-    }\n-\n-    public Method getMethod() {\n-        return method;\n-    }\n-\n-    public String invoke() {\n-        try {\n-            return (String)method.invoke(clazz.newInstance(), null);\n-        } catch (IllegalAccessException e) {\n-            e.printStackTrace();\n-        } catch (InvocationTargetException e) {\n-            e.printStackTrace();\n-        } catch (InstantiationException e) {\n-            e.printStackTrace();\n-        }\n-\n-        return \"Error 404\";\n-    }\n-\n-    public String invoke(String str){\n-        try {\n-            return (String)method.invoke(clazz.newInstance(), str);\n-        } catch (IllegalAccessException e) {\n-            e.printStackTrace();\n-        } catch (InvocationTargetException e) {\n-            e.printStackTrace();\n-        } catch (InstantiationException e) {\n-            e.printStackTrace();\n-        }\n-\n-        return \"Error 404\";\n-    }\n+    return \"Error 404\";\n+  }\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/invocations/Invocation.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/invocations/Invocation.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "313e12f6"
        },
        {
          "diff": "@@ -1,29 +1,29 @@\n package ua.danit.framework.utils;\n \n-import ua.danit.framework.invocations.Parameter;\n-\n import java.lang.annotation.Annotation;\n import java.lang.reflect.Method;\n import java.util.Arrays;\n import java.util.List;\n+import ua.danit.framework.invocations.Parameter;\n+\n \n public class Reflections {\n \n-    public static List<Method> getMethods(Class clazz) {\n-        if (clazz == null) {\n-            return null;\n-        }\n-        return Arrays.asList(clazz.getMethods());\n+  public static List<Method> getMethods(Class clazz) {\n+    if (clazz == null) {\n+      return null;\n     }\n+    return Arrays.asList(clazz.getMethods());\n+  }\n \n-    public static Annotation getAnnotation (Method method, Class anno) {\n-        if (method == null) {\n-            return null;\n-        }\n-        return method.getAnnotation(anno);\n+  public static Annotation getAnnotation(Method method, Class anno) {\n+    if (method == null) {\n+      return null;\n     }\n+    return method.getAnnotation(anno);\n+  }\n \n-    public static List<Parameter> getParameters(Method getMethod) {\n-        return null;\n-    }\n+  public static List<Parameter> getParameters(Method getMethod) {\n+    return null;\n+  }\n }\n",
          "old_path": "flights-app/src/main/java/ua/danit/framework/utils/Reflections.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/utils/Reflections.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "313e12f6"
        }
      ]
    },
    {
      "id": "5d4289373e989b83989e8a9559330b78bcb4917c",
      "project_id": 4888518,
      "message": "fix name in pom\n",
      "title": "fix name in pom",
      "short_id": "5d428937",
      "author_name": "Volodymyr Derkach",
      "branches": null,
      "created_at": "2017-12-21T10:54:27Z",
      "diffs": [
        {
          "diff": "@@ -13,7 +13,6 @@\n     <packaging>jar</packaging>\n \n \n-    <name>jax-rs-playground</name>\n     <url>http://maven.apache.org</url>\n \n     <properties>\n",
          "old_path": "flights-app/pom.xml",
          "new_path": "flights-app/pom.xml",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "5d428937"
        }
      ]
    },
    {
      "id": "b6b346702d622904ff592b2e38088355def34c7c",
      "project_id": 4888518,
      "message": "checkstyle version\n",
      "title": "checkstyle version",
      "short_id": "b6b34670",
      "author_name": "Volodymyr Derkach",
      "branches": null,
      "created_at": "2017-12-21T10:48:56Z",
      "diffs": [
        {
          "diff": "@@ -11,6 +11,12 @@\n      <module>flights-app</module>\n    </modules>\n \n+  <properties>\n+  <checkstyle.version>8.0</checkstyle.version>\n+        <checkstyle.plugin.version>2.17</checkstyle.plugin.version>\n+    </properties>\n+\n+\n  <build>\n         <plugins>\n             <plugin>\n",
          "old_path": "pom.xml",
          "new_path": "pom.xml",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "b6b34670"
        }
      ]
    },
    {
      "id": "c3b067655cedabad350ed5d14d30f7e98fd47334",
      "project_id": 4888518,
      "message": "+checkstyle\n",
      "title": "+checkstyle",
      "short_id": "c3b06765",
      "author_name": "Volodymyr Derkach",
      "branches": null,
      "created_at": "2017-12-21T10:41:45Z",
      "diffs": [
        {
          "diff": "@@ -10,4 +10,50 @@\n    <modules>\n      <module>flights-app</module>\n    </modules>\n+\n+ <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <configuration>\n+                    <target>${target.java}</target>\n+                    <source>${target.java}</source>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-checkstyle-plugin</artifactId>\n+                <version>${checkstyle.plugin.version}</version>\n+                <configuration>\n+                    <configLocation>google_checks.xml</configLocation>\n+                    <failsOnError>true</failsOnError>\n+                    <failOnViolation>true</failOnViolation>\n+                    <consoleOutput>true</consoleOutput>\n+                    <logViolationsToConsole>true</logViolationsToConsole>\n+                    <violationSeverity>warning</violationSeverity>\n+                </configuration>\n+                <dependencies>\n+                    <dependency>\n+                        <groupId>com.puppycrawl.tools</groupId>\n+                        <artifactId>checkstyle</artifactId>\n+                        <version>${checkstyle.version}</version>\n+                    </dependency>\n+                </dependencies>\n+                <executions>\n+                    <execution>\n+                        <id>verify-style</id>\n+                        <phase>validate</phase>\n+                        <goals>\n+                            <goal>check</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+\n+    </build>\n+\n+\n+\n </project>\n",
          "old_path": "pom.xml",
          "new_path": "pom.xml",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "c3b06765"
        }
      ]
    },
    {
      "id": "03c22a758e74596db2c5c1a3caeb72e78bcff75d",
      "project_id": 4888518,
      "message": "msgoMerge branch 'master' of gitlab.com:korsa719/jax-rs\n",
      "title": "msgoMerge branch 'master' of gitlab.com:korsa719/jax-rs",
      "short_id": "03c22a75",
      "author_name": "Volodymyr Derkach",
      "branches": null,
      "created_at": "2017-12-21T10:33:03Z",
      "diffs": [
        {
          "diff": "@@ -47,21 +47,11 @@ cache:\n   except:\n     - master\n \n-# Validate merge requests using JDK7\n-validate:jdk7:\n-  <<: *validate\n-  image: maven:3.3.9-jdk-7\n-\n # Validate merge requests using JDK8\n validate:jdk8:\n   <<: *validate\n   image: maven:3.3.9-jdk-8\n \n-# Verify merge requests using JDK7\n-verify:jdk7:\n-  <<: *verify\n-  image: maven:3.3.9-jdk-7\n-\n # Verify merge requests using JDK8\n verify:jdk8:\n   <<: *verify\n@@ -73,31 +63,31 @@ verify:jdk8:\n # To get this working you need to define a volume while configuring your gitlab-ci-multi-runner.\n # Mount your `settings.xml` as `/root/.m2/settings.xml` which holds your secrets.\n # See https://maven.apache.org/settings.html\n-deploy:jdk8:\n+#deploy:jdk8:\n   # Use stage test here, so the pages job may later pickup the created site.\n-  stage: test\n-  script:\n+#  stage: test\n+#  script:\n     - 'mvn $MAVEN_CLI_OPTS deploy site site:stage'\n-  only:\n-    - master\n+#  only:\n+#    - master\n   # Archive up the built documentation site.\n-  artifacts:\n-    paths:\n-    - target/staging\n-  image: maven:3.3.9-jdk-8\n+#  artifacts:\n+#    paths:\n+#    - target/staging\n+#  image: maven:3.3.9-jdk-8\n \n \n-pages:\n-  image: busybox:latest\n-  stage: deploy\n-  script:\n+#pages:\n+#  image: busybox:latest\n+#  stage: deploy\n+#  script:\n     # Because Maven appends the artifactId automatically to the staging path if you did define a parent pom,\n     # you might need to use `mv target/staging/YOUR_ARTIFACT_ID public` instead.\n-    - mv target/staging public\n-  dependencies:\n-    - deploy:jdk8\n-  artifacts:\n-    paths:\n-    - public\n-  only:\n-    - master\n+#    - mv target/staging public\n+#  dependencies:\n+#    - deploy:jdk8\n+#  artifacts:\n+#    paths:\n+#    - public\n+#  only:\n+#    - master\n",
          "old_path": ".gitlab-ci.yml",
          "new_path": ".gitlab-ci.yml",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "03c22a75"
        }
      ]
    },
    {
      "id": "f5cf934108e397e145b06486192b6d78f0e0a431",
      "project_id": 4888518,
      "message": "modules\n",
      "title": "modules",
      "short_id": "f5cf9341",
      "author_name": "Volodymyr Derkach",
      "branches": null,
      "created_at": "2017-12-21T10:32:50Z",
      "diffs": [
        {
          "diff": "",
          "old_path": "jax-rs-playground/dependency-reduced-pom.xml",
          "new_path": "flights-app/dependency-reduced-pom.xml",
          "new_file": false,
          "renamed_file": true,
          "deleted_file": false,
          "commit_id": "f5cf9341"
        },
        {
          "diff": "@@ -2,9 +2,14 @@\n          xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n     <modelVersion>4.0.0</modelVersion>\n \n+   <parent>\n     <groupId>ua.danit</groupId>\n-    <artifactId>jax-rs-playground</artifactId>\n+    <artifactId>flights</artifactId>\n     <version>1.0-SNAPSHOT</version>\n+   </parent>\n+\n+\n+    <artifactId>flights-app</artifactId>\n     <packaging>jar</packaging>\n \n \n",
          "old_path": "jax-rs-playground/pom.xml",
          "new_path": "flights-app/pom.xml",
          "new_file": false,
          "renamed_file": true,
          "deleted_file": false,
          "commit_id": "f5cf9341"
        },
        {
          "diff": "",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/DanItEntityManager.java",
          "new_path": "flights-app/src/main/java/ua/danit/DanItEntityManager.java",
          "new_file": false,
          "renamed_file": true,
          "deleted_file": false,
          "commit_id": "f5cf9341"
        },
        {
          "diff": "",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/ParamAnnotation.java",
          "new_path": "flights-app/src/main/java/ua/danit/ParamAnnotation.java",
          "new_file": false,
          "renamed_file": true,
          "deleted_file": false,
          "commit_id": "f5cf9341"
        },
        {
          "diff": "",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/application/Resource.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/Resource.java",
          "new_file": false,
          "renamed_file": true,
          "deleted_file": false,
          "commit_id": "f5cf9341"
        },
        {
          "diff": "",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/application/Ticket.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/Ticket.java",
          "new_file": false,
          "renamed_file": true,
          "deleted_file": false,
          "commit_id": "f5cf9341"
        },
        {
          "diff": "",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/application/WebApp.java",
          "new_path": "flights-app/src/main/java/ua/danit/application/WebApp.java",
          "new_file": false,
          "renamed_file": true,
          "deleted_file": false,
          "commit_id": "f5cf9341"
        },
        {
          "diff": "",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_file": false,
          "renamed_file": true,
          "deleted_file": false,
          "commit_id": "f5cf9341"
        },
        {
          "diff": "",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/framework/Parser.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/Parser.java",
          "new_file": false,
          "renamed_file": true,
          "deleted_file": false,
          "commit_id": "f5cf9341"
        },
        {
          "diff": "",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/framework/invocations/Invocation.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/invocations/Invocation.java",
          "new_file": false,
          "renamed_file": true,
          "deleted_file": false,
          "commit_id": "f5cf9341"
        },
        {
          "diff": "",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/framework/invocations/Parameter.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/invocations/Parameter.java",
          "new_file": false,
          "renamed_file": true,
          "deleted_file": false,
          "commit_id": "f5cf9341"
        },
        {
          "diff": "",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/framework/utils/Reflections.java",
          "new_path": "flights-app/src/main/java/ua/danit/framework/utils/Reflections.java",
          "new_file": false,
          "renamed_file": true,
          "deleted_file": false,
          "commit_id": "f5cf9341"
        },
        {
          "diff": "",
          "old_path": "jax-rs-playground/src/test/java/ua/danit/EntityTest.java",
          "new_path": "flights-app/src/test/java/ua/danit/EntityTest.java",
          "new_file": false,
          "renamed_file": true,
          "deleted_file": false,
          "commit_id": "f5cf9341"
        },
        {
          "diff": "",
          "old_path": "jax-rs-playground/src/test/java/ua/danit/ParserTest.java",
          "new_path": "flights-app/src/test/java/ua/danit/ParserTest.java",
          "new_file": false,
          "renamed_file": true,
          "deleted_file": false,
          "commit_id": "f5cf9341"
        },
        {
          "diff": "",
          "old_path": "jax-rs-playground/start.sh",
          "new_path": "flights-app/start.sh",
          "new_file": false,
          "renamed_file": true,
          "deleted_file": false,
          "commit_id": "f5cf9341"
        },
        {
          "diff": "@@ -0,0 +1,13 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <groupId>ua.danit</groupId>\n+    <artifactId>flights</artifactId>\n+    <version>1.0-SNAPSHOT</version>\n+    <packaging>pom</packaging>\n+\n+   <modules>\n+     <module>flights-app</module>\n+   </modules>\n+</project>\n",
          "old_path": "pom.xml",
          "new_path": "pom.xml",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "f5cf9341"
        }
      ]
    },
    {
      "id": "b7b900c15d949a0ead9f4458be02decda94cc631",
      "project_id": 4888518,
      "message": "Update .gitlab-ci.yml",
      "title": "Update .gitlab-ci.yml",
      "short_id": "b7b900c1",
      "author_name": "Volodymyr Derkach",
      "branches": null,
      "created_at": "2017-12-21T10:09:02Z",
      "diffs": [
        {
          "diff": "@@ -47,21 +47,11 @@ cache:\n   except:\n     - master\n \n-# Validate merge requests using JDK7\n-validate:jdk7:\n-  <<: *validate\n-  image: maven:3.3.9-jdk-7\n-\n # Validate merge requests using JDK8\n validate:jdk8:\n   <<: *validate\n   image: maven:3.3.9-jdk-8\n \n-# Verify merge requests using JDK7\n-verify:jdk7:\n-  <<: *verify\n-  image: maven:3.3.9-jdk-7\n-\n # Verify merge requests using JDK8\n verify:jdk8:\n   <<: *verify\n@@ -73,31 +63,31 @@ verify:jdk8:\n # To get this working you need to define a volume while configuring your gitlab-ci-multi-runner.\n # Mount your `settings.xml` as `/root/.m2/settings.xml` which holds your secrets.\n # See https://maven.apache.org/settings.html\n-deploy:jdk8:\n+#deploy:jdk8:\n   # Use stage test here, so the pages job may later pickup the created site.\n-  stage: test\n-  script:\n+#  stage: test\n+#  script:\n     - 'mvn $MAVEN_CLI_OPTS deploy site site:stage'\n-  only:\n-    - master\n+#  only:\n+#    - master\n   # Archive up the built documentation site.\n-  artifacts:\n-    paths:\n-    - target/staging\n-  image: maven:3.3.9-jdk-8\n+#  artifacts:\n+#    paths:\n+#    - target/staging\n+#  image: maven:3.3.9-jdk-8\n \n \n-pages:\n-  image: busybox:latest\n-  stage: deploy\n-  script:\n+#pages:\n+#  image: busybox:latest\n+#  stage: deploy\n+#  script:\n     # Because Maven appends the artifactId automatically to the staging path if you did define a parent pom,\n     # you might need to use `mv target/staging/YOUR_ARTIFACT_ID public` instead.\n-    - mv target/staging public\n-  dependencies:\n-    - deploy:jdk8\n-  artifacts:\n-    paths:\n-    - public\n-  only:\n-    - master\n+#    - mv target/staging public\n+#  dependencies:\n+#    - deploy:jdk8\n+#  artifacts:\n+#    paths:\n+#    - public\n+#  only:\n+#    - master\n",
          "old_path": ".gitlab-ci.yml",
          "new_path": ".gitlab-ci.yml",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "b7b900c1"
        }
      ]
    },
    {
      "id": "9b67763b60ffaf941bf593cd496d4bdcfc2d8984",
      "project_id": 4888518,
      "message": "README.md\n",
      "title": "README.md",
      "short_id": "9b67763b",
      "author_name": "Volodymyr Derkach",
      "branches": null,
      "created_at": "2017-12-21T10:03:39Z",
      "diffs": [
        {
          "diff": "@@ -1,11 +1,7 @@\n-<<<<<<< HEAD\n-<b>Current target:</b>\n-=======\n ## Web application\n \n ### Goal\n Create rest application that shows airport's shedule flights.\n->>>>>>> ede3e4f56bfbf32903d4dcdb8cc7bfb5727d3c88\n \n ### Tools\n * [Apache Maven](https://maven.apache.org/) is a software project management and comprehension tool.\n@@ -26,4 +22,4 @@ The big request to participants not to write in the file README.md any crap and\n ## REST framework\n \n Framework that implements [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) standard in java.\n-Standart called [JAX-RS](https://jcp.org/en/jsr/detail?id=339) and reference implementation called [Jersey](https://jersey.github.io/).\n\\ No newline at end of file\n+Standart called [JAX-RS](https://jcp.org/en/jsr/detail?id=339) and reference implementation called [Jersey](https://jersey.github.io/).\n",
          "old_path": "README.md",
          "new_path": "README.md",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "9b67763b"
        }
      ]
    },
    {
      "id": "58f46984b3f69f748b0544dbb93488b2a75b6881",
      "project_id": 4888518,
      "message": "merge Merge branch 'master' of https://gitlab.com/korsa719/jax-rs\n",
      "title": "merge Merge branch 'master' of https://gitlab.com/korsa719/jax-rs",
      "short_id": "58f46984",
      "author_name": "Volodymyr Derkach",
      "branches": null,
      "created_at": "2017-12-21T09:56:11Z",
      "diffs": [
        {
          "diff": "@@ -21,4 +21,9 @@ To start rest application open your *Terminal* and type `bash start.sh` in it.\n Open your browser and type `localhost:8080` in address field, if you see \" Welcome to British airport \" that means your application is working.\n \n ### Rules for contributors\n-The big request to participants not to write in the file README.md any crap and dregs, add only useful text.\n\\ No newline at end of file\n+The big request to participants not to write in the file README.md any crap and dregs, add only useful text.\n+\n+## REST framework\n+\n+Framework that implements [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) standard in java.\n+Standart called [JAX-RS](https://jcp.org/en/jsr/detail?id=339) and reference implementation called [Jersey](https://jersey.github.io/).\n\\ No newline at end of file\n",
          "old_path": "README.md",
          "new_path": "README.md",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "58f46984"
        }
      ]
    },
    {
      "id": "d5be07cc74a6533e32a5ccf445397ee8ad08412a",
      "project_id": 4888518,
      "message": "fix imports Merge branch 'mk1'\n",
      "title": "fix imports Merge branch 'mk1'",
      "short_id": "d5be07cc",
      "author_name": "Volodymyr Derkach",
      "branches": null,
      "created_at": "2017-12-21T09:54:30Z",
      "diffs": [
        {
          "diff": "@@ -39,10 +39,17 @@\n         <dependency>\n             <groupId>junit</groupId>\n             <artifactId>junit</artifactId>\n-            <version>3.8.1</version>\n+            <version>4.12</version>\n             <scope>test</scope>\n         </dependency>\n \n+        <!-- https://mvnrepository.com/artifact/javax.persistence/persistence-api -->\n+        <dependency>\n+            <groupId>javax.persistence</groupId>\n+            <artifactId>persistence-api</artifactId>\n+            <version>1.0.2</version>\n+        </dependency>\n+\n         <dependency>\n             <groupId>javax.servlet</groupId>\n             <artifactId>javax.servlet-api</artifactId>\n",
          "old_path": "jax-rs-playground/pom.xml",
          "new_path": "jax-rs-playground/pom.xml",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "d5be07cc"
        },
        {
          "diff": "@@ -0,0 +1,120 @@\n+package ua.danit;\n+\n+import ua.danit.application.Ticket;\n+\n+import javax.persistence.*;\n+\n+public class DanItEntityManager implements EntityManager {\n+  public DanItEntityManager(Class<Ticket> ticketClass) {\n+  }\n+\n+  @Override\n+  public void persist(Object o) {\n+\n+  }\n+\n+  @Override\n+  public <T> T merge(T t) {\n+    return null;\n+  }\n+\n+  @Override\n+  public void remove(Object o) {\n+\n+  }\n+\n+  @Override\n+  public <T> T find(Class<T> aClass, Object o) {\n+    return null;\n+  }\n+\n+  @Override\n+  public <T> T getReference(Class<T> aClass, Object o) {\n+    return null;\n+  }\n+\n+  @Override\n+  public void flush() {\n+\n+  }\n+\n+  @Override\n+  public void setFlushMode(FlushModeType flushModeType) {\n+\n+  }\n+\n+  @Override\n+  public FlushModeType getFlushMode() {\n+    return null;\n+  }\n+\n+  @Override\n+  public void lock(Object o, LockModeType lockModeType) {\n+\n+  }\n+\n+  @Override\n+  public void refresh(Object o) {\n+\n+  }\n+\n+  @Override\n+  public void clear() {\n+\n+  }\n+\n+  @Override\n+  public boolean contains(Object o) {\n+    return false;\n+  }\n+\n+  @Override\n+  public Query createQuery(String s) {\n+    return null;\n+  }\n+\n+  @Override\n+  public Query createNamedQuery(String s) {\n+    return null;\n+  }\n+\n+  @Override\n+  public Query createNativeQuery(String s) {\n+    return null;\n+  }\n+\n+  @Override\n+  public Query createNativeQuery(String s, Class aClass) {\n+    return null;\n+  }\n+\n+  @Override\n+  public Query createNativeQuery(String s, String s1) {\n+    return null;\n+  }\n+\n+  @Override\n+  public void joinTransaction() {\n+\n+  }\n+\n+  @Override\n+  public Object getDelegate() {\n+    return null;\n+  }\n+\n+  @Override\n+  public void close() {\n+\n+  }\n+\n+  @Override\n+  public boolean isOpen() {\n+    return false;\n+  }\n+\n+  @Override\n+  public EntityTransaction getTransaction() {\n+    return null;\n+  }\n+}\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/DanItEntityManager.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/DanItEntityManager.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "d5be07cc"
        },
        {
          "diff": "@@ -0,0 +1,7 @@\n+package ua.danit;\n+\n+public class ParamAnnotation {\n+  public String getField(String value) {\n+    return null;\n+  }\n+}\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/ParamAnnotation.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/ParamAnnotation.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "d5be07cc"
        },
        {
          "diff": "@@ -1,12 +0,0 @@\n-package ua.danit;\n-\n-/**\n- * Created  14.12.2017.\n- */\n-public class Test {\n-    public static void main ( String[] args ) {\n-        for (int i = 0; i < 10; i++) {\n-            System.out.println(i);\n-        }\n-    }\n-}\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/Test.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/Test.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": true,
          "commit_id": "d5be07cc"
        },
        {
          "diff": "@@ -3,6 +3,8 @@ package ua.danit.application;\n import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Response;\n \n public class Resource {\n     private final static String HTML_TEMPLATE = \"<!DOCTYPE html>\\n\" +\n@@ -33,6 +35,14 @@ public class Resource {\n         return sendResponse(\"No ticket available\");\n     }\n \n+    @Path(\"/query\")\n+    @GET\n+    public String getUsers( @QueryParam(\"user\") String name) {\n+\n+        return sendResponse(\"User name is : \"+name);\n+\n+    }\n+\n     private String sendResponse(String response) {\n         return String.format(HTML_TEMPLATE, response);\n     }\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/application/Resource.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/application/Resource.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "d5be07cc"
        },
        {
          "diff": "@@ -0,0 +1,20 @@\n+package ua.danit.application;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"TICKETS\")\n+public class Ticket {\n+\n+  @Column(name = \"ID\")\n+  private Long id;\n+\n+  @Column(name = \"CUSTOMER_ID\")\n+  private Long userId;\n+  private String from;\n+  private String to;\n+\n+\n+}\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/application/Ticket.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/application/Ticket.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "d5be07cc"
        },
        {
          "diff": "@@ -7,13 +7,16 @@ import org.eclipse.jetty.servlet.ServletContextHandler;\n import org.eclipse.jetty.servlet.ServletHolder;\n \n public class WebApp {\n-    public static void main (String[] args) throws Exception {\n+  public static void main(String[] args) throws Exception {\n \n-        Server server = new Server(8080);\n-        ServletContextHandler handler = new ServletContextHandler();\n-        handler.addServlet(new ServletHolder(new DispatcherServlet(Resource.class)), \"/*\");\n-        server.setHandler(handler);\n-        server.start();\n-        server.join();\n-    }\n+    Server server = new Server(8080);\n+    ServletContextHandler handler = new ServletContextHandler();\n+\n+    DispatcherServlet servlet = new DispatcherServlet(Resource.class);\n+\n+    handler.addServlet(new ServletHolder(servlet), \"/*\");\n+    server.setHandler(handler);\n+    server.start();\n+    server.join();\n+  }\n }\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/application/WebApp.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/application/WebApp.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "d5be07cc"
        },
        {
          "diff": "@@ -1,56 +1,81 @@\n package ua.danit.framework;\n \n import ua.danit.framework.invocations.Invocation;\n-import ua.danit.framework.utils.Reflections;\n \n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServlet;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n-import javax.ws.rs.Path;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.QueryParam;\n+\n import java.io.IOException;\n-import java.lang.reflect.Method;\n import java.util.HashMap;\n import java.util.Map;\n \n-import static ua.danit.framework.utils.Reflections.getMethods;\n-\n public class DispatcherServlet extends HttpServlet {\n \n-    Map<String, Invocation> resources = new HashMap<>();\n+  Map<String, Invocation> resources = new HashMap<>();\n \n-    public DispatcherServlet(Class<?>... classes) {\n-\n-        for (Class<?> aClass : classes) {\n-            for (Method method : getMethods(aClass)) {\n-                if (method.isAnnotationPresent(Path.class)) {\n-                    Invocation invoc = getInvocation(method, aClass);\n-                    resources.put(invoc.getUrl(), invoc);\n-                }\n-            }\n-        }\n+  public DispatcherServlet(Class<?>... classes) {\n+    for (Class<?> aClass : classes) {\n+      resources.putAll(Parser.getClassInvocations(aClass));\n     }\n+  }\n+\n+  @Override\n+  protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+    String uri = req.getRequestURI();\n \n-    private Invocation getInvocation(Method method, Class<?> aClass) {\n-        Path path = (Path) Reflections.getAnnotation(method, Path.class);\n-        String uri = path.value();\n-        return new Invocation(method, aClass, uri);\n+    Invocation invoc = resources.get(uri);\n+\n+    if (canHandleGetMethod(invoc)) {\n+      handleMethod(req, resp, invoc);\n+    } else {\n+      resp.sendError(404);\n     }\n+  }\n+\n+  private void handleMethod(HttpServletRequest req, HttpServletResponse resp, Invocation invoc) throws IOException {\n+\n+    String result = hasQueryParams(req) ? getHttpResult(req, invoc): invoc.invoke();\n+    resp.getWriter().write(result);\n+  }\n \n-    @Override\n-    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n-        String uri = req.getRequestURI();\n-        Invocation invoc = resources.get(uri);\n-        String result = invoc.invoke();\n-        resp.getWriter().write(result);\n+  private String getHttpResult(HttpServletRequest req, Invocation invoc) {\n+    String result = null;\n+\n+    for (QueryParam queryParam : invoc.getQueryParamList()) {\n+      String name = req.getParameter(queryParam.value());\n+      result = invoc.invoke(name);\n     }\n \n-    @Override\n-    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n-        String uri = req.getRequestURI();\n-        Invocation invoc = resources.get(uri);\n-        String result = invoc.invoke();\n-        resp.getWriter().write(result);\n+    return result;\n+  }\n+\n+  private boolean hasQueryParams(HttpServletRequest req) {\n+    return req.getQueryString() != null;\n+  }\n+\n+  private boolean canHandleGetMethod(Invocation invoc) {\n+    return invoc.getHttpMethod() instanceof GET;\n+  }\n+\n+  @Override\n+  protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+    String uri = req.getRequestURI();\n+    Invocation invoc = resources.get(uri);\n+\n+    if (canHandlePostMethod(invoc)) {\n+      handleMethod(req, resp, invoc);\n+    } else {\n+      resp.sendError(404);\n     }\n+  }\n+\n+  private boolean canHandlePostMethod(Invocation invoc) {\n+    return invoc.getHttpMethod() instanceof POST;\n+  }\n \n }\n\\ No newline at end of file\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "d5be07cc"
        },
        {
          "diff": "@@ -0,0 +1,61 @@\n+package ua.danit.framework;\n+\n+import ua.danit.framework.invocations.Invocation;\n+import ua.danit.framework.utils.Reflections;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.QueryParam;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static ua.danit.framework.utils.Reflections.getMethods;\n+\n+public class Parser {\n+\n+  public static Map<String, Invocation> getClassInvocations(Class<?> aClass) {\n+    Map<String, Invocation> resources = new HashMap<>();\n+\n+    for (Method method : getMethods(aClass)) {\n+      if (method.isAnnotationPresent(Path.class)) {\n+        Invocation invoc = getInvocation(aClass, method);\n+        resources.put(invoc.getUrl(), invoc);\n+      }\n+    }\n+\n+    return resources;\n+  }\n+\n+\n+  public static Invocation getInvocation(Class<?> aClass, Method method) {\n+    Path path = (Path) Reflections.getAnnotation(method, Path.class);\n+    String uri = path.value();\n+    Annotation annotation = Reflections.getAnnotation(method, GET.class);\n+    if (annotation == null) {\n+      annotation = Reflections.getAnnotation(method, POST.class);\n+    }\n+    if (annotation != null) {\n+      List<QueryParam> some = new ArrayList<>();\n+      Annotation[][] res = method.getParameterAnnotations();\n+\n+      for (Annotation[] re : res) {\n+        for (Annotation annotation1 : re) {\n+          if (annotation1 != null) {\n+            some.add((QueryParam) annotation1);\n+          }\n+        }\n+      }\n+      if (some == null) {\n+        return new Invocation(aClass, method, uri, annotation);\n+      } else {\n+        return new Invocation(aClass, method, uri, annotation, some);\n+      }\n+    }\n+    return new Invocation(aClass, method, uri);\n+  }\n+}\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/framework/Parser.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/framework/Parser.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "d5be07cc"
        },
        {
          "diff": "@@ -1,18 +1,61 @@\n package ua.danit.framework.invocations;\n \n+import javax.ws.rs.QueryParam;\n+import java.lang.annotation.Annotation;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n+import java.util.List;\n \n public class Invocation {\n-    private String url;\n     private Class<?> clazz;\n     private Method method;\n-    private String httpMethod;\n+    private String url;\n+\n+    private Annotation httpMethod;\n+    private String annotationsParametr;\n+    private List<QueryParam> queryParamList;\n+\n+    public Invocation(Class<?> clazz, Method method, String url) {\n+        this.method = method;\n+        this.clazz = clazz;\n+        this.url = url;\n+    }\n \n-    public Invocation(Method method, Class<?> clazz, String url) {\n+    public Invocation ( Class <?> clazz, Method method, String url, Annotation httpMethod ) {\n+        this.url = url;\n+        this.clazz = clazz;\n         this.method = method;\n+        this.httpMethod = httpMethod;\n+    }\n+\n+    public Invocation ( Class <?> clazz, Method method, String url, Annotation httpMethod, String annotationsParametr ) {\n+        this.url = url;\n+        this.clazz = clazz;\n+        this.method = method;\n+        this.httpMethod = httpMethod;\n+        this.annotationsParametr = annotationsParametr;\n+    }\n+\n+    public List <QueryParam> getQueryParamList () {\n+        return queryParamList;\n+    }\n+\n+    public Invocation ( Class <?> clazz, Method method, String url, Annotation httpMethod, List <QueryParam> queryParamList ) {\n         this.clazz = clazz;\n+        this.method = method;\n         this.url = url;\n+        this.httpMethod = httpMethod;\n+\n+        this.queryParamList = queryParamList;\n+\n+    }\n+\n+    public String getAnnotationsParametr () {\n+        return annotationsParametr;\n+    }\n+\n+    public Annotation getHttpMethod () {\n+        return httpMethod;\n     }\n \n     public String getUrl() {\n@@ -36,4 +79,18 @@ public class Invocation {\n \n         return \"Error 404\";\n     }\n+\n+    public String invoke(String str){\n+        try {\n+            return (String)method.invoke(clazz.newInstance(), str);\n+        } catch (IllegalAccessException e) {\n+            e.printStackTrace();\n+        } catch (InvocationTargetException e) {\n+            e.printStackTrace();\n+        } catch (InstantiationException e) {\n+            e.printStackTrace();\n+        }\n+\n+        return \"Error 404\";\n+    }\n }\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/framework/invocations/Invocation.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/framework/invocations/Invocation.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "d5be07cc"
        },
        {
          "diff": "@@ -0,0 +1,13 @@\n+package ua.danit.framework.invocations;\n+\n+import ua.danit.ParamAnnotation;\n+\n+public class Parameter {\n+  public Class<String> getType() {\n+    return null;\n+  }\n+\n+  public ParamAnnotation getAnnotation() {\n+    return null;\n+  }\n+}\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/framework/invocations/Parameter.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/framework/invocations/Parameter.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "d5be07cc"
        },
        {
          "diff": "@@ -1,5 +1,7 @@\n package ua.danit.framework.utils;\n \n+import ua.danit.framework.invocations.Parameter;\n+\n import java.lang.annotation.Annotation;\n import java.lang.reflect.Method;\n import java.util.Arrays;\n@@ -20,4 +22,8 @@ public class Reflections {\n         }\n         return method.getAnnotation(anno);\n     }\n+\n+    public static List<Parameter> getParameters(Method getMethod) {\n+        return null;\n+    }\n }\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/framework/utils/Reflections.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/framework/utils/Reflections.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "d5be07cc"
        },
        {
          "diff": "@@ -1,38 +0,0 @@\n-package ua.danit;\n-\n-import junit.framework.Test;\n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n-\n-/**\n- * Unit test for simple App.\n- */\n-public class AppTest \n-    extends TestCase\n-{\n-    /**\n-     * Create the test case\n-     *\n-     * @param testName name of the test case\n-     */\n-    public AppTest( String testName )\n-    {\n-        super( testName );\n-    }\n-\n-    /**\n-     * @return the suite of tests being tested\n-     */\n-    public static Test suite()\n-    {\n-        return new TestSuite( AppTest.class );\n-    }\n-\n-    /**\n-     * Rigourous Test :-)\n-     */\n-    public void testApp()\n-    {\n-        assertTrue( true );\n-    }\n-}\n",
          "old_path": "jax-rs-playground/src/test/java/ua/danit/AppTest.java",
          "new_path": "jax-rs-playground/src/test/java/ua/danit/AppTest.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": true,
          "commit_id": "d5be07cc"
        },
        {
          "diff": "@@ -0,0 +1,16 @@\n+package ua.danit;\n+\n+import org.junit.Ignore;\n+import ua.danit.application.Ticket;\n+\n+import javax.persistence.EntityManager;\n+import java.util.List;\n+\n+public class EntityTest {\n+\n+  @Ignore\n+  public void test() {\n+    EntityManager em = new DanItEntityManager(Ticket.class);\n+    List<Ticket> tickets = em.createNativeQuery(\"select * from TICKETS\", Ticket.class).getResultList();\n+  }\n+}\n",
          "old_path": "jax-rs-playground/src/test/java/ua/danit/EntityTest.java",
          "new_path": "jax-rs-playground/src/test/java/ua/danit/EntityTest.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "d5be07cc"
        },
        {
          "diff": "@@ -0,0 +1,37 @@\n+package ua.danit;\n+\n+import org.junit.Assert;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import ua.danit.framework.Parser;\n+import ua.danit.framework.invocations.Parameter;\n+import ua.danit.framework.utils.Reflections;\n+\n+import javax.ws.rs.QueryParam;\n+import java.lang.reflect.Method;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class ParserTest {\n+\n+  @Ignore\n+  @Test\n+  public void verifyThatMethodHasSpecifiedAnnotation() {\n+    List<Method> methods = Reflections.getMethods(Resource.class);\n+    Method getMethod = methods.get(0);\n+    List<Parameter> parameters  = Reflections.getParameters(getMethod);\n+    Parameter userParam = parameters.get(0);\n+\n+    assertEquals(String.class, userParam.getType());\n+    ParamAnnotation annotation = userParam.getAnnotation();\n+    assertEquals(\"user\", annotation.getField(\"value\"));\n+  }\n+\n+  public static class Resource {\n+\n+    public void get(@QueryParam(\"user\") String user) {\n+\n+    }\n+  }\n+}\n",
          "old_path": "jax-rs-playground/src/test/java/ua/danit/ParserTest.java",
          "new_path": "jax-rs-playground/src/test/java/ua/danit/ParserTest.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "d5be07cc"
        }
      ]
    },
    {
      "id": "35c0579c04b011d9e5e5d8fd61fd04da7c96bdf9",
      "project_id": 4888518,
      "message": "fix import. ignore tests\n",
      "title": "fix import. ignore tests",
      "short_id": "35c0579c",
      "author_name": "Volodymyr Derkach",
      "branches": null,
      "created_at": "2017-12-21T09:53:45Z",
      "diffs": [
        {
          "diff": "@@ -1,19 +0,0 @@\n-package test;\n-\n-import java.lang.annotation.Annotation;\n-import java.lang.reflect.Method;\n-\n-/**\n- * Created  19.12.2017.\n- */\n-public class AClass {\n-    private Class<?> clazz;\n-    private Method method;\n-    private String url;\n-\n-    private Annotation httpMethod;\n-    private String annotationsParametr;\n-\n-\n-\n-}\n",
          "old_path": "jax-rs-playground/src/main/java/test/AClass.java",
          "new_path": "jax-rs-playground/src/main/java/test/AClass.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": true,
          "commit_id": "35c0579c"
        },
        {
          "diff": "@@ -1,27 +0,0 @@\n-package test;\n-\n-import javax.ws.rs.QueryParam;\n-import java.lang.annotation.Annotation;\n-import java.lang.reflect.Method;\n-import java.util.Arrays;\n-import java.util.List;\n-\n-/**\n- * Created  19.12.2017.\n- */\n-public class Refl {\n-    public static List<Method> getMethods( Class clazz) {\n-        if (clazz == null) {\n-            return null;\n-        }\n-        return Arrays.asList(clazz.getMethods());\n-    }\n-\n-    public static Annotation getAnnotation ( Method method, Class anno) {\n-        if (method == null) {\n-            return null;\n-        }\n-        return method.getAnnotation(anno);\n-    }\n-\n-}\n",
          "old_path": "jax-rs-playground/src/main/java/test/Refl.java",
          "new_path": "jax-rs-playground/src/main/java/test/Refl.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": true,
          "commit_id": "35c0579c"
        },
        {
          "diff": "@@ -1,25 +0,0 @@\n-package test;\n-\n-import javax.ws.rs.GET;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.QueryParam;\n-\n-/**\n- * Created  19.12.2017.\n- */\n-public class Resource {\n-    private final static String HTML_TEMPLATE = \"<!DOCTYPE html>\\n\" +\n-            \"<html>\\n<head><title>British Airlines</title></head>\" +\n-            \"<body><h1 style=\\\" text-align: center; \\\">%s</h1></body></html>\";\n-    @Path(\"/query\")\n-    @GET\n-    public String getUsers( @QueryParam(\"user\") String name,@QueryParam(\"age\") int age) {\n-\n-        return sendResponse(\"User name is : \"+name+\" age\"+age);\n-\n-    }\n-\n-    private String sendResponse(String response) {\n-        return String.format(HTML_TEMPLATE, response);\n-    }\n-}\n",
          "old_path": "jax-rs-playground/src/main/java/test/Resource.java",
          "new_path": "jax-rs-playground/src/main/java/test/Resource.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": true,
          "commit_id": "35c0579c"
        },
        {
          "diff": "@@ -1,50 +0,0 @@\n-package test;\n-\n-import ua.danit.framework.utils.Reflections;\n-\n-import javax.ws.rs.GET;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.QueryParam;\n-import java.lang.annotation.Annotation;\n-import java.lang.reflect.Method;\n-import java.util.ArrayList;\n-\n-import static ua.danit.framework.utils.Reflections.getMethods;\n-\n-/**\n- * Created  19.12.2017.\n- */\n-public class Start {\n-    public static void main ( String[] args ) {\n-        for (Method method : getMethods(Resource.class)) {\n-            if ( method.isAnnotationPresent(Path.class) ) {\n-                Path path = (Path) Reflections.getAnnotation(method, Path.class);\n-                if ( path != null ) {\n-                    System.out.println(method);\n-                    System.out.println(path);\n-                    System.out.println(path.value());\n-                    Annotation annotation = Reflections.getAnnotation(method, GET.class);\n-                    System.out.println(annotation);\n-                    Annotation[][] res = method.getParameterAnnotations();\n-                    for (Annotation[] re : res) {\n-                        for (Annotation annotation1 : re) {\n-                            if ( annotation1 != null ) {\n-                                QueryParam ress = (QueryParam) annotation1;\n-                                System.out.println(ress.value());\n-                            }\n-                        }\n-                    }\n-                    Class <?>[] qqq = method.getParameterTypes();\n-                    ArrayList wwww = new ArrayList();\n-                    for (Class <?> aClass : qqq) {\n-                        wwww.add(aClass);\n-                    }\n-                    for (Object o : wwww) {\n-                        System.out.println(o);\n-\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n",
          "old_path": "jax-rs-playground/src/main/java/test/Start.java",
          "new_path": "jax-rs-playground/src/main/java/test/Start.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": true,
          "commit_id": "35c0579c"
        },
        {
          "diff": "@@ -0,0 +1,120 @@\n+package ua.danit;\n+\n+import ua.danit.application.Ticket;\n+\n+import javax.persistence.*;\n+\n+public class DanItEntityManager implements EntityManager {\n+  public DanItEntityManager(Class<Ticket> ticketClass) {\n+  }\n+\n+  @Override\n+  public void persist(Object o) {\n+\n+  }\n+\n+  @Override\n+  public <T> T merge(T t) {\n+    return null;\n+  }\n+\n+  @Override\n+  public void remove(Object o) {\n+\n+  }\n+\n+  @Override\n+  public <T> T find(Class<T> aClass, Object o) {\n+    return null;\n+  }\n+\n+  @Override\n+  public <T> T getReference(Class<T> aClass, Object o) {\n+    return null;\n+  }\n+\n+  @Override\n+  public void flush() {\n+\n+  }\n+\n+  @Override\n+  public void setFlushMode(FlushModeType flushModeType) {\n+\n+  }\n+\n+  @Override\n+  public FlushModeType getFlushMode() {\n+    return null;\n+  }\n+\n+  @Override\n+  public void lock(Object o, LockModeType lockModeType) {\n+\n+  }\n+\n+  @Override\n+  public void refresh(Object o) {\n+\n+  }\n+\n+  @Override\n+  public void clear() {\n+\n+  }\n+\n+  @Override\n+  public boolean contains(Object o) {\n+    return false;\n+  }\n+\n+  @Override\n+  public Query createQuery(String s) {\n+    return null;\n+  }\n+\n+  @Override\n+  public Query createNamedQuery(String s) {\n+    return null;\n+  }\n+\n+  @Override\n+  public Query createNativeQuery(String s) {\n+    return null;\n+  }\n+\n+  @Override\n+  public Query createNativeQuery(String s, Class aClass) {\n+    return null;\n+  }\n+\n+  @Override\n+  public Query createNativeQuery(String s, String s1) {\n+    return null;\n+  }\n+\n+  @Override\n+  public void joinTransaction() {\n+\n+  }\n+\n+  @Override\n+  public Object getDelegate() {\n+    return null;\n+  }\n+\n+  @Override\n+  public void close() {\n+\n+  }\n+\n+  @Override\n+  public boolean isOpen() {\n+    return false;\n+  }\n+\n+  @Override\n+  public EntityTransaction getTransaction() {\n+    return null;\n+  }\n+}\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/DanItEntityManager.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/DanItEntityManager.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "35c0579c"
        },
        {
          "diff": "@@ -26,7 +26,7 @@ public class DispatcherServlet extends HttpServlet {\n \n   @Override\n   protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n-    String uri = req.getStrgetRequestURI();\n+    String uri = req.getRequestURI();\n \n     Invocation invoc = resources.get(uri);\n \n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "35c0579c"
        },
        {
          "diff": "@@ -1,5 +1,6 @@\n package ua.danit;\n \n+import org.junit.Ignore;\n import ua.danit.application.Ticket;\n \n import javax.persistence.EntityManager;\n@@ -7,8 +8,9 @@ import java.util.List;\n \n public class EntityTest {\n \n+  @Ignore\n   public void test() {\n     EntityManager em = new DanItEntityManager(Ticket.class);\n-    List<Ticket> tickets = em.select(\"select * from TICKETS\", Ticket.class);\n+    List<Ticket> tickets = em.createNativeQuery(\"select * from TICKETS\", Ticket.class).getResultList();\n   }\n }\n",
          "old_path": "jax-rs-playground/src/test/java/ua/danit/EntityTest.java",
          "new_path": "jax-rs-playground/src/test/java/ua/danit/EntityTest.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "35c0579c"
        },
        {
          "diff": "@@ -1,6 +1,7 @@\n package ua.danit;\n \n import org.junit.Assert;\n+import org.junit.Ignore;\n import org.junit.Test;\n import ua.danit.framework.Parser;\n import ua.danit.framework.invocations.Parameter;\n@@ -14,6 +15,7 @@ import static org.junit.Assert.assertEquals;\n \n public class ParserTest {\n \n+  @Ignore\n   @Test\n   public void verifyThatMethodHasSpecifiedAnnotation() {\n     List<Method> methods = Reflections.getMethods(Resource.class);\n",
          "old_path": "jax-rs-playground/src/test/java/ua/danit/ParserTest.java",
          "new_path": "jax-rs-playground/src/test/java/ua/danit/ParserTest.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "35c0579c"
        }
      ]
    },
    {
      "id": "3b9e75fddec6c43d431409bc209d880320a8f4bf",
      "project_id": 4888518,
      "message": "Update README.md",
      "title": "Update README.md",
      "short_id": "3b9e75fd",
      "author_name": "Volodymyr Derkach",
      "branches": null,
      "created_at": "2017-12-20T21:38:35Z",
      "diffs": [
        {
          "diff": "@@ -17,4 +17,9 @@ To start rest application open your *Terminal* and type `bash start.sh` in it.\n Open your browser and type `localhost:8080` in address field, if you see \" Welcome to British airport \" that means your application is working.\n \n ### Rules for contributors\n-The big request to participants not to write in the file README.md any crap and dregs, add only useful text.\n\\ No newline at end of file\n+The big request to participants not to write in the file README.md any crap and dregs, add only useful text.\n+\n+## REST framework\n+\n+Framework that implements [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) standard in java.\n+Standart called [JAX-RS](https://jcp.org/en/jsr/detail?id=339) and reference implementation called [Jersey](https://jersey.github.io/).\n\\ No newline at end of file\n",
          "old_path": "README.md",
          "new_path": "README.md",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "3b9e75fd"
        }
      ]
    },
    {
      "id": "22cc8b7f6ec0114e1068a1f1b0e0984d92ece638",
      "project_id": 4888518,
      "message": "lesson 3\n",
      "title": "lesson 3",
      "short_id": "22cc8b7f",
      "author_name": "Volodymyr Derkach",
      "branches": null,
      "created_at": "2017-12-20T20:04:52Z",
      "diffs": [
        {
          "diff": "@@ -39,10 +39,17 @@\n         <dependency>\n             <groupId>junit</groupId>\n             <artifactId>junit</artifactId>\n-            <version>3.8.1</version>\n+            <version>4.12</version>\n             <scope>test</scope>\n         </dependency>\n \n+        <!-- https://mvnrepository.com/artifact/javax.persistence/persistence-api -->\n+        <dependency>\n+            <groupId>javax.persistence</groupId>\n+            <artifactId>persistence-api</artifactId>\n+            <version>1.0.2</version>\n+        </dependency>\n+\n         <dependency>\n             <groupId>javax.servlet</groupId>\n             <artifactId>javax.servlet-api</artifactId>\n",
          "old_path": "jax-rs-playground/pom.xml",
          "new_path": "jax-rs-playground/pom.xml",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "22cc8b7f"
        },
        {
          "diff": "@@ -0,0 +1,7 @@\n+package ua.danit;\n+\n+public class ParamAnnotation {\n+  public String getField(String value) {\n+    return null;\n+  }\n+}\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/ParamAnnotation.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/ParamAnnotation.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "22cc8b7f"
        },
        {
          "diff": "@@ -0,0 +1,20 @@\n+package ua.danit.application;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"TICKETS\")\n+public class Ticket {\n+\n+  @Column(name = \"ID\")\n+  private Long id;\n+\n+  @Column(name = \"CUSTOMER_ID\")\n+  private Long userId;\n+  private String from;\n+  private String to;\n+\n+\n+}\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/application/Ticket.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/application/Ticket.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "22cc8b7f"
        },
        {
          "diff": "@@ -7,13 +7,16 @@ import org.eclipse.jetty.servlet.ServletContextHandler;\n import org.eclipse.jetty.servlet.ServletHolder;\n \n public class WebApp {\n-    public static void main (String[] args) throws Exception {\n+  public static void main(String[] args) throws Exception {\n \n-        Server server = new Server(8080);\n-        ServletContextHandler handler = new ServletContextHandler();\n-        handler.addServlet(new ServletHolder(new DispatcherServlet(Resource.class)), \"/*\");\n-        server.setHandler(handler);\n-        server.start();\n-        server.join();\n-    }\n+    Server server = new Server(8080);\n+    ServletContextHandler handler = new ServletContextHandler();\n+\n+    DispatcherServlet servlet = new DispatcherServlet(Resource.class);\n+\n+    handler.addServlet(new ServletHolder(servlet), \"/*\");\n+    server.setHandler(handler);\n+    server.start();\n+    server.join();\n+  }\n }\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/application/WebApp.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/application/WebApp.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "22cc8b7f"
        },
        {
          "diff": "@@ -1,7 +1,6 @@\n package ua.danit.framework;\n \n import ua.danit.framework.invocations.Invocation;\n-import ua.danit.framework.utils.Reflections;\n \n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServlet;\n@@ -9,99 +8,74 @@ import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n-import javax.ws.rs.Path;\n import javax.ws.rs.QueryParam;\n \n import java.io.IOException;\n-import java.lang.annotation.Annotation;\n-import java.lang.reflect.Method;\n-import java.util.ArrayList;\n import java.util.HashMap;\n-import java.util.List;\n import java.util.Map;\n \n-import static ua.danit.framework.utils.Reflections.getMethods;\n-\n public class DispatcherServlet extends HttpServlet {\n \n-    Map<String, Invocation> resources = new HashMap<>();\n-\n-    public DispatcherServlet(Class<?>... classes) {\n+  Map<String, Invocation> resources = new HashMap<>();\n \n-        for (Class<?> aClass : classes) {\n-            for (Method method : getMethods(aClass)) {\n-                if (method.isAnnotationPresent(Path.class)) {\n-                    Invocation invoc = getInvocation(aClass, method);\n-                    resources.put(invoc.getUrl(), invoc);\n-                }\n-            }\n-        }\n+  public DispatcherServlet(Class<?>... classes) {\n+    for (Class<?> aClass : classes) {\n+      resources.putAll(Parser.getClassInvocations(aClass));\n     }\n+  }\n+\n+  @Override\n+  protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+    String uri = req.getStrgetRequestURI();\n \n-    private Invocation getInvocation(Class<?> aClass, Method method) {\n-        Path path = (Path) Reflections.getAnnotation(method, Path.class);\n-        String uri = path.value();\n-        Annotation annotation = Reflections.getAnnotation(method, GET.class);\n-        if(annotation ==null){\n-            annotation = Reflections.getAnnotation(method, POST.class);\n-        }\n-        if ( annotation !=null ){\n-            List<QueryParam> some = new ArrayList <>();\n-            Annotation[][] res = method.getParameterAnnotations();\n-            for (Annotation[] re : res) {\n-                for (Annotation annotation1 : re) {\n-                    if ( annotation1 != null ) {\n-                        some.add((QueryParam) annotation1);\n-                    }\n-                }\n-            }\n-            if ( some == null ){\n-                return new Invocation(aClass, method, uri, annotation);\n-            }else{\n-                return new Invocation(aClass, method, uri, annotation,some);\n-            }\n-        }\n-            return new Invocation(aClass, method, uri) ;\n+    Invocation invoc = resources.get(uri);\n+\n+    if (canHandleGetMethod(invoc)) {\n+      handleMethod(req, resp, invoc);\n+    } else {\n+      resp.sendError(404);\n     }\n+  }\n+\n+  private void handleMethod(HttpServletRequest req, HttpServletResponse resp, Invocation invoc) throws IOException {\n+\n+    String result = hasQueryParams(req) ? getHttpResult(req, invoc): invoc.invoke();\n+    resp.getWriter().write(result);\n+  }\n \n-    @Override\n-    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n-        String uri = req.getRequestURI();\n-        Invocation invoc = resources.get(uri);\n-        if(invoc.getHttpMethod() instanceof GET) {\n-            if ( req.getQueryString()==null ) {\n-                String result = invoc.invoke();\n-                resp.getWriter().write(result);\n-            }else {\n-                for (QueryParam queryParam : invoc.getQueryParamList()) {\n-                    String name =req.getParameter(queryParam.value());\n-                    String result = invoc.invoke(name);\n-                    resp.getWriter().write(result);\n-                }\n-            }\n-        }else{\n-            resp.sendError(404);\n-        }\n+  private String getHttpResult(HttpServletRequest req, Invocation invoc) {\n+    String result = null;\n+\n+    for (QueryParam queryParam : invoc.getQueryParamList()) {\n+      String name = req.getParameter(queryParam.value());\n+      result = invoc.invoke(name);\n     }\n \n-    @Override\n-    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n-        String uri = req.getRequestURI();\n-        Invocation invoc = resources.get(uri);\n-        if(invoc.getHttpMethod() instanceof POST) {\n-            if ( req.getQueryString()==null ) {\n-                String result = invoc.invoke();\n-                resp.getWriter().write(result);\n-            }else {\n-                for (QueryParam queryParam : invoc.getQueryParamList()) {\n-                    String name =req.getParameter(queryParam.value());\n-                    String result = invoc.invoke(name);\n-                    resp.getWriter().write(result);\n-                }\n-            }\n-        }else{\n-            resp.sendError(404);\n-        }\n+    return result;\n+  }\n+\n+  private boolean hasQueryParams(HttpServletRequest req) {\n+    return req.getQueryString() != null;\n+  }\n+\n+  private boolean canHandleGetMethod(Invocation invoc) {\n+    return invoc.getHttpMethod() instanceof GET;\n+  }\n+\n+  @Override\n+  protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+    String uri = req.getRequestURI();\n+    Invocation invoc = resources.get(uri);\n+\n+    if (canHandlePostMethod(invoc)) {\n+      handleMethod(req, resp, invoc);\n+    } else {\n+      resp.sendError(404);\n     }\n+  }\n+\n+  private boolean canHandlePostMethod(Invocation invoc) {\n+    return invoc.getHttpMethod() instanceof POST;\n+  }\n \n }\n\\ No newline at end of file\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "22cc8b7f"
        },
        {
          "diff": "@@ -0,0 +1,61 @@\n+package ua.danit.framework;\n+\n+import ua.danit.framework.invocations.Invocation;\n+import ua.danit.framework.utils.Reflections;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.QueryParam;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static ua.danit.framework.utils.Reflections.getMethods;\n+\n+public class Parser {\n+\n+  public static Map<String, Invocation> getClassInvocations(Class<?> aClass) {\n+    Map<String, Invocation> resources = new HashMap<>();\n+\n+    for (Method method : getMethods(aClass)) {\n+      if (method.isAnnotationPresent(Path.class)) {\n+        Invocation invoc = getInvocation(aClass, method);\n+        resources.put(invoc.getUrl(), invoc);\n+      }\n+    }\n+\n+    return resources;\n+  }\n+\n+\n+  public static Invocation getInvocation(Class<?> aClass, Method method) {\n+    Path path = (Path) Reflections.getAnnotation(method, Path.class);\n+    String uri = path.value();\n+    Annotation annotation = Reflections.getAnnotation(method, GET.class);\n+    if (annotation == null) {\n+      annotation = Reflections.getAnnotation(method, POST.class);\n+    }\n+    if (annotation != null) {\n+      List<QueryParam> some = new ArrayList<>();\n+      Annotation[][] res = method.getParameterAnnotations();\n+\n+      for (Annotation[] re : res) {\n+        for (Annotation annotation1 : re) {\n+          if (annotation1 != null) {\n+            some.add((QueryParam) annotation1);\n+          }\n+        }\n+      }\n+      if (some == null) {\n+        return new Invocation(aClass, method, uri, annotation);\n+      } else {\n+        return new Invocation(aClass, method, uri, annotation, some);\n+      }\n+    }\n+    return new Invocation(aClass, method, uri);\n+  }\n+}\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/framework/Parser.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/framework/Parser.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "22cc8b7f"
        },
        {
          "diff": "@@ -0,0 +1,13 @@\n+package ua.danit.framework.invocations;\n+\n+import ua.danit.ParamAnnotation;\n+\n+public class Parameter {\n+  public Class<String> getType() {\n+    return null;\n+  }\n+\n+  public ParamAnnotation getAnnotation() {\n+    return null;\n+  }\n+}\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/framework/invocations/Parameter.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/framework/invocations/Parameter.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "22cc8b7f"
        },
        {
          "diff": "@@ -1,5 +1,7 @@\n package ua.danit.framework.utils;\n \n+import ua.danit.framework.invocations.Parameter;\n+\n import java.lang.annotation.Annotation;\n import java.lang.reflect.Method;\n import java.util.Arrays;\n@@ -20,4 +22,8 @@ public class Reflections {\n         }\n         return method.getAnnotation(anno);\n     }\n+\n+    public static List<Parameter> getParameters(Method getMethod) {\n+        return null;\n+    }\n }\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/framework/utils/Reflections.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/framework/utils/Reflections.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "22cc8b7f"
        },
        {
          "diff": "@@ -1,38 +0,0 @@\n-package ua.danit;\n-\n-import junit.framework.Test;\n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n-\n-/**\n- * Unit test for simple App.\n- */\n-public class AppTest \n-    extends TestCase\n-{\n-    /**\n-     * Create the test case\n-     *\n-     * @param testName name of the test case\n-     */\n-    public AppTest( String testName )\n-    {\n-        super( testName );\n-    }\n-\n-    /**\n-     * @return the suite of tests being tested\n-     */\n-    public static Test suite()\n-    {\n-        return new TestSuite( AppTest.class );\n-    }\n-\n-    /**\n-     * Rigourous Test :-)\n-     */\n-    public void testApp()\n-    {\n-        assertTrue( true );\n-    }\n-}\n",
          "old_path": "jax-rs-playground/src/test/java/ua/danit/AppTest.java",
          "new_path": "jax-rs-playground/src/test/java/ua/danit/AppTest.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": true,
          "commit_id": "22cc8b7f"
        },
        {
          "diff": "@@ -0,0 +1,14 @@\n+package ua.danit;\n+\n+import ua.danit.application.Ticket;\n+\n+import javax.persistence.EntityManager;\n+import java.util.List;\n+\n+public class EntityTest {\n+\n+  public void test() {\n+    EntityManager em = new DanItEntityManager(Ticket.class);\n+    List<Ticket> tickets = em.select(\"select * from TICKETS\", Ticket.class);\n+  }\n+}\n",
          "old_path": "jax-rs-playground/src/test/java/ua/danit/EntityTest.java",
          "new_path": "jax-rs-playground/src/test/java/ua/danit/EntityTest.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "22cc8b7f"
        },
        {
          "diff": "@@ -0,0 +1,35 @@\n+package ua.danit;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import ua.danit.framework.Parser;\n+import ua.danit.framework.invocations.Parameter;\n+import ua.danit.framework.utils.Reflections;\n+\n+import javax.ws.rs.QueryParam;\n+import java.lang.reflect.Method;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class ParserTest {\n+\n+  @Test\n+  public void verifyThatMethodHasSpecifiedAnnotation() {\n+    List<Method> methods = Reflections.getMethods(Resource.class);\n+    Method getMethod = methods.get(0);\n+    List<Parameter> parameters  = Reflections.getParameters(getMethod);\n+    Parameter userParam = parameters.get(0);\n+\n+    assertEquals(String.class, userParam.getType());\n+    ParamAnnotation annotation = userParam.getAnnotation();\n+    assertEquals(\"user\", annotation.getField(\"value\"));\n+  }\n+\n+  public static class Resource {\n+\n+    public void get(@QueryParam(\"user\") String user) {\n+\n+    }\n+  }\n+}\n",
          "old_path": "jax-rs-playground/src/test/java/ua/danit/ParserTest.java",
          "new_path": "jax-rs-playground/src/test/java/ua/danit/ParserTest.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "22cc8b7f"
        }
      ]
    },
    {
      "id": "ce4f103e4839e2688f48ecc3855a5f7490d12eb2",
      "project_id": 4888518,
      "message": "update README\n",
      "title": "update README",
      "short_id": "ce4f103e",
      "author_name": "Volodymyr Derkach",
      "branches": null,
      "created_at": "2017-12-20T17:00:13Z",
      "diffs": [
        {
          "diff": "@@ -1,6 +1,24 @@\n+<<<<<<< HEAD\n <b>Current target:</b>\n+=======\n+## Web application\n \n-Create a service that will accept all Resources(annotated with @Path), parse all methods and put it in internal map\n+### Goal\n+Create rest application that shows airport's shedule flights.\n+>>>>>>> ede3e4f56bfbf32903d4dcdb8cc7bfb5727d3c88\n \n+### Tools\n+* [Apache Maven](https://maven.apache.org/) is a software project management and comprehension tool.\n+* [Eclipse Jetty](https://www.eclipse.org/jetty) provides a Web server and javax.servlet container, plus support for HTTP/2, WebSocket, OSGi, JMX, JNDI, JAAS and many other integrations.\n+* [JUnit ](http://junit.org/junit4) is a simple framework to write repeatable tests. It is an instance of the xUnit architecture for unit testing frameworks. \n \n+### Installiation and Execution\n+To start rest application open your *Terminal* and type `bash start.sh` in it.\n \n+``$ cd {working directory}``   \n+``$ bash start.sh``\n+\n+Open your browser and type `localhost:8080` in address field, if you see \" Welcome to British airport \" that means your application is working.\n+\n+### Rules for contributors\n+The big request to participants not to write in the file README.md any crap and dregs, add only useful text.\n\\ No newline at end of file\n",
          "old_path": "README.md",
          "new_path": "README.md",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "ce4f103e"
        },
        {
          "diff": "@@ -1,12 +1,16 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n   <modelVersion>4.0.0</modelVersion>\n   <groupId>ua.danit</groupId>\n   <artifactId>jax-rs-playground</artifactId>\n   <name>jax-rs-playground</name>\n   <version>1.0-SNAPSHOT</version>\n   <url>http://maven.apache.org</url>\n+\n   <build>\n+\n     <plugins>\n       <plugin>\n         <artifactId>maven-compiler-plugin</artifactId>\n@@ -16,18 +20,20 @@\n           <target>1.8</target>\n         </configuration>\n       </plugin>\n+\n       <plugin>\n         <artifactId>maven-jar-plugin</artifactId>\n         <version>3.0.2</version>\n         <configuration>\n           <archive>\n             <manifest>\n-              <mainClass>ua.danit.App</mainClass>\n+              <mainClass>ua.danit.application.WebApp</mainClass>\n               <addClasspath>true</addClasspath>\n             </manifest>\n           </archive>\n         </configuration>\n       </plugin>\n+\n       <plugin>\n         <artifactId>maven-shade-plugin</artifactId>\n         <executions>\n@@ -44,6 +50,7 @@\n       </plugin>\n     </plugins>\n   </build>\n+\n   <dependencies>\n     <dependency>\n       <groupId>junit</groupId>\n@@ -52,9 +59,10 @@\n       <scope>test</scope>\n     </dependency>\n   </dependencies>\n+\n   <properties>\n     <jetty.version>9.4.6.v20170531</jetty.version>\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n   </properties>\n-</project>\n \n+</project>\n\\ No newline at end of file\n",
          "old_path": "jax-rs-playground/dependency-reduced-pom.xml",
          "new_path": "jax-rs-playground/dependency-reduced-pom.xml",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "ce4f103e"
        },
        {
          "diff": "@@ -35,12 +35,14 @@\n             <artifactId>jetty-server</artifactId>\n             <version>${jetty.version}</version>\n         </dependency>\n+\n         <dependency>\n             <groupId>junit</groupId>\n             <artifactId>junit</artifactId>\n             <version>3.8.1</version>\n             <scope>test</scope>\n         </dependency>\n+\n         <dependency>\n             <groupId>javax.servlet</groupId>\n             <artifactId>javax.servlet-api</artifactId>\n@@ -65,7 +67,7 @@\n                 <configuration>\n                     <archive>\n                         <manifest>\n-                            <mainClass>ua.danit.App</mainClass>\n+                            <mainClass>ua.danit.application.WebApp</mainClass>\n                         </manifest>\n                     </archive>\n                     <descriptorRefs>\n",
          "old_path": "jax-rs-playground/pom.xml",
          "new_path": "jax-rs-playground/pom.xml",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "ce4f103e"
        },
        {
          "diff": "@@ -1,25 +0,0 @@\n-package ua.danit;\n-\n-import javax.ws.rs.GET;\n-import javax.ws.rs.Path;\n-\n-\n-public class MyController {\n-\n-    @Path(\"/my/custom/url\")\n-    @GET\n-    public String getWeather() {\n-        return \"The weather is cool\";\n-    }\n-\n-    @Path(\"/flights\")\n-    @GET\n-    public String getFlights() {\n-        return \"Please don't fly today\";\n-    }\n-\n-    @Path(\"/tickets\")\n-    public String getTickets() {\n-        return \"No ticket available.\";\n-    }\n-}\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/MyController.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/MyController.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": true,
          "commit_id": "ce4f103e"
        },
        {
          "diff": "@@ -0,0 +1,39 @@\n+package ua.danit.application;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+\n+public class Resource {\n+    private final static String HTML_TEMPLATE = \"<!DOCTYPE html>\\n\" +\n+            \"<html>\\n<head><title>British Airlines</title></head>\" +\n+            \"<body><h1 style=\\\" text-align: center; \\\">%s</h1></body></html>\";\n+\n+    @Path(\"/\")\n+    @GET\n+    public String welcome() {\n+        return sendResponse(\"Welcome to British Airlines\");\n+    }\n+\n+    @Path(\"/weather\")\n+    @GET\n+    public String getWeather() {\n+        return sendResponse(\"Today weather is cool isn't\");\n+    }\n+\n+    @Path(\"/flights\")\n+    @GET\n+    public String getFlights() {\n+        return sendResponse(\"Today all routes closed\");\n+    }\n+\n+    @Path(\"/tickets\")\n+    @POST\n+    public String getTickets() {\n+        return sendResponse(\"No ticket available\");\n+    }\n+\n+    private String sendResponse(String response) {\n+        return String.format(HTML_TEMPLATE, response);\n+    }\n+}\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/application/Resource.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/application/Resource.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "ce4f103e"
        },
        {
          "diff": "@@ -1,25 +1,17 @@\n-package ua.danit;\n+package ua.danit.application;\n+\n+import ua.danit.framework.DispatcherServlet;\n \n import org.eclipse.jetty.server.Server;\n import org.eclipse.jetty.servlet.ServletContextHandler;\n import org.eclipse.jetty.servlet.ServletHolder;\n-import utils.Reflections;\n \n-import javax.servlet.ServletException;\n-import javax.servlet.http.HttpServlet;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.ws.rs.Path;\n-import java.io.IOException;\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n+public class WebApp {\n+    public static void main (String[] args) throws Exception {\n \n-public class App {\n-    public static void main ( String[] args ) throws Exception {\n         Server server = new Server(8080);\n-\n         ServletContextHandler handler = new ServletContextHandler();\n-        handler.addServlet(new ServletHolder(new DispatcherServlet(MyController.class)), \"/*\");\n+        handler.addServlet(new ServletHolder(new DispatcherServlet(Resource.class)), \"/*\");\n         server.setHandler(handler);\n         server.start();\n         server.join();\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/App.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/application/WebApp.java",
          "new_file": false,
          "renamed_file": true,
          "deleted_file": false,
          "commit_id": "ce4f103e"
        },
        {
          "diff": "@@ -1,8 +1,7 @@\n-package ua.danit;\n+package ua.danit.framework;\n \n-import com.sun.org.apache.bcel.internal.generic.Type;\n-import ua.danit.signature.Signature;\n-import utils.Reflections;\n+import ua.danit.framework.invocations.Invocation;\n+import ua.danit.framework.utils.Reflections;\n \n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServlet;\n@@ -10,44 +9,47 @@ import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import javax.ws.rs.Path;\n import java.io.IOException;\n-import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n-import java.util.ArrayList;\n import java.util.HashMap;\n-import java.util.List;\n import java.util.Map;\n \n-import static utils.Reflections.getMethods;\n+import static ua.danit.framework.utils.Reflections.getMethods;\n \n public class DispatcherServlet extends HttpServlet {\n \n-    Map<String, Signature> resources = new HashMap<>();\n+    Map<String, Invocation> resources = new HashMap<>();\n \n     public DispatcherServlet(Class<?>... classes) {\n \n         for (Class<?> aClass : classes) {\n-\n             for (Method method : getMethods(aClass)) {\n                 if (method.isAnnotationPresent(Path.class)) {\n-                    Signature signature = getSignature(method, aClass);\n-                    resources.put(signature.getUrl(), signature);\n+                    Invocation invoc = getInvocation(method, aClass);\n+                    resources.put(invoc.getUrl(), invoc);\n                 }\n             }\n         }\n     }\n \n-    private Signature getSignature(Method method, Class<?> aClass) {\n+    private Invocation getInvocation(Method method, Class<?> aClass) {\n         Path path = (Path) Reflections.getAnnotation(method, Path.class);\n         String uri = path.value();\n-        return new Signature(method, uri, aClass);\n+        return new Invocation(method, aClass, uri);\n     }\n \n-\n     @Override\n     protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n         String uri = req.getRequestURI();\n-        Signature signature = resources.get(uri);\n-        String result = signature.invoke();\n+        Invocation invoc = resources.get(uri);\n+        String result = invoc.invoke();\n+        resp.getWriter().write(result);\n+    }\n+\n+    @Override\n+    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+        String uri = req.getRequestURI();\n+        Invocation invoc = resources.get(uri);\n+        String result = invoc.invoke();\n         resp.getWriter().write(result);\n     }\n \n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/DispatcherServlet.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_file": false,
          "renamed_file": true,
          "deleted_file": false,
          "commit_id": "ce4f103e"
        },
        {
          "diff": "@@ -1,18 +1,18 @@\n-package ua.danit.signature;\n+package ua.danit.framework.invocations;\n \n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n \n-public class Signature {\n-\n-    String url;\n+public class Invocation {\n+    private String url;\n     private Class<?> clazz;\n     private Method method;\n+    private String httpMethod;\n \n-    public Signature(Method method, String url, Class<?> aClass) {\n+    public Invocation(Method method, Class<?> clazz, String url) {\n         this.method = method;\n+        this.clazz = clazz;\n         this.url = url;\n-        clazz = aClass;\n     }\n \n     public String getUrl() {\n@@ -34,6 +34,6 @@ public class Signature {\n             e.printStackTrace();\n         }\n \n-        return \"\";\n+        return \"Error 404\";\n     }\n }\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/signature/Signature.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/framework/invocations/Invocation.java",
          "new_file": false,
          "renamed_file": true,
          "deleted_file": false,
          "commit_id": "ce4f103e"
        },
        {
          "diff": "@@ -1,28 +1,23 @@\n-package utils;\n+package ua.danit.framework.utils;\n \n import java.lang.annotation.Annotation;\n import java.lang.reflect.Method;\n import java.util.Arrays;\n import java.util.List;\n \n-\n-/**\n- * Created  15.12.2017.\n- */\n public class Reflections {\n \n-    public static List <Method> getMethods ( Class clazz ) {\n-        if ( clazz == null ) {\n+    public static List<Method> getMethods(Class clazz) {\n+        if (clazz == null) {\n             return null;\n         }\n         return Arrays.asList(clazz.getMethods());\n     }\n \n-\n-    public static Annotation getAnnotation ( Method method ,Class annotationClass) {\n-        if ( method == null  ) {\n+    public static Annotation getAnnotation (Method method, Class anno) {\n+        if (method == null) {\n             return null;\n         }\n-        return method.getAnnotation(annotationClass);\n+        return method.getAnnotation(anno);\n     }\n }\n",
          "old_path": "jax-rs-playground/src/main/java/utils/Reflections.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/framework/utils/Reflections.java",
          "new_file": false,
          "renamed_file": true,
          "deleted_file": false,
          "commit_id": "ce4f103e"
        },
        {
          "diff": "@@ -1,5 +1,5 @@\n #!/bin/bash\n \n-mvn clean package &\n-cd target/ &\n-java -jar *with-dependencies.jar\n+mvn clean package \n+cd target/ \n+java -jar jax-rs-playground-1.0-SNAPSHOT-jar-with-dependencies.jar\n",
          "old_path": "jax-rs-playground/start.sh",
          "new_path": "jax-rs-playground/start.sh",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "ce4f103e"
        }
      ]
    },
    {
      "id": "f1dd6e050db9b58c231f5d2a2bd249939690876d",
      "project_id": 4888518,
      "message": "add QueryParam\n",
      "title": "add QueryParam",
      "short_id": "f1dd6e05",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2017-12-19T22:48:58Z",
      "diffs": [
        {
          "diff": "@@ -0,0 +1,19 @@\n+package test;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Method;\n+\n+/**\n+ * Created  19.12.2017.\n+ */\n+public class AClass {\n+    private Class<?> clazz;\n+    private Method method;\n+    private String url;\n+\n+    private Annotation httpMethod;\n+    private String annotationsParametr;\n+\n+\n+\n+}\n",
          "old_path": "jax-rs-playground/src/main/java/test/AClass.java",
          "new_path": "jax-rs-playground/src/main/java/test/AClass.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "f1dd6e05"
        },
        {
          "diff": "@@ -0,0 +1,27 @@\n+package test;\n+\n+import javax.ws.rs.QueryParam;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * Created  19.12.2017.\n+ */\n+public class Refl {\n+    public static List<Method> getMethods( Class clazz) {\n+        if (clazz == null) {\n+            return null;\n+        }\n+        return Arrays.asList(clazz.getMethods());\n+    }\n+\n+    public static Annotation getAnnotation ( Method method, Class anno) {\n+        if (method == null) {\n+            return null;\n+        }\n+        return method.getAnnotation(anno);\n+    }\n+\n+}\n",
          "old_path": "jax-rs-playground/src/main/java/test/Refl.java",
          "new_path": "jax-rs-playground/src/main/java/test/Refl.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "f1dd6e05"
        },
        {
          "diff": "@@ -0,0 +1,25 @@\n+package test;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.QueryParam;\n+\n+/**\n+ * Created  19.12.2017.\n+ */\n+public class Resource {\n+    private final static String HTML_TEMPLATE = \"<!DOCTYPE html>\\n\" +\n+            \"<html>\\n<head><title>British Airlines</title></head>\" +\n+            \"<body><h1 style=\\\" text-align: center; \\\">%s</h1></body></html>\";\n+    @Path(\"/query\")\n+    @GET\n+    public String getUsers( @QueryParam(\"user\") String name,@QueryParam(\"age\") int age) {\n+\n+        return sendResponse(\"User name is : \"+name+\" age\"+age);\n+\n+    }\n+\n+    private String sendResponse(String response) {\n+        return String.format(HTML_TEMPLATE, response);\n+    }\n+}\n",
          "old_path": "jax-rs-playground/src/main/java/test/Resource.java",
          "new_path": "jax-rs-playground/src/main/java/test/Resource.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "f1dd6e05"
        },
        {
          "diff": "@@ -0,0 +1,50 @@\n+package test;\n+\n+import ua.danit.framework.utils.Reflections;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.QueryParam;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+\n+import static ua.danit.framework.utils.Reflections.getMethods;\n+\n+/**\n+ * Created  19.12.2017.\n+ */\n+public class Start {\n+    public static void main ( String[] args ) {\n+        for (Method method : getMethods(Resource.class)) {\n+            if ( method.isAnnotationPresent(Path.class) ) {\n+                Path path = (Path) Reflections.getAnnotation(method, Path.class);\n+                if ( path != null ) {\n+                    System.out.println(method);\n+                    System.out.println(path);\n+                    System.out.println(path.value());\n+                    Annotation annotation = Reflections.getAnnotation(method, GET.class);\n+                    System.out.println(annotation);\n+                    Annotation[][] res = method.getParameterAnnotations();\n+                    for (Annotation[] re : res) {\n+                        for (Annotation annotation1 : re) {\n+                            if ( annotation1 != null ) {\n+                                QueryParam ress = (QueryParam) annotation1;\n+                                System.out.println(ress.value());\n+                            }\n+                        }\n+                    }\n+                    Class <?>[] qqq = method.getParameterTypes();\n+                    ArrayList wwww = new ArrayList();\n+                    for (Class <?> aClass : qqq) {\n+                        wwww.add(aClass);\n+                    }\n+                    for (Object o : wwww) {\n+                        System.out.println(o);\n+\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n",
          "old_path": "jax-rs-playground/src/main/java/test/Start.java",
          "new_path": "jax-rs-playground/src/main/java/test/Start.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "f1dd6e05"
        },
        {
          "diff": "@@ -1,12 +0,0 @@\n-package ua.danit;\n-\n-/**\n- * Created  14.12.2017.\n- */\n-public class Test {\n-    public static void main ( String[] args ) {\n-        for (int i = 0; i < 10; i++) {\n-            System.out.println(i);\n-        }\n-    }\n-}\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/Test.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/Test.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": true,
          "commit_id": "f1dd6e05"
        },
        {
          "diff": "@@ -4,6 +4,7 @@ import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Response;\n \n public class Resource {\n     private final static String HTML_TEMPLATE = \"<!DOCTYPE html>\\n\" +\n@@ -34,6 +35,14 @@ public class Resource {\n         return sendResponse(\"No ticket available\");\n     }\n \n+    @Path(\"/query\")\n+    @GET\n+    public String getUsers( @QueryParam(\"user\") String name) {\n+\n+        return sendResponse(\"User name is : \"+name);\n+\n+    }\n+\n     private String sendResponse(String response) {\n         return String.format(HTML_TEMPLATE, response);\n     }\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/application/Resource.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/application/Resource.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "f1dd6e05"
        },
        {
          "diff": "@@ -10,10 +10,14 @@ import javax.servlet.http.HttpServletResponse;\n import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n+import javax.ws.rs.QueryParam;\n+\n import java.io.IOException;\n import java.lang.annotation.Annotation;\n import java.lang.reflect.Method;\n+import java.util.ArrayList;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n \n import static ua.danit.framework.utils.Reflections.getMethods;\n@@ -38,21 +42,43 @@ public class DispatcherServlet extends HttpServlet {\n         Path path = (Path) Reflections.getAnnotation(method, Path.class);\n         String uri = path.value();\n         Annotation annotation = Reflections.getAnnotation(method, GET.class);\n-            if(annotation ==null){\n-                annotation = Reflections.getAnnotation(method, POST.class);\n+        if(annotation ==null){\n+            annotation = Reflections.getAnnotation(method, POST.class);\n+        }\n+        if ( annotation !=null ){\n+            List<QueryParam> some = new ArrayList <>();\n+            Annotation[][] res = method.getParameterAnnotations();\n+            for (Annotation[] re : res) {\n+                for (Annotation annotation1 : re) {\n+                    if ( annotation1 != null ) {\n+                        some.add((QueryParam) annotation1);\n+                    }\n+                }\n             }\n-            return annotation == null ? new Invocation(aClass, method, uri)\n-                                        : new Invocation(aClass,method,uri,annotation);\n-\n+            if ( some == null ){\n+                return new Invocation(aClass, method, uri, annotation);\n+            }else{\n+                return new Invocation(aClass, method, uri, annotation,some);\n+            }\n+        }\n+            return new Invocation(aClass, method, uri) ;\n     }\n \n     @Override\n     protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n         String uri = req.getRequestURI();\n         Invocation invoc = resources.get(uri);\n-        if(invoc.getHttpMethod() instanceof GET ) {\n-            String result = invoc.invoke();\n-            resp.getWriter().write(result);\n+        if(invoc.getHttpMethod() instanceof GET) {\n+            if ( req.getQueryString()==null ) {\n+                String result = invoc.invoke();\n+                resp.getWriter().write(result);\n+            }else {\n+                for (QueryParam queryParam : invoc.getQueryParamList()) {\n+                    String name =req.getParameter(queryParam.value());\n+                    String result = invoc.invoke(name);\n+                    resp.getWriter().write(result);\n+                }\n+            }\n         }else{\n             resp.sendError(404);\n         }\n@@ -63,8 +89,16 @@ public class DispatcherServlet extends HttpServlet {\n         String uri = req.getRequestURI();\n         Invocation invoc = resources.get(uri);\n         if(invoc.getHttpMethod() instanceof POST) {\n-            String result = invoc.invoke();\n-            resp.getWriter().write(result);\n+            if ( req.getQueryString()==null ) {\n+                String result = invoc.invoke();\n+                resp.getWriter().write(result);\n+            }else {\n+                for (QueryParam queryParam : invoc.getQueryParamList()) {\n+                    String name =req.getParameter(queryParam.value());\n+                    String result = invoc.invoke(name);\n+                    resp.getWriter().write(result);\n+                }\n+            }\n         }else{\n             resp.sendError(404);\n         }\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "f1dd6e05"
        },
        {
          "diff": "@@ -1,19 +1,19 @@\n package ua.danit.framework.invocations;\n \n+import javax.ws.rs.QueryParam;\n import java.lang.annotation.Annotation;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n+import java.util.List;\n \n public class Invocation {\n-    private String url;\n     private Class<?> clazz;\n     private Method method;\n-\n-    public Annotation getHttpMethod () {\n-        return httpMethod;\n-    }\n+    private String url;\n \n     private Annotation httpMethod;\n+    private String annotationsParametr;\n+    private List<QueryParam> queryParamList;\n \n     public Invocation(Class<?> clazz, Method method, String url) {\n         this.method = method;\n@@ -28,6 +28,36 @@ public class Invocation {\n         this.httpMethod = httpMethod;\n     }\n \n+    public Invocation ( Class <?> clazz, Method method, String url, Annotation httpMethod, String annotationsParametr ) {\n+        this.url = url;\n+        this.clazz = clazz;\n+        this.method = method;\n+        this.httpMethod = httpMethod;\n+        this.annotationsParametr = annotationsParametr;\n+    }\n+\n+    public List <QueryParam> getQueryParamList () {\n+        return queryParamList;\n+    }\n+\n+    public Invocation ( Class <?> clazz, Method method, String url, Annotation httpMethod, List <QueryParam> queryParamList ) {\n+        this.clazz = clazz;\n+        this.method = method;\n+        this.url = url;\n+        this.httpMethod = httpMethod;\n+\n+        this.queryParamList = queryParamList;\n+\n+    }\n+\n+    public String getAnnotationsParametr () {\n+        return annotationsParametr;\n+    }\n+\n+    public Annotation getHttpMethod () {\n+        return httpMethod;\n+    }\n+\n     public String getUrl() {\n         return url;\n     }\n@@ -49,4 +79,18 @@ public class Invocation {\n \n         return \"Error 404\";\n     }\n+\n+    public String invoke(String str){\n+        try {\n+            return (String)method.invoke(clazz.newInstance(), str);\n+        } catch (IllegalAccessException e) {\n+            e.printStackTrace();\n+        } catch (InvocationTargetException e) {\n+            e.printStackTrace();\n+        } catch (InstantiationException e) {\n+            e.printStackTrace();\n+        }\n+\n+        return \"Error 404\";\n+    }\n }\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/framework/invocations/Invocation.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/framework/invocations/Invocation.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "f1dd6e05"
        }
      ]
    },
    {
      "id": "224de317b49e21ac0f43dbd25a480053fa96abf5",
      "project_id": 4888518,
      "message": "add @GET @POST 404 Error\n",
      "title": "add @GET @POST 404 Error",
      "short_id": "224de317",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2017-12-19T10:59:09Z",
      "diffs": [
        {
          "diff": "@@ -3,6 +3,7 @@ package ua.danit.application;\n import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n+import javax.ws.rs.QueryParam;\n \n public class Resource {\n     private final static String HTML_TEMPLATE = \"<!DOCTYPE html>\\n\" +\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/application/Resource.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/application/Resource.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "224de317"
        },
        {
          "diff": "@@ -7,8 +7,11 @@ import javax.servlet.ServletException;\n import javax.servlet.http.HttpServlet;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n import java.io.IOException;\n+import java.lang.annotation.Annotation;\n import java.lang.reflect.Method;\n import java.util.HashMap;\n import java.util.Map;\n@@ -24,33 +27,47 @@ public class DispatcherServlet extends HttpServlet {\n         for (Class<?> aClass : classes) {\n             for (Method method : getMethods(aClass)) {\n                 if (method.isAnnotationPresent(Path.class)) {\n-                    Invocation invoc = getInvocation(method, aClass);\n+                    Invocation invoc = getInvocation(aClass, method);\n                     resources.put(invoc.getUrl(), invoc);\n                 }\n             }\n         }\n     }\n \n-    private Invocation getInvocation(Method method, Class<?> aClass) {\n+    private Invocation getInvocation(Class<?> aClass, Method method) {\n         Path path = (Path) Reflections.getAnnotation(method, Path.class);\n         String uri = path.value();\n-        return new Invocation(method, aClass, uri);\n+        Annotation annotation = Reflections.getAnnotation(method, GET.class);\n+            if(annotation ==null){\n+                annotation = Reflections.getAnnotation(method, POST.class);\n+            }\n+            return annotation == null ? new Invocation(aClass, method, uri)\n+                                        : new Invocation(aClass,method,uri,annotation);\n+\n     }\n \n     @Override\n     protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n         String uri = req.getRequestURI();\n         Invocation invoc = resources.get(uri);\n-        String result = invoc.invoke();\n-        resp.getWriter().write(result);\n+        if(invoc.getHttpMethod() instanceof GET ) {\n+            String result = invoc.invoke();\n+            resp.getWriter().write(result);\n+        }else{\n+            resp.sendError(404);\n+        }\n     }\n \n     @Override\n     protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n         String uri = req.getRequestURI();\n         Invocation invoc = resources.get(uri);\n-        String result = invoc.invoke();\n-        resp.getWriter().write(result);\n+        if(invoc.getHttpMethod() instanceof POST) {\n+            String result = invoc.invoke();\n+            resp.getWriter().write(result);\n+        }else{\n+            resp.sendError(404);\n+        }\n     }\n \n }\n\\ No newline at end of file\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "224de317"
        },
        {
          "diff": "@@ -1,5 +1,6 @@\n package ua.danit.framework.invocations;\n \n+import java.lang.annotation.Annotation;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n \n@@ -7,14 +8,26 @@ public class Invocation {\n     private String url;\n     private Class<?> clazz;\n     private Method method;\n-    private String httpMethod;\n \n-    public Invocation(Method method, Class<?> clazz, String url) {\n+    public Annotation getHttpMethod () {\n+        return httpMethod;\n+    }\n+\n+    private Annotation httpMethod;\n+\n+    public Invocation(Class<?> clazz, Method method, String url) {\n         this.method = method;\n         this.clazz = clazz;\n         this.url = url;\n     }\n \n+    public Invocation ( Class <?> clazz, Method method, String url, Annotation httpMethod ) {\n+        this.url = url;\n+        this.clazz = clazz;\n+        this.method = method;\n+        this.httpMethod = httpMethod;\n+    }\n+\n     public String getUrl() {\n         return url;\n     }\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/framework/invocations/Invocation.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/framework/invocations/Invocation.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "224de317"
        }
      ]
    },
    {
      "id": "ede3e4f56bfbf32903d4dcdb8cc7bfb5727d3c88",
      "project_id": 4888518,
      "message": "Merge branch 'podolsky-app-builder' into 'master'\n\nPodolsky divide two packages application and framework\n\nSee merge request korsa719/jax-rs!6",
      "title": "Merge branch 'podolsky-app-builder' into 'master'",
      "short_id": "ede3e4f5",
      "author_name": "Kostyantyn Matlayev",
      "branches": null,
      "created_at": "2017-12-18T22:31:55Z",
      "diffs": [
        {
          "diff": "@@ -1,6 +1,20 @@\n-<b>Current target:</b>\n+## Web application\n \n-Здесь скоро будет Ваше наказание\n+### Goal\n+Create rest application that shows airport's shedule flights.\n \n+### Tools\n+* [Apache Maven](https://maven.apache.org/) is a software project management and comprehension tool.\n+* [Eclipse Jetty](https://www.eclipse.org/jetty) provides a Web server and javax.servlet container, plus support for HTTP/2, WebSocket, OSGi, JMX, JNDI, JAAS and many other integrations.\n+* [JUnit ](http://junit.org/junit4) is a simple framework to write repeatable tests. It is an instance of the xUnit architecture for unit testing frameworks. \n \n+### Installiation and Execution\n+To start rest application open your *Terminal* and type `bash start.sh` in it.\n \n+``$ cd {working directory}``   \n+``$ bash start.sh``\n+\n+Open your browser and type `localhost:8080` in address field, if you see \" Welcome to British airport \" that means your application is working.\n+\n+### Rules for contributors\n+The big request to participants not to write in the file README.md any crap and dregs, add only useful text.\n\\ No newline at end of file\n",
          "old_path": "README.md",
          "new_path": "README.md",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "ede3e4f5"
        },
        {
          "diff": "@@ -1,12 +1,16 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n   <modelVersion>4.0.0</modelVersion>\n   <groupId>ua.danit</groupId>\n   <artifactId>jax-rs-playground</artifactId>\n   <name>jax-rs-playground</name>\n   <version>1.0-SNAPSHOT</version>\n   <url>http://maven.apache.org</url>\n+\n   <build>\n+\n     <plugins>\n       <plugin>\n         <artifactId>maven-compiler-plugin</artifactId>\n@@ -16,18 +20,20 @@\n           <target>1.8</target>\n         </configuration>\n       </plugin>\n+\n       <plugin>\n         <artifactId>maven-jar-plugin</artifactId>\n         <version>3.0.2</version>\n         <configuration>\n           <archive>\n             <manifest>\n-              <mainClass>ua.danit.App</mainClass>\n+              <mainClass>ua.danit.application.WebApp</mainClass>\n               <addClasspath>true</addClasspath>\n             </manifest>\n           </archive>\n         </configuration>\n       </plugin>\n+\n       <plugin>\n         <artifactId>maven-shade-plugin</artifactId>\n         <executions>\n@@ -44,6 +50,7 @@\n       </plugin>\n     </plugins>\n   </build>\n+\n   <dependencies>\n     <dependency>\n       <groupId>junit</groupId>\n@@ -52,9 +59,10 @@\n       <scope>test</scope>\n     </dependency>\n   </dependencies>\n+\n   <properties>\n     <jetty.version>9.4.6.v20170531</jetty.version>\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n   </properties>\n-</project>\n \n+</project>\n\\ No newline at end of file\n",
          "old_path": "jax-rs-playground/dependency-reduced-pom.xml",
          "new_path": "jax-rs-playground/dependency-reduced-pom.xml",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "ede3e4f5"
        },
        {
          "diff": "@@ -35,12 +35,14 @@\n             <artifactId>jetty-server</artifactId>\n             <version>${jetty.version}</version>\n         </dependency>\n+\n         <dependency>\n             <groupId>junit</groupId>\n             <artifactId>junit</artifactId>\n             <version>3.8.1</version>\n             <scope>test</scope>\n         </dependency>\n+\n         <dependency>\n             <groupId>javax.servlet</groupId>\n             <artifactId>javax.servlet-api</artifactId>\n@@ -65,7 +67,7 @@\n                 <configuration>\n                     <archive>\n                         <manifest>\n-                            <mainClass>ua.danit.App</mainClass>\n+                            <mainClass>ua.danit.application.WebApp</mainClass>\n                         </manifest>\n                     </archive>\n                     <descriptorRefs>\n",
          "old_path": "jax-rs-playground/pom.xml",
          "new_path": "jax-rs-playground/pom.xml",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "ede3e4f5"
        },
        {
          "diff": "@@ -1,25 +0,0 @@\n-package ua.danit;\n-\n-import javax.ws.rs.GET;\n-import javax.ws.rs.Path;\n-\n-\n-public class MyController {\n-\n-    @Path(\"/my/custom/url\")\n-    @GET\n-    public String getWeather() {\n-        return \"The weather is cool\";\n-    }\n-\n-    @Path(\"/flights\")\n-    @GET\n-    public String getFlights() {\n-        return \"Please don't fly today\";\n-    }\n-\n-    @Path(\"/tickets\")\n-    public String getTickets() {\n-        return \"No ticket available.\";\n-    }\n-}\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/MyController.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/MyController.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": true,
          "commit_id": "ede3e4f5"
        },
        {
          "diff": "@@ -0,0 +1,39 @@\n+package ua.danit.application;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+\n+public class Resource {\n+    private final static String HTML_TEMPLATE = \"<!DOCTYPE html>\\n\" +\n+            \"<html>\\n<head><title>British Airlines</title></head>\" +\n+            \"<body><h1 style=\\\" text-align: center; \\\">%s</h1></body></html>\";\n+\n+    @Path(\"/\")\n+    @GET\n+    public String welcome() {\n+        return sendResponse(\"Welcome to British Airlines\");\n+    }\n+\n+    @Path(\"/weather\")\n+    @GET\n+    public String getWeather() {\n+        return sendResponse(\"Today weather is cool isn't\");\n+    }\n+\n+    @Path(\"/flights\")\n+    @GET\n+    public String getFlights() {\n+        return sendResponse(\"Today all routes closed\");\n+    }\n+\n+    @Path(\"/tickets\")\n+    @POST\n+    public String getTickets() {\n+        return sendResponse(\"No ticket available\");\n+    }\n+\n+    private String sendResponse(String response) {\n+        return String.format(HTML_TEMPLATE, response);\n+    }\n+}\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/application/Resource.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/application/Resource.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "ede3e4f5"
        },
        {
          "diff": "@@ -1,25 +1,17 @@\n-package ua.danit;\n+package ua.danit.application;\n+\n+import ua.danit.framework.DispatcherServlet;\n \n import org.eclipse.jetty.server.Server;\n import org.eclipse.jetty.servlet.ServletContextHandler;\n import org.eclipse.jetty.servlet.ServletHolder;\n-import utils.Reflections;\n \n-import javax.servlet.ServletException;\n-import javax.servlet.http.HttpServlet;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.ws.rs.Path;\n-import java.io.IOException;\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n+public class WebApp {\n+    public static void main (String[] args) throws Exception {\n \n-public class App {\n-    public static void main ( String[] args ) throws Exception {\n         Server server = new Server(8080);\n-\n         ServletContextHandler handler = new ServletContextHandler();\n-        handler.addServlet(new ServletHolder(new DispatcherServlet(MyController.class)), \"/*\");\n+        handler.addServlet(new ServletHolder(new DispatcherServlet(Resource.class)), \"/*\");\n         server.setHandler(handler);\n         server.start();\n         server.join();\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/App.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/application/WebApp.java",
          "new_file": false,
          "renamed_file": true,
          "deleted_file": false,
          "commit_id": "ede3e4f5"
        },
        {
          "diff": "@@ -1,8 +1,7 @@\n-package ua.danit;\n+package ua.danit.framework;\n \n-import com.sun.org.apache.bcel.internal.generic.Type;\n-import ua.danit.signature.Signature;\n-import utils.Reflections;\n+import ua.danit.framework.invocations.Invocation;\n+import ua.danit.framework.utils.Reflections;\n \n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServlet;\n@@ -10,51 +9,47 @@ import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import javax.ws.rs.Path;\n import java.io.IOException;\n-import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n-import java.util.ArrayList;\n import java.util.HashMap;\n-import java.util.List;\n import java.util.Map;\n \n-import static utils.Reflections.getMethods;\n+import static ua.danit.framework.utils.Reflections.getMethods;\n \n public class DispatcherServlet extends HttpServlet {\n \n-    Map<String, Signature> resources = new HashMap<>();\n+    Map<String, Invocation> resources = new HashMap<>();\n \n     public DispatcherServlet(Class<?>... classes) {\n \n         for (Class<?> aClass : classes) {\n-\n             for (Method method : getMethods(aClass)) {\n                 if (method.isAnnotationPresent(Path.class)) {\n-                    Signature signature = getSignature(method, aClass);\n-                    resources.put(signature.getUrl(), signature);\n+                    Invocation invoc = getInvocation(method, aClass);\n+                    resources.put(invoc.getUrl(), invoc);\n                 }\n             }\n         }\n     }\n \n-    private Signature getSignature(Method method, Class<?> aClass) {\n+    private Invocation getInvocation(Method method, Class<?> aClass) {\n         Path path = (Path) Reflections.getAnnotation(method, Path.class);\n         String uri = path.value();\n-        return new Signature(method, uri, aClass);\n+        return new Invocation(method, aClass, uri);\n     }\n \n-\n     @Override\n     protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n         String uri = req.getRequestURI();\n-        Signature signature = resources.get(uri);\n-        String result = signature.invoke();\n+        Invocation invoc = resources.get(uri);\n+        String result = invoc.invoke();\n         resp.getWriter().write(result);\n     }\n+\n     @Override\n     protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n         String uri = req.getRequestURI();\n-        Signature signature = resources.get(uri);\n-        String result = signature.invoke();\n+        Invocation invoc = resources.get(uri);\n+        String result = invoc.invoke();\n         resp.getWriter().write(result);\n     }\n \n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/DispatcherServlet.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_file": false,
          "renamed_file": true,
          "deleted_file": false,
          "commit_id": "ede3e4f5"
        },
        {
          "diff": "@@ -1,18 +1,18 @@\n-package ua.danit.signature;\n+package ua.danit.framework.invocations;\n \n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n \n-public class Signature {\n-\n-    String url;\n+public class Invocation {\n+    private String url;\n     private Class<?> clazz;\n     private Method method;\n+    private String httpMethod;\n \n-    public Signature(Method method, String url, Class<?> aClass) {\n+    public Invocation(Method method, Class<?> clazz, String url) {\n         this.method = method;\n+        this.clazz = clazz;\n         this.url = url;\n-        clazz = aClass;\n     }\n \n     public String getUrl() {\n@@ -34,6 +34,6 @@ public class Signature {\n             e.printStackTrace();\n         }\n \n-        return \"\";\n+        return \"Error 404\";\n     }\n }\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/signature/Signature.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/framework/invocations/Invocation.java",
          "new_file": false,
          "renamed_file": true,
          "deleted_file": false,
          "commit_id": "ede3e4f5"
        },
        {
          "diff": "@@ -1,28 +1,23 @@\n-package utils;\n+package ua.danit.framework.utils;\n \n import java.lang.annotation.Annotation;\n import java.lang.reflect.Method;\n import java.util.Arrays;\n import java.util.List;\n \n-\n-/**\n- * Created  15.12.2017.\n- */\n public class Reflections {\n \n-    public static List <Method> getMethods ( Class clazz ) {\n-        if ( clazz == null ) {\n+    public static List<Method> getMethods(Class clazz) {\n+        if (clazz == null) {\n             return null;\n         }\n         return Arrays.asList(clazz.getMethods());\n     }\n \n-\n-    public static Annotation getAnnotation ( Method method ,Class annotationClass) {\n-        if ( method == null  ) {\n+    public static Annotation getAnnotation (Method method, Class anno) {\n+        if (method == null) {\n             return null;\n         }\n-        return method.getAnnotation(annotationClass);\n+        return method.getAnnotation(anno);\n     }\n }\n",
          "old_path": "jax-rs-playground/src/main/java/utils/Reflections.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/framework/utils/Reflections.java",
          "new_file": false,
          "renamed_file": true,
          "deleted_file": false,
          "commit_id": "ede3e4f5"
        },
        {
          "diff": "@@ -2,4 +2,4 @@\n \n mvn clean package \n cd target/ \n-java -jar *dencies.jar\n+java -jar jax-rs-playground-1.0-SNAPSHOT-jar-with-dependencies.jar\n",
          "old_path": "jax-rs-playground/start.sh",
          "new_path": "jax-rs-playground/start.sh",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "ede3e4f5"
        }
      ]
    },
    {
      "id": "9ba22e30aaabe660eac690e4799ac2e8d41be872",
      "project_id": 4888518,
      "message": "Update README.md",
      "title": "Update README.md",
      "short_id": "9ba22e30",
      "author_name": "Yuri Podolsky",
      "branches": null,
      "created_at": "2017-12-18T15:08:43Z",
      "diffs": [
        {
          "diff": "@@ -9,12 +9,12 @@ Create rest application that shows airport's shedule flights.\n * [JUnit ](http://junit.org/junit4) is a simple framework to write repeatable tests. It is an instance of the xUnit architecture for unit testing frameworks. \n \n ### Installiation and Execution\n-To start rest application open your *Terminal* and type `start` in it.\n+To start rest application open your *Terminal* and type `bash start.sh` in it.\n \n ``$ cd {working directory}``   \n-``$ start``\n+``$ bash start.sh``\n \n-Open your browser and type `localhost:8080` in address field if you will see \\\" Welcome to British airport \\\" that means your application is working.\n+Open your browser and type `localhost:8080` in address field, if you see \" Welcome to British airport \" that means your application is working.\n \n ### Rules for contributors\n The big request to participants not to write in the file README.md any crap and dregs, add only useful text.\n\\ No newline at end of file\n",
          "old_path": "README.md",
          "new_path": "README.md",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "9ba22e30"
        }
      ]
    },
    {
      "id": "4654297facbc2c9a1018f89013a94aeebbb70abb",
      "project_id": 4888518,
      "message": "fixed some bugs\n",
      "title": "fixed some bugs",
      "short_id": "4654297f",
      "author_name": "Yuri Podolsky",
      "branches": null,
      "created_at": "2017-12-18T15:01:40Z",
      "diffs": [
        {
          "diff": "@@ -27,7 +27,7 @@\n         <configuration>\n           <archive>\n             <manifest>\n-              <mainClass>ua.danit.App</mainClass>\n+              <mainClass>ua.danit.application.WebApp</mainClass>\n               <addClasspath>true</addClasspath>\n             </manifest>\n           </archive>\n",
          "old_path": "jax-rs-playground/dependency-reduced-pom.xml",
          "new_path": "jax-rs-playground/dependency-reduced-pom.xml",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "4654297f"
        },
        {
          "diff": "@@ -67,7 +67,7 @@\n                 <configuration>\n                     <archive>\n                         <manifest>\n-                            <mainClass>ua.danit.App</mainClass>\n+                            <mainClass>ua.danit.application.WebApp</mainClass>\n                         </manifest>\n                     </archive>\n                     <descriptorRefs>\n",
          "old_path": "jax-rs-playground/pom.xml",
          "new_path": "jax-rs-playground/pom.xml",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "4654297f"
        },
        {
          "diff": "@@ -1,31 +1,39 @@\n-package ua.danit;\n+package ua.danit.application;\n \n import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n \n public class Resource {\n+    private final static String HTML_TEMPLATE = \"<!DOCTYPE html>\\n\" +\n+            \"<html>\\n<head><title>British Airlines</title></head>\" +\n+            \"<body><h1 style=\\\" text-align: center; \\\">%s</h1></body></html>\";\n \n     @Path(\"/\")\n     @GET\n-    public String getIndex() {\n-        return \"Welcome to British airport\";\n+    public String welcome() {\n+        return sendResponse(\"Welcome to British Airlines\");\n     }\n \n     @Path(\"/weather\")\n     @GET\n     public String getWeather() {\n-        return \"The weather is cool\";\n+        return sendResponse(\"Today weather is cool isn't\");\n     }\n \n     @Path(\"/flights\")\n     @GET\n     public String getFlights() {\n-        return \"Please don't fly today\";\n+        return sendResponse(\"Today all routes closed\");\n     }\n \n     @Path(\"/tickets\")\n     @POST\n     public String getTickets() {\n-        return \"No ticket available.\";\n+        return sendResponse(\"No ticket available\");\n+    }\n+\n+    private String sendResponse(String response) {\n+        return String.format(HTML_TEMPLATE, response);\n     }\n }\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/rest-application/Resource.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/application/Resource.java",
          "new_file": false,
          "renamed_file": true,
          "deleted_file": false,
          "commit_id": "4654297f"
        },
        {
          "diff": "@@ -1,18 +1,10 @@\n-package ua.danit;\n+package ua.danit.application;\n+\n+import ua.danit.framework.DispatcherServlet;\n \n import org.eclipse.jetty.server.Server;\n import org.eclipse.jetty.servlet.ServletContextHandler;\n import org.eclipse.jetty.servlet.ServletHolder;\n-import utils.Reflections;\n-\n-import javax.servlet.ServletException;\n-import javax.servlet.http.HttpServlet;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.ws.rs.Path;\n-import java.io.IOException;\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n \n public class WebApp {\n     public static void main (String[] args) throws Exception {\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/rest-application/WebApp.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/application/WebApp.java",
          "new_file": false,
          "renamed_file": true,
          "deleted_file": false,
          "commit_id": "4654297f"
        },
        {
          "diff": "@@ -1,8 +1,7 @@\n-package ua.danit;\n+package ua.danit.framework;\n \n-import com.sun.org.apache.bcel.internal.generic.Type;\n-import ua.danit.signature.Signature;\n-import utils.Reflections;\n+import ua.danit.framework.invocations.Invocation;\n+import ua.danit.framework.utils.Reflections;\n \n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServlet;\n@@ -10,51 +9,47 @@ import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import javax.ws.rs.Path;\n import java.io.IOException;\n-import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n-import java.util.ArrayList;\n import java.util.HashMap;\n-import java.util.List;\n import java.util.Map;\n \n-import static utils.Reflections.getMethods;\n+import static ua.danit.framework.utils.Reflections.getMethods;\n \n public class DispatcherServlet extends HttpServlet {\n \n-    Map<String, Signature> resources = new HashMap<>();\n+    Map<String, Invocation> resources = new HashMap<>();\n \n     public DispatcherServlet(Class<?>... classes) {\n \n         for (Class<?> aClass : classes) {\n-\n             for (Method method : getMethods(aClass)) {\n                 if (method.isAnnotationPresent(Path.class)) {\n-                    Signature signature = getSignature(method, aClass);\n-                    resources.put(signature.getUrl(), signature);\n+                    Invocation invoc = getInvocation(method, aClass);\n+                    resources.put(invoc.getUrl(), invoc);\n                 }\n             }\n         }\n     }\n \n-    private Signature getSignature(Method method, Class<?> aClass) {\n+    private Invocation getInvocation(Method method, Class<?> aClass) {\n         Path path = (Path) Reflections.getAnnotation(method, Path.class);\n         String uri = path.value();\n-        return new Signature(method, uri, aClass);\n+        return new Invocation(method, aClass, uri);\n     }\n \n-\n     @Override\n     protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n         String uri = req.getRequestURI();\n-        Signature signature = resources.get(uri);\n-        String result = signature.invoke();\n+        Invocation invoc = resources.get(uri);\n+        String result = invoc.invoke();\n         resp.getWriter().write(result);\n     }\n+\n     @Override\n     protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n         String uri = req.getRequestURI();\n-        Signature signature = resources.get(uri);\n-        String result = signature.invoke();\n+        Invocation invoc = resources.get(uri);\n+        String result = invoc.invoke();\n         resp.getWriter().write(result);\n     }\n \n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/rest-framework/DispatcherServlet.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/framework/DispatcherServlet.java",
          "new_file": false,
          "renamed_file": true,
          "deleted_file": false,
          "commit_id": "4654297f"
        },
        {
          "diff": "@@ -1,4 +1,4 @@\n-package ua.danit.invocations;\n+package ua.danit.framework.invocations;\n \n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n@@ -9,10 +9,10 @@ public class Invocation {\n     private Method method;\n     private String httpMethod;\n \n-    public Invocation(String url, Class<?> clazz, Method method) {\n-        this.url = url;\n-        this.clazz = clazz;\n+    public Invocation(Method method, Class<?> clazz, String url) {\n         this.method = method;\n+        this.clazz = clazz;\n+        this.url = url;\n     }\n \n     public String getUrl() {\n@@ -34,6 +34,6 @@ public class Invocation {\n             e.printStackTrace();\n         }\n \n-        return \"\";\n+        return \"Error 404\";\n     }\n }\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/rest-framework/invocations/Invocation.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/framework/invocations/Invocation.java",
          "new_file": false,
          "renamed_file": true,
          "deleted_file": false,
          "commit_id": "4654297f"
        },
        {
          "diff": "@@ -1,4 +1,4 @@\n-package utils;\n+package ua.danit.framework.utils;\n \n import java.lang.annotation.Annotation;\n import java.lang.reflect.Method;\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/rest-framework/utils/Reflections.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/framework/utils/Reflections.java",
          "new_file": false,
          "renamed_file": true,
          "deleted_file": false,
          "commit_id": "4654297f"
        },
        {
          "diff": "@@ -2,4 +2,4 @@\n \n mvn clean package \n cd target/ \n-java -jar *dencies.jar\n+java -jar jax-rs-playground-1.0-SNAPSHOT-jar-with-dependencies.jar\n",
          "old_path": "jax-rs-playground/start.sh",
          "new_path": "jax-rs-playground/start.sh",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "4654297f"
        }
      ]
    },
    {
      "id": "6d83a969d4e2e9b4bb8a505155fda398f59c3e5d",
      "project_id": 4888518,
      "message": "divide on two modules app & api\n",
      "title": "divide on two modules app & api",
      "short_id": "6d83a969",
      "author_name": "Yuri Podolsky",
      "branches": null,
      "created_at": "2017-12-18T13:04:08Z",
      "diffs": [
        {
          "diff": "@@ -1,12 +1,16 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n   <modelVersion>4.0.0</modelVersion>\n   <groupId>ua.danit</groupId>\n   <artifactId>jax-rs-playground</artifactId>\n   <name>jax-rs-playground</name>\n   <version>1.0-SNAPSHOT</version>\n   <url>http://maven.apache.org</url>\n+\n   <build>\n+\n     <plugins>\n       <plugin>\n         <artifactId>maven-compiler-plugin</artifactId>\n@@ -16,6 +20,7 @@\n           <target>1.8</target>\n         </configuration>\n       </plugin>\n+\n       <plugin>\n         <artifactId>maven-jar-plugin</artifactId>\n         <version>3.0.2</version>\n@@ -28,6 +33,7 @@\n           </archive>\n         </configuration>\n       </plugin>\n+\n       <plugin>\n         <artifactId>maven-shade-plugin</artifactId>\n         <executions>\n@@ -44,6 +50,7 @@\n       </plugin>\n     </plugins>\n   </build>\n+\n   <dependencies>\n     <dependency>\n       <groupId>junit</groupId>\n@@ -52,9 +59,10 @@\n       <scope>test</scope>\n     </dependency>\n   </dependencies>\n+\n   <properties>\n     <jetty.version>9.4.6.v20170531</jetty.version>\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n   </properties>\n-</project>\n \n+</project>\n\\ No newline at end of file\n",
          "old_path": "jax-rs-playground/dependency-reduced-pom.xml",
          "new_path": "jax-rs-playground/dependency-reduced-pom.xml",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "6d83a969"
        },
        {
          "diff": "@@ -35,12 +35,14 @@\n             <artifactId>jetty-server</artifactId>\n             <version>${jetty.version}</version>\n         </dependency>\n+\n         <dependency>\n             <groupId>junit</groupId>\n             <artifactId>junit</artifactId>\n             <version>3.8.1</version>\n             <scope>test</scope>\n         </dependency>\n+\n         <dependency>\n             <groupId>javax.servlet</groupId>\n             <artifactId>javax.servlet-api</artifactId>\n",
          "old_path": "jax-rs-playground/pom.xml",
          "new_path": "jax-rs-playground/pom.xml",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "6d83a969"
        },
        {
          "diff": "@@ -3,10 +3,15 @@ package ua.danit;\n import javax.ws.rs.GET;\n import javax.ws.rs.Path;\n \n+public class Resource {\n \n-public class MyController {\n+    @Path(\"/\")\n+    @GET\n+    public String getIndex() {\n+        return \"Welcome to British airport\";\n+    }\n \n-    @Path(\"/my/custom/url\")\n+    @Path(\"/weather\")\n     @GET\n     public String getWeather() {\n         return \"The weather is cool\";\n@@ -19,6 +24,7 @@ public class MyController {\n     }\n \n     @Path(\"/tickets\")\n+    @POST\n     public String getTickets() {\n         return \"No ticket available.\";\n     }\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/MyController.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/rest-application/Resource.java",
          "new_file": false,
          "renamed_file": true,
          "deleted_file": false,
          "commit_id": "6d83a969"
        },
        {
          "diff": "@@ -14,12 +14,12 @@ import java.io.IOException;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n \n-public class App {\n-    public static void main ( String[] args ) throws Exception {\n-        Server server = new Server(8080);\n+public class WebApp {\n+    public static void main (String[] args) throws Exception {\n \n+        Server server = new Server(8080);\n         ServletContextHandler handler = new ServletContextHandler();\n-        handler.addServlet(new ServletHolder(new DispatcherServlet(MyController.class)), \"/*\");\n+        handler.addServlet(new ServletHolder(new DispatcherServlet(Resource.class)), \"/*\");\n         server.setHandler(handler);\n         server.start();\n         server.join();\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/App.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/rest-application/WebApp.java",
          "new_file": false,
          "renamed_file": true,
          "deleted_file": false,
          "commit_id": "6d83a969"
        },
        {
          "diff": "",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/DispatcherServlet.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/rest-framework/DispatcherServlet.java",
          "new_file": false,
          "renamed_file": true,
          "deleted_file": false,
          "commit_id": "6d83a969"
        },
        {
          "diff": "@@ -1,18 +1,18 @@\n-package ua.danit.signature;\n+package ua.danit.invocations;\n \n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n \n-public class Signature {\n-\n-    String url;\n+public class Invocation {\n+    private String url;\n     private Class<?> clazz;\n     private Method method;\n+    private String httpMethod;\n \n-    public Signature(Method method, String url, Class<?> aClass) {\n-        this.method = method;\n+    public Invocation(String url, Class<?> clazz, Method method) {\n         this.url = url;\n-        clazz = aClass;\n+        this.clazz = clazz;\n+        this.method = method;\n     }\n \n     public String getUrl() {\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/signature/Signature.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/rest-framework/invocations/Invocation.java",
          "new_file": false,
          "renamed_file": true,
          "deleted_file": false,
          "commit_id": "6d83a969"
        },
        {
          "diff": "@@ -5,24 +5,19 @@ import java.lang.reflect.Method;\n import java.util.Arrays;\n import java.util.List;\n \n-\n-/**\n- * Created  15.12.2017.\n- */\n public class Reflections {\n \n-    public static List <Method> getMethods ( Class clazz ) {\n-        if ( clazz == null ) {\n+    public static List<Method> getMethods(Class clazz) {\n+        if (clazz == null) {\n             return null;\n         }\n         return Arrays.asList(clazz.getMethods());\n     }\n \n-\n-    public static Annotation getAnnotation ( Method method ,Class annotationClass) {\n-        if ( method == null  ) {\n+    public static Annotation getAnnotation (Method method, Class anno) {\n+        if (method == null) {\n             return null;\n         }\n-        return method.getAnnotation(annotationClass);\n+        return method.getAnnotation(anno);\n     }\n }\n",
          "old_path": "jax-rs-playground/src/main/java/utils/Reflections.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/rest-framework/utils/Reflections.java",
          "new_file": false,
          "renamed_file": true,
          "deleted_file": false,
          "commit_id": "6d83a969"
        }
      ]
    },
    {
      "id": "fdfe9f8e512b250323b341c2d4e3fabea83252e7",
      "project_id": 4888518,
      "message": "changed README.md add project description\n",
      "title": "changed README.md add project description",
      "short_id": "fdfe9f8e",
      "author_name": "Yuri Podolsky",
      "branches": null,
      "created_at": "2017-12-18T13:02:09Z",
      "diffs": [
        {
          "diff": "@@ -1,6 +1,20 @@\n-<b>Current target:</b>\n+## Web application\n \n-Здесь скоро будет Ваше наказание\n+### Goal\n+Create rest application that shows airport's shedule flights.\n \n+### Tools\n+* [Apache Maven](https://maven.apache.org/) is a software project management and comprehension tool.\n+* [Eclipse Jetty](https://www.eclipse.org/jetty) provides a Web server and javax.servlet container, plus support for HTTP/2, WebSocket, OSGi, JMX, JNDI, JAAS and many other integrations.\n+* [JUnit ](http://junit.org/junit4) is a simple framework to write repeatable tests. It is an instance of the xUnit architecture for unit testing frameworks. \n \n+### Installiation and Execution\n+To start rest application open your *Terminal* and type `start` in it.\n \n+``$ cd {working directory}``   \n+``$ start``\n+\n+Open your browser and type `localhost:8080` in address field if you will see \\\" Welcome to British airport \\\" that means your application is working.\n+\n+### Rules for contributors\n+The big request to participants not to write in the file README.md any crap and dregs, add only useful text.\n\\ No newline at end of file\n",
          "old_path": "README.md",
          "new_path": "README.md",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "fdfe9f8e"
        }
      ]
    },
    {
      "id": "2db9712fae0b43ad3bf4a0ea3135a1a08240182b",
      "project_id": 4888518,
      "message": "Update README.md",
      "title": "Update README.md",
      "short_id": "2db9712f",
      "author_name": "Kostyantyn Matlayev",
      "branches": null,
      "created_at": "2017-12-16T11:12:09Z",
      "diffs": [
        {
          "diff": "@@ -1,6 +1,6 @@\n <b>Current target:</b>\n \n-Create a service that will accept all Resources(annotated with @Path), parse all methods and put it in internal map\n+Здесь скоро будет Ваше наказание\n \n \n \n",
          "old_path": "README.md",
          "new_path": "README.md",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "2db9712f"
        }
      ]
    },
    {
      "id": "42e3323c81924ef026e89779217e365b99ae49bd",
      "project_id": 4888518,
      "message": "Merge branch 'master' of https://gitlab.com/korsa719/jax-rs\n",
      "title": "Merge branch 'master' of https://gitlab.com/korsa719/jax-rs",
      "short_id": "42e3323c",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2017-12-16T11:10:14Z",
      "diffs": []
    },
    {
      "id": "25ad9f47bd110c59b6f4df7ad73a18dbe3998f2f",
      "project_id": 4888518,
      "message": "Update README.md",
      "title": "Update README.md",
      "short_id": "25ad9f47",
      "author_name": "Kostyantyn Matlayev",
      "branches": null,
      "created_at": "2017-12-16T10:46:53Z",
      "diffs": [
        {
          "diff": "@@ -1,4 +1,3 @@\n-\n <b>Current target:</b>\n \n Create a service that will accept all Resources(annotated with @Path), parse all methods and put it in internal map\n",
          "old_path": "README.md",
          "new_path": "README.md",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "25ad9f47"
        }
      ]
    },
    {
      "id": "9f10bef233998c7204e5f52e741ea74e015930b5",
      "project_id": 4888518,
      "message": "add doPost methods\n",
      "title": "add doPost methods",
      "short_id": "9f10bef2",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2017-12-16T10:44:44Z",
      "diffs": [
        {
          "diff": "@@ -50,5 +50,12 @@ public class DispatcherServlet extends HttpServlet {\n         String result = signature.invoke();\n         resp.getWriter().write(result);\n     }\n+    @Override\n+    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+        String uri = req.getRequestURI();\n+        Signature signature = resources.get(uri);\n+        String result = signature.invoke();\n+        resp.getWriter().write(result);\n+    }\n \n }\n\\ No newline at end of file\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/DispatcherServlet.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/DispatcherServlet.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "9f10bef2"
        },
        {
          "diff": "@@ -1,5 +1,5 @@\n #!/bin/bash\n \n-mvn clean package &\n-cd target/ &\n-java -jar target/jax-rs-playground-1.0-SNAPSHOT-jar-with-dependencies.jar\n\\ No newline at end of file\n+mvn clean package \n+cd target/ \n+java -jar *dencies.jar\n",
          "old_path": "jax-rs-playground/start.sh",
          "new_path": "jax-rs-playground/start.sh",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "9f10bef2"
        }
      ]
    },
    {
      "id": "e8aa1281a043e1966a622a28e48217c393129efd",
      "project_id": 4888518,
      "message": "refactor start.sh\n",
      "title": "refactor start.sh",
      "short_id": "e8aa1281",
      "author_name": "Gryhoriev Mykhailo",
      "branches": null,
      "created_at": "2017-12-16T10:02:48Z",
      "diffs": [
        {
          "diff": "@@ -2,4 +2,4 @@\n \n mvn clean package &\n cd target/ &\n-java -jar *with-dependencies.jar\n+java -jar target/jax-rs-playground-1.0-SNAPSHOT-jar-with-dependencies.jar\n\\ No newline at end of file\n",
          "old_path": "jax-rs-playground/start.sh",
          "new_path": "jax-rs-playground/start.sh",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "e8aa1281"
        }
      ]
    },
    {
      "id": "fe174261a68597006bc689255fdba7a6a7199db3",
      "project_id": 4888518,
      "message": "Update README.md",
      "title": "Update README.md",
      "short_id": "fe174261",
      "author_name": "Kostyantyn Matlayev",
      "branches": null,
      "created_at": "2017-12-16T09:10:52Z",
      "diffs": [
        {
          "diff": "@@ -1,4 +1,3 @@\n-\n <b>Current target:</b>\n \n Create a service that will accept all Resources(annotated with @Path), parse all methods and put it in internal map\n",
          "old_path": "README.md",
          "new_path": "README.md",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "fe174261"
        }
      ]
    },
    {
      "id": "e64435fec2a4d0b3cefa7d225d52c96af92f413a",
      "project_id": 4888518,
      "message": "+signature\n",
      "title": "+signature",
      "short_id": "e64435fe",
      "author_name": "Volodymyr Derkach",
      "branches": null,
      "created_at": "2017-12-16T09:07:15Z",
      "diffs": [
        {
          "diff": "@@ -19,7 +19,7 @@ public class App {\n         Server server = new Server(8080);\n \n         ServletContextHandler handler = new ServletContextHandler();\n-        handler.addServlet(new ServletHolder(new DispatcherServlet()), \"/*\");\n+        handler.addServlet(new ServletHolder(new DispatcherServlet(MyController.class)), \"/*\");\n         server.setHandler(handler);\n         server.start();\n         server.join();\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/App.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/App.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "e64435fe"
        },
        {
          "diff": "@@ -1,5 +1,7 @@\n package ua.danit;\n \n+import com.sun.org.apache.bcel.internal.generic.Type;\n+import ua.danit.signature.Signature;\n import utils.Reflections;\n \n import javax.servlet.ServletException;\n@@ -10,40 +12,43 @@ import javax.ws.rs.Path;\n import java.io.IOException;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n-public class DispatcherServlet extends HttpServlet {\n-\n-    @Override\n-    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n-\n-        for (Method method : Reflections.getMethods(MyController.class)) {\n-            handleMethod(req, resp, method);\n-        }\n-    }\n+import static utils.Reflections.getMethods;\n \n-    private void handleMethod(HttpServletRequest req, HttpServletResponse resp, Method method) throws IOException {\n-        if (method.isAnnotationPresent(Path.class)) {\n+public class DispatcherServlet extends HttpServlet {\n \n-            Path path = (Path) Reflections.getAnnotation(method, Path.class);\n+    Map<String, Signature> resources = new HashMap<>();\n \n-            if (req.getRequestURI().equals(path.value())) {\n+    public DispatcherServlet(Class<?>... classes) {\n \n-                String result = invoke(method);\n-                resp.getWriter().write(result);\n+        for (Class<?> aClass : classes) {\n \n+            for (Method method : getMethods(aClass)) {\n+                if (method.isAnnotationPresent(Path.class)) {\n+                    Signature signature = getSignature(method, aClass);\n+                    resources.put(signature.getUrl(), signature);\n+                }\n             }\n         }\n     }\n \n-    private String invoke(Method method) {\n-        try {\n-            return (String) method.invoke(new MyController(), null);\n-        } catch (IllegalAccessException e) {\n-            e.printStackTrace();\n-        } catch (InvocationTargetException e) {\n-            e.printStackTrace();\n-        }\n-        return \"\";\n+    private Signature getSignature(Method method, Class<?> aClass) {\n+        Path path = (Path) Reflections.getAnnotation(method, Path.class);\n+        String uri = path.value();\n+        return new Signature(method, uri, aClass);\n+    }\n+\n+\n+    @Override\n+    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+        String uri = req.getRequestURI();\n+        Signature signature = resources.get(uri);\n+        String result = signature.invoke();\n+        resp.getWriter().write(result);\n     }\n \n }\n\\ No newline at end of file\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/DispatcherServlet.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/DispatcherServlet.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "e64435fe"
        },
        {
          "diff": "@@ -17,4 +17,9 @@ public class MyController {\n     public String getFlights() {\n         return \"Please don't fly today\";\n     }\n+\n+    @Path(\"/tickets\")\n+    public String getTickets() {\n+        return \"No ticket available.\";\n+    }\n }\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/MyController.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/MyController.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "e64435fe"
        },
        {
          "diff": "@@ -1,20 +1,39 @@\n package ua.danit.signature;\n \n-import java.util.List;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n \n-/**\n- * Created  15.12.2017.\n- */\n public class Signature {\n-    String methodName;\n-    List<Class> parameters;\n+\n     String url;\n-    String httpMethod;\n+    private Class<?> clazz;\n+    private Method method;\n \n-    public Signature ( String methodName, String url, String httpMethod ) {\n-        this.methodName = methodName;\n+    public Signature(Method method, String url, Class<?> aClass) {\n+        this.method = method;\n         this.url = url;\n-        this.httpMethod = httpMethod;\n+        clazz = aClass;\n+    }\n+\n+    public String getUrl() {\n+        return url;\n     }\n \n+    public Method getMethod() {\n+        return method;\n+    }\n+\n+    public String invoke() {\n+        try {\n+            return (String)method.invoke(clazz.newInstance(), null);\n+        } catch (IllegalAccessException e) {\n+            e.printStackTrace();\n+        } catch (InvocationTargetException e) {\n+            e.printStackTrace();\n+        } catch (InstantiationException e) {\n+            e.printStackTrace();\n+        }\n+\n+        return \"\";\n+    }\n }\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/signature/Signature.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/signature/Signature.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "e64435fe"
        }
      ]
    },
    {
      "id": "fdc26d1c5dbfebdb689acb9024a7fbafc832dc09",
      "project_id": 4888518,
      "message": "small refactoring\n",
      "title": "small refactoring",
      "short_id": "fdc26d1c",
      "author_name": "Volodymyr Derkach",
      "branches": null,
      "created_at": "2017-12-16T08:37:13Z",
      "diffs": [
        {
          "diff": "@@ -19,34 +19,7 @@ public class App {\n         Server server = new Server(8080);\n \n         ServletContextHandler handler = new ServletContextHandler();\n-        handler.addServlet(new ServletHolder(new HttpServlet() {\n-            @Override\n-            protected void doGet ( HttpServletRequest req, HttpServletResponse resp ) throws ServletException, IOException {\n-                boolean flag = true;\n-\n-                for (Method method : Reflections.getMethods(MyController.class)) {\n-                    if ( method.isAnnotationPresent(Path.class) ) {\n-                        Path path = (Path) Reflections.getAnnotation(method, Path.class);\n-                        if ( req.getRequestURI().equals(path.value()) ) {\n-                            try {\n-                                String result = (String) method.invoke(new MyController(), null);\n-                                resp.getWriter().write(result);\n-                                flag=false;\n-\n-                            } catch (IllegalAccessException e) {\n-                                e.printStackTrace();\n-                            } catch (InvocationTargetException e) {\n-                                e.printStackTrace();\n-                            }\n-                        }\n-                    }\n-                }\n-               if (flag) {resp.getWriter().write(\"Hi there\");}\n-            }\n-\n-        }), \"/*\");\n-\n-\n+        handler.addServlet(new ServletHolder(new DispatcherServlet()), \"/*\");\n         server.setHandler(handler);\n         server.start();\n         server.join();\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/App.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/App.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "fdc26d1c"
        },
        {
          "diff": "@@ -0,0 +1,49 @@\n+package ua.danit;\n+\n+import utils.Reflections;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.Path;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+\n+public class DispatcherServlet extends HttpServlet {\n+\n+    @Override\n+    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+\n+        for (Method method : Reflections.getMethods(MyController.class)) {\n+            handleMethod(req, resp, method);\n+        }\n+    }\n+\n+    private void handleMethod(HttpServletRequest req, HttpServletResponse resp, Method method) throws IOException {\n+        if (method.isAnnotationPresent(Path.class)) {\n+\n+            Path path = (Path) Reflections.getAnnotation(method, Path.class);\n+\n+            if (req.getRequestURI().equals(path.value())) {\n+\n+                String result = invoke(method);\n+                resp.getWriter().write(result);\n+\n+            }\n+        }\n+    }\n+\n+    private String invoke(Method method) {\n+        try {\n+            return (String) method.invoke(new MyController(), null);\n+        } catch (IllegalAccessException e) {\n+            e.printStackTrace();\n+        } catch (InvocationTargetException e) {\n+            e.printStackTrace();\n+        }\n+        return \"\";\n+    }\n+\n+}\n\\ No newline at end of file\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/DispatcherServlet.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/DispatcherServlet.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "fdc26d1c"
        },
        {
          "diff": "@@ -1,5 +1,5 @@\n #!/bin/bash\n \n-mvn clean package\n-cd target/\n+mvn clean package &\n+cd target/ &\n java -jar *with-dependencies.jar\n",
          "old_path": "jax-rs-playground/start.sh",
          "new_path": "jax-rs-playground/start.sh",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "fdc26d1c"
        }
      ]
    },
    {
      "id": "a1ad4609722bc864e012ce3e81933eeab2a2f049",
      "project_id": 4888518,
      "message": "some\n",
      "title": "some",
      "short_id": "a1ad4609",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2017-12-15T23:24:17Z",
      "diffs": [
        {
          "diff": "@@ -17,14 +17,13 @@\n     </properties>\n \n     <dependencies>\n-        \n         <!--  javax.ws.rs.core e.g. Request -->\n-    <dependency>\n-      <groupId>javax.ws.rs</groupId>\n-      <artifactId>jsr311-api</artifactId>\n-      <version>1.0</version>\n-    </dependency>\n-    \n+        <dependency>\n+          <groupId>javax.ws.rs</groupId>\n+          <artifactId>jsr311-api</artifactId>\n+          <version>1.0</version>\n+        </dependency>\n+\n         <dependency>\n             <groupId>org.eclipse.jetty</groupId>\n             <artifactId>jetty-servlet</artifactId>\n",
          "old_path": "jax-rs-playground/pom.xml",
          "new_path": "jax-rs-playground/pom.xml",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "a1ad4609"
        },
        {
          "diff": "@@ -3,23 +3,47 @@ package ua.danit;\n import org.eclipse.jetty.server.Server;\n import org.eclipse.jetty.servlet.ServletContextHandler;\n import org.eclipse.jetty.servlet.ServletHolder;\n+import utils.Reflections;\n \n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServlet;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.Path;\n import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n \n public class App {\n-    public static void main( String[] args ) throws Exception {\n+    public static void main ( String[] args ) throws Exception {\n         Server server = new Server(8080);\n \n         ServletContextHandler handler = new ServletContextHandler();\n         handler.addServlet(new ServletHolder(new HttpServlet() {\n             @Override\n-            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n-                resp.getWriter().write(\"Hi there\");\n+            protected void doGet ( HttpServletRequest req, HttpServletResponse resp ) throws ServletException, IOException {\n+                boolean flag = true;\n+\n+                for (Method method : Reflections.getMethods(MyController.class)) {\n+                    if ( method.isAnnotationPresent(Path.class) ) {\n+                        Path path = (Path) Reflections.getAnnotation(method, Path.class);\n+                        if ( req.getRequestURI().equals(path.value()) ) {\n+                            try {\n+                                String result = (String) method.invoke(new MyController(), null);\n+                                resp.getWriter().write(result);\n+                                flag=false;\n+\n+                            } catch (IllegalAccessException e) {\n+                                e.printStackTrace();\n+                            } catch (InvocationTargetException e) {\n+                                e.printStackTrace();\n+                            }\n+                        }\n+                    }\n+                }\n+               if (flag) {resp.getWriter().write(\"Hi there\");}\n             }\n+\n         }), \"/*\");\n \n \n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/App.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/App.java",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "a1ad4609"
        },
        {
          "diff": "@@ -0,0 +1,20 @@\n+package ua.danit;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+\n+\n+public class MyController {\n+\n+    @Path(\"/my/custom/url\")\n+    @GET\n+    public String getWeather() {\n+        return \"The weather is cool\";\n+    }\n+\n+    @Path(\"/flights\")\n+    @GET\n+    public String getFlights() {\n+        return \"Please don't fly today\";\n+    }\n+}\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/MyController.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/MyController.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "a1ad4609"
        },
        {
          "diff": "@@ -0,0 +1,20 @@\n+package ua.danit.signature;\n+\n+import java.util.List;\n+\n+/**\n+ * Created  15.12.2017.\n+ */\n+public class Signature {\n+    String methodName;\n+    List<Class> parameters;\n+    String url;\n+    String httpMethod;\n+\n+    public Signature ( String methodName, String url, String httpMethod ) {\n+        this.methodName = methodName;\n+        this.url = url;\n+        this.httpMethod = httpMethod;\n+    }\n+\n+}\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/signature/Signature.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/signature/Signature.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "a1ad4609"
        },
        {
          "diff": "@@ -0,0 +1,28 @@\n+package utils;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+\n+/**\n+ * Created  15.12.2017.\n+ */\n+public class Reflections {\n+\n+    public static List <Method> getMethods ( Class clazz ) {\n+        if ( clazz == null ) {\n+            return null;\n+        }\n+        return Arrays.asList(clazz.getMethods());\n+    }\n+\n+\n+    public static Annotation getAnnotation ( Method method ,Class annotationClass) {\n+        if ( method == null  ) {\n+            return null;\n+        }\n+        return method.getAnnotation(annotationClass);\n+    }\n+}\n",
          "old_path": "jax-rs-playground/src/main/java/utils/Reflections.java",
          "new_path": "jax-rs-playground/src/main/java/utils/Reflections.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "a1ad4609"
        }
      ]
    },
    {
      "id": "8ee2b167cb0809282b8fb4098683a5b463648715",
      "project_id": 4888518,
      "message": "Merge branch 'master' of https://gitlab.com/korsa719/jax-rs\n",
      "title": "Merge branch 'master' of https://gitlab.com/korsa719/jax-rs",
      "short_id": "8ee2b167",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2017-12-15T13:54:39Z",
      "diffs": [
        {
          "diff": "@@ -1,4 +1,3 @@\n-\n <b>Current target:</b>\n \n Create a service that will accept all Resources(annotated with @Path), parse all methods and put it in internal map\n",
          "old_path": "README.md",
          "new_path": "README.md",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "8ee2b167"
        }
      ]
    },
    {
      "id": "06cd1f3181365b81f0e79f47b0e7cc81add90403",
      "project_id": 4888518,
      "message": "add bash script\n",
      "title": "add bash script",
      "short_id": "06cd1f31",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2017-12-15T13:52:52Z",
      "diffs": [
        {
          "diff": "@@ -2,4 +2,4 @@\n \n mvn clean package\n cd target/\n-java -jar jax-rs-playground-1.0-SNAPSHOT-jar-with-dependencies.jar\n+java -jar *with-dependencies.jar\n",
          "old_path": "jax-rs-playground/start.sh",
          "new_path": "jax-rs-playground/start.sh",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "06cd1f31"
        }
      ]
    },
    {
      "id": "3831064896c8a8a2733e2cba95b174d0e9d62b60",
      "project_id": 4888518,
      "message": "add bash script that will build and run application from terminal start.sh\n",
      "title": "add bash script that will build and run application from terminal start.sh",
      "short_id": "38310648",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2017-12-15T12:12:41Z",
      "diffs": [
        {
          "diff": "@@ -0,0 +1,5 @@\n+#!/bin/bash\n+\n+mvn clean package\n+cd target/\n+java -jar jax-rs-playground-1.0-SNAPSHOT-jar-with-dependencies.jar\n",
          "old_path": "jax-rs-playground/start.sh",
          "new_path": "jax-rs-playground/start.sh",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "38310648"
        }
      ]
    },
    {
      "id": "50a533b88a2d83ae02b320662318b88d59465e60",
      "project_id": 4888518,
      "message": "Update README.md",
      "title": "Update README.md",
      "short_id": "50a533b8",
      "author_name": "Kostyantyn Matlayev",
      "branches": null,
      "created_at": "2017-12-15T10:34:50Z",
      "diffs": [
        {
          "diff": "@@ -1,4 +1,3 @@\n-\n <b>Current target:</b>\n \n Create a service that will accept all Resources(annotated with @Path), parse all methods and put it in internal map\n",
          "old_path": "README.md",
          "new_path": "README.md",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "50a533b8"
        }
      ]
    },
    {
      "id": "f30e16f27b3d07ba8d855380d504028e1ea8ac5c",
      "project_id": 4888518,
      "message": "add <!--  javax.ws.rs.core e.g. Request -->\n    <dependency>\n      <groupId>javax.ws.rs</groupId>\n      <artifactId>jsr311-api</artifactId>\n      <version>1.0</version>\n    </dependency>",
      "title": "add <!--  javax.ws.rs.core e.g. Request -->",
      "short_id": "f30e16f2",
      "author_name": "Kostyantyn Matlayev",
      "branches": null,
      "created_at": "2017-12-15T10:17:44Z",
      "diffs": [
        {
          "diff": "@@ -17,6 +17,14 @@\n     </properties>\n \n     <dependencies>\n+        \n+        <!--  javax.ws.rs.core e.g. Request -->\n+    <dependency>\n+      <groupId>javax.ws.rs</groupId>\n+      <artifactId>jsr311-api</artifactId>\n+      <version>1.0</version>\n+    </dependency>\n+    \n         <dependency>\n             <groupId>org.eclipse.jetty</groupId>\n             <artifactId>jetty-servlet</artifactId>\n",
          "old_path": "jax-rs-playground/pom.xml",
          "new_path": "jax-rs-playground/pom.xml",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "f30e16f2"
        }
      ]
    },
    {
      "id": "dcf701366420baf76461407baac42bac04544a85",
      "project_id": 4888518,
      "message": "runable jar file after Maven: clean install\n",
      "title": "runable jar file after Maven: clean install",
      "short_id": "dcf70136",
      "author_name": "Maxim Pogorelov",
      "branches": null,
      "created_at": "2017-12-14T18:51:24Z",
      "diffs": [
        {
          "diff": "@@ -1,6 +1,6 @@\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-<modelVersion>4.0.0</modelVersion>\n+    <modelVersion>4.0.0</modelVersion>\n \n     <groupId>ua.danit</groupId>\n     <artifactId>jax-rs-playground</artifactId>\n@@ -8,81 +8,74 @@\n     <packaging>jar</packaging>\n \n \n+    <name>jax-rs-playground</name>\n+    <url>http://maven.apache.org</url>\n \n-<name>jax-rs-playground</name>\n-<url>http://maven.apache.org</url>\n+    <properties>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <jetty.version>9.4.6.v20170531</jetty.version>\n+    </properties>\n \n-<properties>\n-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n-    <jetty.version>9.4.6.v20170531</jetty.version>\n-</properties>\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.eclipse.jetty</groupId>\n+            <artifactId>jetty-servlet</artifactId>\n+            <version>${jetty.version}</version>\n+        </dependency>\n \n-<dependencies>\n-    <dependency>\n-        <groupId>org.eclipse.jetty</groupId>\n-        <artifactId>jetty-servlet</artifactId>\n-        <version>${jetty.version}</version>\n-    </dependency>\n-\n-    <dependency>\n-        <groupId>org.eclipse.jetty</groupId>\n-        <artifactId>jetty-server</artifactId>\n-        <version>${jetty.version}</version>\n-    </dependency>\n-    <dependency>\n-        <groupId>junit</groupId>\n-        <artifactId>junit</artifactId>\n-        <version>3.8.1</version>\n-        <scope>test</scope>\n-    </dependency>\n-    <dependency>\n-        <groupId>javax.servlet</groupId>\n-        <artifactId>javax.servlet-api</artifactId>\n-        <version>3.1.0</version>\n-    </dependency>\n-    <!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-jar-plugin -->\n-</dependencies>\n-<build>\n-    <plugins>\n-        <plugin>\n-            <groupId>org.apache.maven.plugins</groupId>\n-            <artifactId>maven-compiler-plugin</artifactId>\n-            <version>3.7.0</version>\n-            <configuration>\n-                <source>1.8</source>\n-                <target>1.8</target>\n-            </configuration>\n-        </plugin>\n-        <plugin>\n-            <groupId>org.apache.maven.plugins</groupId>\n-            <artifactId>maven-jar-plugin</artifactId>\n-            <version>3.0.2</version>\n-            <configuration>\n-                <archive>\n-                    <manifest>\n-                        <mainClass>ua.danit.App</mainClass>\n-                        <addClasspath>true</addClasspath>\n-                    </manifest>\n-                </archive>\n-            </configuration>\n-        </plugin>\n+        <dependency>\n+            <groupId>org.eclipse.jetty</groupId>\n+            <artifactId>jetty-server</artifactId>\n+            <version>${jetty.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <version>3.8.1</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>javax.servlet</groupId>\n+            <artifactId>javax.servlet-api</artifactId>\n+            <version>3.1.0</version>\n+        </dependency>\n+        <!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-jar-plugin -->\n+    </dependencies>\n \n+    <build>\n+        <plugins>\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n-                <artifactId>maven-shade-plugin</artifactId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <version>3.7.0</version>\n+                <configuration>\n+                    <source>1.8</source>\n+                    <target>1.8</target>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <artifactId>maven-assembly-plugin</artifactId>\n+                <configuration>\n+                    <archive>\n+                        <manifest>\n+                            <mainClass>ua.danit.App</mainClass>\n+                        </manifest>\n+                    </archive>\n+                    <descriptorRefs>\n+                        <descriptorRef>jar-with-dependencies</descriptorRef>\n+                    </descriptorRefs>\n+                </configuration>\n                 <executions>\n                     <execution>\n-                        <phase>package</phase>\n+                        <id>make-assembly</id> <!-- this is used for inheritance merges -->\n+                        <phase>package</phase> <!-- bind to the packaging phase -->\n                         <goals>\n-                            <goal>shade</goal>\n+                            <goal>single</goal>\n                         </goals>\n                     </execution>\n                 </executions>\n-                <configuration>\n-                    <finalName>${artifactId}-${version}</finalName>\n-                </configuration>\n             </plugin>\n+        </plugins>\n+    </build>\n \n-    </plugins>\n-</build>\n </project>\n",
          "old_path": "jax-rs-playground/pom.xml",
          "new_path": "jax-rs-playground/pom.xml",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "dcf70136"
        }
      ]
    },
    {
      "id": "fcff082fabeeb9dd4255878d20dd6336d2e7f549",
      "project_id": 4888518,
      "message": "Update README.md",
      "title": "Update README.md",
      "short_id": "fcff082f",
      "author_name": "Kostyantyn Matlayev",
      "branches": null,
      "created_at": "2017-12-14T17:53:54Z",
      "diffs": [
        {
          "diff": "@@ -1,8 +1,7 @@\n \n-\n <b>Current target:</b>\n \n-add jar plugin, so we can run application with \"java -jar jax-rs-playground.jar\n+Create a service that will accept all Resources(annotated with @Path), parse all methods and put it in internal map\n \n \n \n",
          "old_path": "README.md",
          "new_path": "README.md",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "fcff082f"
        }
      ]
    },
    {
      "id": "429e24bcb2f000179c7b62d1c2fd7addde39b515",
      "project_id": 4888518,
      "message": "плагин работает\n",
      "title": "плагин работает",
      "short_id": "429e24bc",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2017-12-14T17:48:19Z",
      "diffs": [
        {
          "diff": "@@ -0,0 +1,60 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <groupId>ua.danit</groupId>\n+  <artifactId>jax-rs-playground</artifactId>\n+  <name>jax-rs-playground</name>\n+  <version>1.0-SNAPSHOT</version>\n+  <url>http://maven.apache.org</url>\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <artifactId>maven-compiler-plugin</artifactId>\n+        <version>3.7.0</version>\n+        <configuration>\n+          <source>1.8</source>\n+          <target>1.8</target>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <artifactId>maven-jar-plugin</artifactId>\n+        <version>3.0.2</version>\n+        <configuration>\n+          <archive>\n+            <manifest>\n+              <mainClass>ua.danit.App</mainClass>\n+              <addClasspath>true</addClasspath>\n+            </manifest>\n+          </archive>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <artifactId>maven-shade-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <phase>package</phase>\n+            <goals>\n+              <goal>shade</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <finalName>${artifactId}-${version}</finalName>\n+        </configuration>\n+      </plugin>\n+    </plugins>\n+  </build>\n+  <dependencies>\n+    <dependency>\n+      <groupId>junit</groupId>\n+      <artifactId>junit</artifactId>\n+      <version>3.8.1</version>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+  <properties>\n+    <jetty.version>9.4.6.v20170531</jetty.version>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+  </properties>\n+</project>\n+\n",
          "old_path": "jax-rs-playground/dependency-reduced-pom.xml",
          "new_path": "jax-rs-playground/dependency-reduced-pom.xml",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "429e24bc"
        },
        {
          "diff": "@@ -60,12 +60,29 @@\n             <configuration>\n                 <archive>\n                     <manifest>\n-                        <mainClass>ua.danit.Test</mainClass>\n+                        <mainClass>ua.danit.App</mainClass>\n                         <addClasspath>true</addClasspath>\n                     </manifest>\n                 </archive>\n             </configuration>\n         </plugin>\n+\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-shade-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <phase>package</phase>\n+                        <goals>\n+                            <goal>shade</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+                <configuration>\n+                    <finalName>${artifactId}-${version}</finalName>\n+                </configuration>\n+            </plugin>\n+\n     </plugins>\n </build>\n </project>\n",
          "old_path": "jax-rs-playground/pom.xml",
          "new_path": "jax-rs-playground/pom.xml",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "429e24bc"
        }
      ]
    },
    {
      "id": "1592d39e4703c9596c6c62c65249ac913655c7b3",
      "project_id": 4888518,
      "message": "проблемы в App.java\n",
      "title": "проблемы в App.java",
      "short_id": "1592d39e",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2017-12-14T17:01:29Z",
      "diffs": [
        {
          "diff": "@@ -2,9 +2,10 @@\n          xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n <modelVersion>4.0.0</modelVersion>\n \n-<groupId>ua.danit</groupId>\n-<artifactId>MyApp</artifactId>\n-<packaging>jar</packaging>\n+    <groupId>ua.danit</groupId>\n+    <artifactId>jax-rs-playground</artifactId>\n+    <version>1.0-SNAPSHOT</version>\n+    <packaging>jar</packaging>\n \n \n \n@@ -34,7 +35,11 @@\n         <version>3.8.1</version>\n         <scope>test</scope>\n     </dependency>\n-\n+    <dependency>\n+        <groupId>javax.servlet</groupId>\n+        <artifactId>javax.servlet-api</artifactId>\n+        <version>3.1.0</version>\n+    </dependency>\n     <!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-jar-plugin -->\n </dependencies>\n <build>\n@@ -55,7 +60,7 @@\n             <configuration>\n                 <archive>\n                     <manifest>\n-                        <mainClass>ua.danit.App</mainClass>\n+                        <mainClass>ua.danit.Test</mainClass>\n                         <addClasspath>true</addClasspath>\n                     </manifest>\n                 </archive>\n",
          "old_path": "jax-rs-playground/pom.xml",
          "new_path": "jax-rs-playground/pom.xml",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "1592d39e"
        },
        {
          "diff": "@@ -0,0 +1,12 @@\n+package ua.danit;\n+\n+/**\n+ * Created  14.12.2017.\n+ */\n+public class Test {\n+    public static void main ( String[] args ) {\n+        for (int i = 0; i < 10; i++) {\n+            System.out.println(i);\n+        }\n+    }\n+}\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/Test.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/Test.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "1592d39e"
        }
      ]
    },
    {
      "id": "a479652513e5c6302d1074617617727419fb3f31",
      "project_id": 4888518,
      "message": "change name.jar in pom.xml\n",
      "title": "change name.jar in pom.xml",
      "short_id": "a4796525",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2017-12-14T16:36:57Z",
      "diffs": [
        {
          "diff": "@@ -3,8 +3,7 @@\n <modelVersion>4.0.0</modelVersion>\n \n <groupId>ua.danit</groupId>\n-<artifactId>jax-rs-playground</artifactId>\n-<version>1.0-SNAPSHOT</version>\n+<artifactId>MyApp</artifactId>\n <packaging>jar</packaging>\n \n \n",
          "old_path": "jax-rs-playground/pom.xml",
          "new_path": "jax-rs-playground/pom.xml",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "a4796525"
        }
      ]
    },
    {
      "id": "249fbe89f78cfeed657f2eaf0860c24447874ccc",
      "project_id": 4888518,
      "message": "Update README.md",
      "title": "Update README.md",
      "short_id": "249fbe89",
      "author_name": "Kostyantyn Matlayev",
      "branches": null,
      "created_at": "2017-12-14T16:28:15Z",
      "diffs": [
        {
          "diff": "@@ -1,9 +1,8 @@\n \n \n+<b>Current target:</b>\n \n-Current target:\n-\n-Create new maven module \"jax-rs-impl\" that include standard jax-rs(JSR-331) spesification.\n+add jar plugin, so we can run application with \"java -jar jax-rs-playground.jar\n \n \n \n",
          "old_path": "README.md",
          "new_path": "README.md",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "249fbe89"
        }
      ]
    },
    {
      "id": "2c0a95c75172bdf83d59bfafd47dc76dac9773f8",
      "project_id": 4888518,
      "message": "Update pom.xml",
      "title": "Update pom.xml",
      "short_id": "2c0a95c7",
      "author_name": "Kostyantyn Matlayev",
      "branches": null,
      "created_at": "2017-12-14T16:26:56Z",
      "diffs": [
        {
          "diff": "@@ -1,51 +1,67 @@\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-  <modelVersion>4.0.0</modelVersion>\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+<modelVersion>4.0.0</modelVersion>\n \n-  <groupId>ua.danit</groupId>\n-  <artifactId>jax-rs-playground</artifactId>\n-  <version>1.0-SNAPSHOT</version>\n-  <packaging>jar</packaging>\n+<groupId>ua.danit</groupId>\n+<artifactId>jax-rs-playground</artifactId>\n+<version>1.0-SNAPSHOT</version>\n+<packaging>jar</packaging>\n \n-  <name>jax-rs-playground</name>\n-  <url>http://maven.apache.org</url>\n \n-  <properties>\n+\n+<name>jax-rs-playground</name>\n+<url>http://maven.apache.org</url>\n+\n+<properties>\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n     <jetty.version>9.4.6.v20170531</jetty.version>\n-  </properties>\n+</properties>\n \n-  <dependencies>\n+<dependencies>\n     <dependency>\n-      <groupId>org.eclipse.jetty</groupId>\n-      <artifactId>jetty-servlet</artifactId>\n-      <version>${jetty.version}</version>\n+        <groupId>org.eclipse.jetty</groupId>\n+        <artifactId>jetty-servlet</artifactId>\n+        <version>${jetty.version}</version>\n     </dependency>\n \n     <dependency>\n-      <groupId>org.eclipse.jetty</groupId>\n-      <artifactId>jetty-server</artifactId>\n-      <version>${jetty.version}</version>\n+        <groupId>org.eclipse.jetty</groupId>\n+        <artifactId>jetty-server</artifactId>\n+        <version>${jetty.version}</version>\n     </dependency>\n     <dependency>\n-      <groupId>junit</groupId>\n-      <artifactId>junit</artifactId>\n-      <version>3.8.1</version>\n-      <scope>test</scope>\n+        <groupId>junit</groupId>\n+        <artifactId>junit</artifactId>\n+        <version>3.8.1</version>\n+        <scope>test</scope>\n     </dependency>\n-  </dependencies>\n \n-  <build>\n+    <!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-jar-plugin -->\n+</dependencies>\n+<build>\n     <plugins>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-compiler-plugin</artifactId>\n-        <version>3.7.0</version>\n-        <configuration>\n-          <source>1.8</source>\n-          <target>1.8</target>\n-        </configuration>\n-      </plugin>\n+        <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-compiler-plugin</artifactId>\n+            <version>3.7.0</version>\n+            <configuration>\n+                <source>1.8</source>\n+                <target>1.8</target>\n+            </configuration>\n+        </plugin>\n+        <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-jar-plugin</artifactId>\n+            <version>3.0.2</version>\n+            <configuration>\n+                <archive>\n+                    <manifest>\n+                        <mainClass>ua.danit.App</mainClass>\n+                        <addClasspath>true</addClasspath>\n+                    </manifest>\n+                </archive>\n+            </configuration>\n+        </plugin>\n     </plugins>\n-  </build>\n+</build>\n </project>\n",
          "old_path": "jax-rs-playground/pom.xml",
          "new_path": "jax-rs-playground/pom.xml",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "2c0a95c7"
        }
      ]
    },
    {
      "id": "f79fea896ecdaf910849d267559b520a375150ad",
      "project_id": 4888518,
      "message": "Delete .pom.xml.swp",
      "title": "Delete .pom.xml.swp",
      "short_id": "f79fea89",
      "author_name": "Kostyantyn Matlayev",
      "branches": null,
      "created_at": "2017-12-14T10:52:20Z",
      "diffs": [
        {
          "diff": "Binary files a/jax-rs-playground/.pom.xml.swp and /dev/null differ\n",
          "old_path": "jax-rs-playground/.pom.xml.swp",
          "new_path": "jax-rs-playground/.pom.xml.swp",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": true,
          "commit_id": "f79fea89"
        }
      ]
    },
    {
      "id": "732a488145a78f3b268a01d0f069baf7bdad5c84",
      "project_id": 4888518,
      "message": "change README current target\n",
      "title": "change README current target",
      "short_id": "732a4881",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2017-12-14T10:49:54Z",
      "diffs": [
        {
          "diff": "@@ -1 +1,9 @@\n-some text\n\\ No newline at end of file\n+\n+\n+\n+Current target:\n+\n+Create new maven module \"jax-rs-impl\" that include standard jax-rs(JSR-331) spesification.\n+\n+\n+\n",
          "old_path": "README.md",
          "new_path": "README.md",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "732a4881"
        },
        {
          "diff": "Binary files /dev/null and b/jax-rs-playground/.pom.xml.swp differ\n",
          "old_path": "jax-rs-playground/.pom.xml.swp",
          "new_path": "jax-rs-playground/.pom.xml.swp",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "732a4881"
        }
      ]
    },
    {
      "id": "97df71d318a724bda6ca4c999b9a73f4421c0351",
      "project_id": 4888518,
      "message": "Merge remote-tracking branch 'origin/2-create-web-app-that-display-hello-world'\n",
      "title": "Merge remote-tracking branch 'origin/2-create-web-app-that-display-hello-world'",
      "short_id": "97df71d3",
      "author_name": "korsa719",
      "branches": null,
      "created_at": "2017-12-14T10:08:40Z",
      "diffs": [
        {
          "diff": "@@ -0,0 +1,4 @@\n+.idea\n+target\n+*.iml\n+\n",
          "old_path": ".gitignore",
          "new_path": ".gitignore",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "97df71d3"
        },
        {
          "diff": "@@ -0,0 +1,51 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <groupId>ua.danit</groupId>\n+  <artifactId>jax-rs-playground</artifactId>\n+  <version>1.0-SNAPSHOT</version>\n+  <packaging>jar</packaging>\n+\n+  <name>jax-rs-playground</name>\n+  <url>http://maven.apache.org</url>\n+\n+  <properties>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    <jetty.version>9.4.6.v20170531</jetty.version>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.eclipse.jetty</groupId>\n+      <artifactId>jetty-servlet</artifactId>\n+      <version>${jetty.version}</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.eclipse.jetty</groupId>\n+      <artifactId>jetty-server</artifactId>\n+      <version>${jetty.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>junit</groupId>\n+      <artifactId>junit</artifactId>\n+      <version>3.8.1</version>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-compiler-plugin</artifactId>\n+        <version>3.7.0</version>\n+        <configuration>\n+          <source>1.8</source>\n+          <target>1.8</target>\n+        </configuration>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>\n",
          "old_path": "jax-rs-playground/pom.xml",
          "new_path": "jax-rs-playground/pom.xml",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "97df71d3"
        },
        {
          "diff": "@@ -0,0 +1,30 @@\n+package ua.danit;\n+\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.servlet.ServletContextHandler;\n+import org.eclipse.jetty.servlet.ServletHolder;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+\n+public class App {\n+    public static void main( String[] args ) throws Exception {\n+        Server server = new Server(8080);\n+\n+        ServletContextHandler handler = new ServletContextHandler();\n+        handler.addServlet(new ServletHolder(new HttpServlet() {\n+            @Override\n+            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+                resp.getWriter().write(\"Hi there\");\n+            }\n+        }), \"/*\");\n+\n+\n+        server.setHandler(handler);\n+        server.start();\n+        server.join();\n+    }\n+}\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/App.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/App.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "97df71d3"
        },
        {
          "diff": "@@ -0,0 +1,38 @@\n+package ua.danit;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Unit test for simple App.\n+ */\n+public class AppTest \n+    extends TestCase\n+{\n+    /**\n+     * Create the test case\n+     *\n+     * @param testName name of the test case\n+     */\n+    public AppTest( String testName )\n+    {\n+        super( testName );\n+    }\n+\n+    /**\n+     * @return the suite of tests being tested\n+     */\n+    public static Test suite()\n+    {\n+        return new TestSuite( AppTest.class );\n+    }\n+\n+    /**\n+     * Rigourous Test :-)\n+     */\n+    public void testApp()\n+    {\n+        assertTrue( true );\n+    }\n+}\n",
          "old_path": "jax-rs-playground/src/test/java/ua/danit/AppTest.java",
          "new_path": "jax-rs-playground/src/test/java/ua/danit/AppTest.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "97df71d3"
        }
      ]
    },
    {
      "id": "fa2e93796366c16cd22b24b0ab4c9b0dfe15229d",
      "project_id": 4888518,
      "message": "build plugin\n",
      "title": "build plugin",
      "short_id": "fa2e9379",
      "author_name": "Volodymyr Derkach",
      "branches": null,
      "created_at": "2017-12-13T19:37:24Z",
      "diffs": [
        {
          "diff": "@@ -34,4 +34,18 @@\n       <scope>test</scope>\n     </dependency>\n   </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-compiler-plugin</artifactId>\n+        <version>3.7.0</version>\n+        <configuration>\n+          <source>1.8</source>\n+          <target>1.8</target>\n+        </configuration>\n+      </plugin>\n+    </plugins>\n+  </build>\n </project>\n",
          "old_path": "jax-rs-playground/pom.xml",
          "new_path": "jax-rs-playground/pom.xml",
          "new_file": false,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "fa2e9379"
        }
      ]
    },
    {
      "id": "f5fb70ff7f7c327e5b9b3e3743e9e6409107cc1d",
      "project_id": 4888518,
      "message": "+gitignore\n",
      "title": "+gitignore",
      "short_id": "f5fb70ff",
      "author_name": "Volodymyr Derkach",
      "branches": null,
      "created_at": "2017-12-13T19:19:37Z",
      "diffs": [
        {
          "diff": "@@ -0,0 +1,4 @@\n+.idea\n+target\n+*.iml\n+\n",
          "old_path": ".gitignore",
          "new_path": ".gitignore",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "f5fb70ff"
        }
      ]
    },
    {
      "id": "7737828a4fca19fa5ac9c0ebc3220f09956ebbe3",
      "project_id": 4888518,
      "message": "working web-app\n",
      "title": "working web-app",
      "short_id": "7737828a",
      "author_name": "Volodymyr Derkach",
      "branches": null,
      "created_at": "2017-12-13T18:41:45Z",
      "diffs": [
        {
          "diff": "@@ -0,0 +1,37 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <groupId>ua.danit</groupId>\n+  <artifactId>jax-rs-playground</artifactId>\n+  <version>1.0-SNAPSHOT</version>\n+  <packaging>jar</packaging>\n+\n+  <name>jax-rs-playground</name>\n+  <url>http://maven.apache.org</url>\n+\n+  <properties>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    <jetty.version>9.4.6.v20170531</jetty.version>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.eclipse.jetty</groupId>\n+      <artifactId>jetty-servlet</artifactId>\n+      <version>${jetty.version}</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.eclipse.jetty</groupId>\n+      <artifactId>jetty-server</artifactId>\n+      <version>${jetty.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>junit</groupId>\n+      <artifactId>junit</artifactId>\n+      <version>3.8.1</version>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+</project>\n",
          "old_path": "jax-rs-playground/pom.xml",
          "new_path": "jax-rs-playground/pom.xml",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "7737828a"
        },
        {
          "diff": "@@ -0,0 +1,30 @@\n+package ua.danit;\n+\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.servlet.ServletContextHandler;\n+import org.eclipse.jetty.servlet.ServletHolder;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+\n+public class App {\n+    public static void main( String[] args ) throws Exception {\n+        Server server = new Server(8080);\n+\n+        ServletContextHandler handler = new ServletContextHandler();\n+        handler.addServlet(new ServletHolder(new HttpServlet() {\n+            @Override\n+            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n+                resp.getWriter().write(\"Hi there\");\n+            }\n+        }), \"/*\");\n+\n+\n+        server.setHandler(handler);\n+        server.start();\n+        server.join();\n+    }\n+}\n",
          "old_path": "jax-rs-playground/src/main/java/ua/danit/App.java",
          "new_path": "jax-rs-playground/src/main/java/ua/danit/App.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "7737828a"
        },
        {
          "diff": "@@ -0,0 +1,38 @@\n+package ua.danit;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Unit test for simple App.\n+ */\n+public class AppTest \n+    extends TestCase\n+{\n+    /**\n+     * Create the test case\n+     *\n+     * @param testName name of the test case\n+     */\n+    public AppTest( String testName )\n+    {\n+        super( testName );\n+    }\n+\n+    /**\n+     * @return the suite of tests being tested\n+     */\n+    public static Test suite()\n+    {\n+        return new TestSuite( AppTest.class );\n+    }\n+\n+    /**\n+     * Rigourous Test :-)\n+     */\n+    public void testApp()\n+    {\n+        assertTrue( true );\n+    }\n+}\n",
          "old_path": "jax-rs-playground/src/test/java/ua/danit/AppTest.java",
          "new_path": "jax-rs-playground/src/test/java/ua/danit/AppTest.java",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "7737828a"
        }
      ]
    },
    {
      "id": "1ab8dc494b13740375a23e8a9b4494a39c57aae4",
      "project_id": 4888518,
      "message": "Add .gitlab-ci.yml",
      "title": "Add .gitlab-ci.yml",
      "short_id": "1ab8dc49",
      "author_name": "Volodymyr Derkach",
      "branches": null,
      "created_at": "2017-12-13T17:54:13Z",
      "diffs": [
        {
          "diff": "@@ -0,0 +1,103 @@\n+# This file is a template, and might need editing before it works on your project.\n+---\n+# Build JAVA applications using Apache Maven (http://maven.apache.org)\n+# For docker image tags see https://hub.docker.com/_/maven/\n+#\n+# For general lifecycle information see https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html\n+#\n+# This template will build and test your projects as well as create the documentation.\n+#\n+# * Caches downloaded dependencies and plugins between invocation.\n+# * Verify but don't deploy merge requests.\n+# * Deploy built artifacts from master branch only.\n+# * Shows how to use multiple jobs in test stage for verifying functionality\n+#   with multiple JDKs.\n+# * Uses site:stage to collect the documentation for multi-module projects.\n+# * Publishes the documentation for `master` branch.\n+\n+variables:\n+  # This will supress any download for dependencies and plugins or upload messages which would clutter the console log.\n+  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.\n+  MAVEN_OPTS: \"-Dmaven.repo.local=.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true\"\n+  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used\n+  # when running from the command line.\n+  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.\n+  MAVEN_CLI_OPTS: \"--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true\"\n+\n+# Cache downloaded dependencies and plugins between builds.\n+# To keep cache across branches add 'key: \"$CI_JOB_REF_NAME\"'\n+cache:\n+  paths:\n+    - .m2/repository\n+\n+# This will only validate and compile stuff and run e.g. maven-enforcer-plugin.\n+# Because some enforcer rules might check dependency convergence and class duplications\n+# we use `test-compile` here instead of `validate`, so the correct classpath is picked up.\n+.validate: &validate\n+  stage: build\n+  script:\n+    - 'mvn $MAVEN_CLI_OPTS test-compile'\n+\n+# For merge requests do not `deploy` but only run `verify`.\n+# See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html\n+.verify: &verify\n+  stage: test\n+  script:\n+    - 'mvn $MAVEN_CLI_OPTS verify site site:stage'\n+  except:\n+    - master\n+\n+# Validate merge requests using JDK7\n+validate:jdk7:\n+  <<: *validate\n+  image: maven:3.3.9-jdk-7\n+\n+# Validate merge requests using JDK8\n+validate:jdk8:\n+  <<: *validate\n+  image: maven:3.3.9-jdk-8\n+\n+# Verify merge requests using JDK7\n+verify:jdk7:\n+  <<: *verify\n+  image: maven:3.3.9-jdk-7\n+\n+# Verify merge requests using JDK8\n+verify:jdk8:\n+  <<: *verify\n+  image: maven:3.3.9-jdk-8\n+\n+\n+# For `master` branch run `mvn deploy` automatically.\n+# Here you need to decide whether you want to use JDK7 or 8.\n+# To get this working you need to define a volume while configuring your gitlab-ci-multi-runner.\n+# Mount your `settings.xml` as `/root/.m2/settings.xml` which holds your secrets.\n+# See https://maven.apache.org/settings.html\n+deploy:jdk8:\n+  # Use stage test here, so the pages job may later pickup the created site.\n+  stage: test\n+  script:\n+    - 'mvn $MAVEN_CLI_OPTS deploy site site:stage'\n+  only:\n+    - master\n+  # Archive up the built documentation site.\n+  artifacts:\n+    paths:\n+    - target/staging\n+  image: maven:3.3.9-jdk-8\n+\n+\n+pages:\n+  image: busybox:latest\n+  stage: deploy\n+  script:\n+    # Because Maven appends the artifactId automatically to the staging path if you did define a parent pom,\n+    # you might need to use `mv target/staging/YOUR_ARTIFACT_ID public` instead.\n+    - mv target/staging public\n+  dependencies:\n+    - deploy:jdk8\n+  artifacts:\n+    paths:\n+    - public\n+  only:\n+    - master\n",
          "old_path": ".gitlab-ci.yml",
          "new_path": ".gitlab-ci.yml",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "1ab8dc49"
        }
      ]
    },
    {
      "id": "200f704d1878d553a27f4e78adab8a5847a9b64a",
      "project_id": 4888518,
      "message": "Add readme.md",
      "title": "Add readme.md",
      "short_id": "200f704d",
      "author_name": "Kostyantyn Matlayev",
      "branches": null,
      "created_at": "2017-12-13T17:14:02Z",
      "diffs": [
        {
          "diff": "@@ -0,0 +1 @@\n+some text\n\\ No newline at end of file\n",
          "old_path": "README.md",
          "new_path": "README.md",
          "new_file": true,
          "renamed_file": false,
          "deleted_file": false,
          "commit_id": "200f704d"
        }
      ]
    }
  ]
}
