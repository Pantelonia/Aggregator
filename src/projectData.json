{
  "id": 4896664,
  "description": "",
  "name": "livebootp",
  "created_at": "2017-12-14T16:13:10.134Z",
  "web_url": "https://gitlab.com/ercom/livebootp",
  "avatar_url": null,
  "creator_id": 772313,
  "commits": [
    {
      "id": "410e0227634d3f5cb00498615ea921390f4b0c85",
      "title": "Merge branch 'ci-jobs-add-docker-tag' into 'master'",
      "created_at": "2018-01-29T09:37:36.000Z",
      "message": "Merge branch 'ci-jobs-add-docker-tag' into 'master'\n\n[CI] Add docker tag to the jobs\n\nSee merge request ercom/livebootp!4",
      "author_name": "Stephane Bausseron",
      "diffs": [
        {
          "id": 3531,
          "oldPath": ".gitlab-ci.yml",
          "newPath": ".gitlab-ci.yml",
          "newFile": false,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -6,6 +6,8 @@ stages:\n \n bootp-registry:\n   stage: build\n+  tags:\n+    - docker\n   services:\n   - name: registry.gitlab.com/ercom/docker:17.12.0-ce-dind\n     alias: docker\n@@ -20,6 +22,8 @@ bootp-registry:\n \n .target-build-template: &target-build-template\n   stage: build\n+  tags:\n+    - docker\n   services:\n   - name: registry.gitlab.com/ercom/docker:17.12.0-ce-dind\n     alias: docker\n@@ -36,6 +40,8 @@ bootp-registry:\n \n .target-mksquashfs-template: &target-mksquashfs-template\n   stage: mksquashfs\n+  tags:\n+    - docker\n   services:\n   - name: registry.gitlab.com/ercom/docker:17.12.0-ce-dind\n     alias: docker\n",
          "commitId": "410e0227634d3f5cb00498615ea921390f4b0c85"
        }
      ]
    },
    {
      "id": "79e503cdf866a275f10b8b2befa7cd73e137d5b8",
      "title": "[CI] Add docker tag to the jobs",
      "created_at": "2018-01-29T09:18:23.000Z",
      "message": "[CI] Add docker tag to the jobs\n",
      "author_name": "Emeric Verschuur",
      "diffs": [
        {
          "id": 3532,
          "oldPath": ".gitlab-ci.yml",
          "newPath": ".gitlab-ci.yml",
          "newFile": false,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -6,6 +6,8 @@ stages:\n \n bootp-registry:\n   stage: build\n+  tags:\n+    - docker\n   services:\n   - name: registry.gitlab.com/ercom/docker:17.12.0-ce-dind\n     alias: docker\n@@ -20,6 +22,8 @@ bootp-registry:\n \n .target-build-template: &target-build-template\n   stage: build\n+  tags:\n+    - docker\n   services:\n   - name: registry.gitlab.com/ercom/docker:17.12.0-ce-dind\n     alias: docker\n@@ -36,6 +40,8 @@ bootp-registry:\n \n .target-mksquashfs-template: &target-mksquashfs-template\n   stage: mksquashfs\n+  tags:\n+    - docker\n   services:\n   - name: registry.gitlab.com/ercom/docker:17.12.0-ce-dind\n     alias: docker\n",
          "commitId": "79e503cdf866a275f10b8b2befa7cd73e137d5b8"
        }
      ]
    },
    {
      "id": "162d13c297155c96d4213eabb97b910033ee5691",
      "title": "Merge branch 'ubuntu-version' into 'master'",
      "created_at": "2018-01-26T11:12:19.000Z",
      "message": "Merge branch 'ubuntu-version' into 'master'\n\n[target/base] Add UBUNTU_VERSION Dockerfile argument\n\nSee merge request ercom/livebootp!3",
      "author_name": "Stephane Bausseron",
      "diffs": [
        {
          "id": 3533,
          "oldPath": "README.md",
          "newPath": "README.md",
          "newFile": false,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -90,7 +90,7 @@ The Dockerfile supported commands are: `FROM`, `RUN`, `ADD`, `COPY`, `ENV`, `WOR\n For our example, we will create a file `targets/nginx-web-server/Dockerfile` containing:\n ```Dockerfile\n ARG CI_REGISTRY_IMAGE\n-FROM $CI_REGISTRY_IMAGE/base:test\n+FROM $CI_REGISTRY_IMAGE/base:1.2.0-ubuntu-16.04\n \n RUN apt update &&                                 \\\n     DEBIAN_FRONTEND=noninteractive apt install -y \\\n@@ -102,6 +102,18 @@ VOLUME /etc/nginx /var/www\n \n IMPORTANT NOTE, for final/bootable image, not required for intermediate one: you have to install a valid kernel image (like linux-image-generic)\n \n+Optionally, you can add custom docker build hooks to perfom additional actions before and after the `docker build` by adding a file `targets/my-target-name/build-hooks.sh` following this model:\n+```bash\n+target_docker_build_before() {\n+    echo \"Executed before docker build, useful to perform some action that cannot be performed into the Dockerfile\"\n+}\n+\n+target_docker_build_after() {\n+    echo \"Executed before docker build, useful to perform some action like temporary files cleanup\"\n+}\n+\n+```\n+\n ### Target creation step 3: startup script (optional)\n This part explain how to add start script to perform some custom initialization. The global LiveBOOTP process is stored into the file list `targets/base/startup.d/XX*.sh`\n \n@@ -127,6 +139,8 @@ in your `targets/nginx-web-server/Dockerfile`\n * With Gitlab-CI: create a tag under the following format: `target-my-target-name/x.y.z` where x.y.z is the version number. The gitlab-ci job is triggered only on tags with the prefix `target-my-target-name/`\n * On your workstation: with the [ci-toolbox](#the-ci-toolbox-command) command like this: `ci-toolbox target-my-target-name-mksquashfs` (in addition you can use `--image-tag` parameter to customize version)\n \n+Note: For the `base` target, the tag is in the format `target-base/<base_version>-ubuntu-<ubuntu_docker_version>` (e.g.: `target-base/1.2.0-b0-ubuntu-bionic-20171220`. The Ubuntu docker version list can be found [here](https://hub.docker.com/r/library/ubuntu/tags/). If the `-ubuntu-<ubuntu_docker_version>` is not specified, the selected version will be `latest` corresponding to the latest LTS release.\n+\n The generated files will be available in the `artifacts/my-target-name/x.y.z/` directory\n \n ## The BOOTP registry\n",
          "commitId": "162d13c297155c96d4213eabb97b910033ee5691"
        },
        {
          "id": 3534,
          "oldPath": "targets/base/CHANGELOG.md",
          "newPath": "targets/base/CHANGELOG.md",
          "newFile": false,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -1,5 +1,9 @@\n # Cangelog\n \n+## 1.2.0\n+* [target/build] Add target_docker_build_* hooks\n+* [target/base] Add FROM_UBUNTU_VERSION Dockerfile argument\n+\n ## 1.1.0\n * [target/base] Remove Linux kernel image installation to be able to install a custom image on the final image targets\n \n",
          "commitId": "162d13c297155c96d4213eabb97b910033ee5691"
        },
        {
          "id": 3535,
          "oldPath": "targets/base/Dockerfile",
          "newPath": "targets/base/Dockerfile",
          "newFile": false,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -1,4 +1,5 @@\n-FROM ubuntu:16.04\n+ARG FROM_UBUNTU_VERSION=latest\n+FROM ubuntu:$FROM_UBUNTU_VERSION\n \n RUN apt update && \\\n     DEBIAN_FRONTEND=noninteractive apt install -y \\\n",
          "commitId": "162d13c297155c96d4213eabb97b910033ee5691"
        },
        {
          "id": 3536,
          "oldPath": "targets/base/build-hooks.sh",
          "newPath": "targets/base/build-hooks.sh",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,9 @@\n+\n+target_docker_build_before() {\n+    local pattern='^.*-ubuntu-.*$'\n+    if [[ $LIBEBOOTP_TARGET_IMAGE_VERSION =~ $pattern ]]; then\n+        local from_ubuntu_version=${LIBEBOOTP_TARGET_IMAGE_VERSION##*-ubuntu-}\n+        LIBEBOOTP_DOCKER_BUILD_ARGS+=(--build-arg \"FROM_UBUNTU_VERSION=$from_ubuntu_version\")\n+        print_note \"Image based on Ubuntu docker image version $from_ubuntu_version\"\n+    fi\n+}\n",
          "commitId": "162d13c297155c96d4213eabb97b910033ee5691"
        },
        {
          "id": 3537,
          "oldPath": "tools/gitlab-ci/run.d/target-build.sh",
          "newPath": "tools/gitlab-ci/run.d/target-build.sh",
          "newFile": false,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -1,6 +1,24 @@\n \n citbx_use \"dockerimg\"\n \n+target_build_exec_hook() {\n+    local hook_function=$1\n+    shift\n+    if [ -f \"targets/$LIBEBOOTP_TARGET_IMAGE_NAME/build-hooks.sh\" ]; then\n+        cd targets/$LIBEBOOTP_TARGET_IMAGE_NAME\n+        source \"build-hooks.sh\"\n+        if [[ \"$(type -t $hook_function)\" == \"function\" ]]; then\n+            $hook_function \"$@\"\n+        else\n+            print_note \"HOOK[$hook_function]: Function $hook_function not found, skipping this hook\"\n+        fi\n+    else\n+        print_note \"HOOK[$hook_function]: File targets/$LIBEBOOTP_TARGET_IMAGE_NAME/build-hooks.sh not found, skipping this hook\"\n+        return\n+    fi\n+    cd \"$CI_PROJECT_DIR\"\n+}\n+\n job_setup() {\n     # Only on workstation, set the suitable tag prefix if not set\n     local job_prefix=${CI_JOB_NAME%-build}\n@@ -24,24 +42,26 @@ job_main() {\n                         \"    --image-tag $LIBEBOOTP_TARGET_IMAGE_NAME/x.y.z\"\n     fi\n     LIBEBOOTP_TARGET_IMAGE_NAME=${LIBEBOOTP_TARGET_IMAGE_NAME#target-}\n-    LIBEBOOTP_TARGET_IMAGE_VERS=${CI_COMMIT_TAG#${CI_JOB_NAME%-build}/}\n-    LIBEBOOTP_CI_REGISTRY_IMAGE_TAG=\"$CI_REGISTRY_IMAGE/$LIBEBOOTP_TARGET_IMAGE_NAME:$LIBEBOOTP_TARGET_IMAGE_VERS\"\n+    LIBEBOOTP_TARGET_IMAGE_VERSION=${CI_COMMIT_TAG#${CI_JOB_NAME%-build}/}\n+    LIBEBOOTP_TARGET_IMAGE_TAG=\"$CI_REGISTRY_IMAGE/$LIBEBOOTP_TARGET_IMAGE_NAME:$LIBEBOOTP_TARGET_IMAGE_VERSION\"\n     # Build docker image\n-    LIBEBOOTP_DOCKER_BUILD_ARGS=(-t \"$LIBEBOOTP_CI_REGISTRY_IMAGE_TAG\")\n     if [ \"$LIBEBOOTP_TARGET_IMAGE_NAME\" != \"base\" ]; then\n         LIBEBOOTP_DOCKER_BUILD_ARGS+=(--build-arg \"CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE\")\n     fi\n+    target_build_exec_hook target_docker_build_before\n+    LIBEBOOTP_DOCKER_BUILD_ARGS+=(-t \"$LIBEBOOTP_TARGET_IMAGE_TAG\")\n     docker build \"${LIBEBOOTP_DOCKER_BUILD_ARGS[@]}\" \\\n         \"targets/$LIBEBOOTP_TARGET_IMAGE_NAME/\"\n     if [ -n \"$CI_BUILD_TOKEN\" ]; then\n         docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY\n-        docker push \"$LIBEBOOTP_CI_REGISTRY_IMAGE_TAG\"\n+        docker push \"$LIBEBOOTP_TARGET_IMAGE_TAG\"\n     fi\n }\n \n job_after() {\n     local retcode=$1\n+    target_build_exec_hook target_docker_build_after $1\n     if [ $retcode -eq 0 ]; then\n-        print_info \"Image \\\"$LIBEBOOTP_CI_REGISTRY_IMAGE_TAG\\\" successfully generated\"\n+        print_info \"Image \\\"$LIBEBOOTP_TARGET_IMAGE_TAG\\\" successfully generated\"\n     fi\n }\n",
          "commitId": "162d13c297155c96d4213eabb97b910033ee5691"
        }
      ]
    },
    {
      "id": "07c8c17223e4c932c0fe34c7f519686acdd08961",
      "title": "[target/base] Add FROM_UBUNTU_VERSION Dockerfile argument",
      "created_at": "2018-01-26T08:53:56.000Z",
      "message": "[target/base] Add FROM_UBUNTU_VERSION Dockerfile argument\n",
      "author_name": "Emeric Verschuur",
      "diffs": [
        {
          "id": 3538,
          "oldPath": "README.md",
          "newPath": "README.md",
          "newFile": false,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -90,7 +90,7 @@ The Dockerfile supported commands are: `FROM`, `RUN`, `ADD`, `COPY`, `ENV`, `WOR\n For our example, we will create a file `targets/nginx-web-server/Dockerfile` containing:\n ```Dockerfile\n ARG CI_REGISTRY_IMAGE\n-FROM $CI_REGISTRY_IMAGE/base:test\n+FROM $CI_REGISTRY_IMAGE/base:1.2.0-ubuntu-16.04\n \n RUN apt update &&                                 \\\n     DEBIAN_FRONTEND=noninteractive apt install -y \\\n@@ -139,6 +139,8 @@ in your `targets/nginx-web-server/Dockerfile`\n * With Gitlab-CI: create a tag under the following format: `target-my-target-name/x.y.z` where x.y.z is the version number. The gitlab-ci job is triggered only on tags with the prefix `target-my-target-name/`\n * On your workstation: with the [ci-toolbox](#the-ci-toolbox-command) command like this: `ci-toolbox target-my-target-name-mksquashfs` (in addition you can use `--image-tag` parameter to customize version)\n \n+Note: For the `base` target, the tag is in the format `target-base/<base_version>-ubuntu-<ubuntu_docker_version>` (e.g.: `target-base/1.2.0-b0-ubuntu-bionic-20171220`. The Ubuntu docker version list can be found [here](https://hub.docker.com/r/library/ubuntu/tags/). If the `-ubuntu-<ubuntu_docker_version>` is not specified, the selected version will be `latest` corresponding to the latest LTS release.\n+\n The generated files will be available in the `artifacts/my-target-name/x.y.z/` directory\n \n ## The BOOTP registry\n",
          "commitId": "07c8c17223e4c932c0fe34c7f519686acdd08961"
        },
        {
          "id": 3539,
          "oldPath": "targets/base/CHANGELOG.md",
          "newPath": "targets/base/CHANGELOG.md",
          "newFile": false,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -1,5 +1,9 @@\n # Cangelog\n \n+## 1.2.0\n+* [target/build] Add target_docker_build_* hooks\n+* [target/base] Add FROM_UBUNTU_VERSION Dockerfile argument\n+\n ## 1.1.0\n * [target/base] Remove Linux kernel image installation to be able to install a custom image on the final image targets\n \n",
          "commitId": "07c8c17223e4c932c0fe34c7f519686acdd08961"
        },
        {
          "id": 3540,
          "oldPath": "targets/base/Dockerfile",
          "newPath": "targets/base/Dockerfile",
          "newFile": false,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -1,4 +1,5 @@\n-FROM ubuntu:16.04\n+ARG FROM_UBUNTU_VERSION=latest\n+FROM ubuntu:$FROM_UBUNTU_VERSION\n \n RUN apt update && \\\n     DEBIAN_FRONTEND=noninteractive apt install -y \\\n",
          "commitId": "07c8c17223e4c932c0fe34c7f519686acdd08961"
        },
        {
          "id": 3541,
          "oldPath": "targets/base/build-hooks.sh",
          "newPath": "targets/base/build-hooks.sh",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,9 @@\n+\n+target_docker_build_before() {\n+    local pattern='^.*-ubuntu-.*$'\n+    if [[ $LIBEBOOTP_TARGET_IMAGE_VERSION =~ $pattern ]]; then\n+        local from_ubuntu_version=${LIBEBOOTP_TARGET_IMAGE_VERSION##*-ubuntu-}\n+        LIBEBOOTP_DOCKER_BUILD_ARGS+=(--build-arg \"FROM_UBUNTU_VERSION=$from_ubuntu_version\")\n+        print_note \"Image based on Ubuntu docker image version $from_ubuntu_version\"\n+    fi\n+}\n",
          "commitId": "07c8c17223e4c932c0fe34c7f519686acdd08961"
        }
      ]
    },
    {
      "id": "7e4525e1e2833ee7b93246986352cef2ee86a879",
      "title": "[target/build] Add target_docker_build_* hooks",
      "created_at": "2018-01-26T08:35:45.000Z",
      "message": "[target/build] Add target_docker_build_* hooks\n",
      "author_name": "Emeric Verschuur",
      "diffs": [
        {
          "id": 3542,
          "oldPath": "README.md",
          "newPath": "README.md",
          "newFile": false,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -102,6 +102,18 @@ VOLUME /etc/nginx /var/www\n \n IMPORTANT NOTE, for final/bootable image, not required for intermediate one: you have to install a valid kernel image (like linux-image-generic)\n \n+Optionally, you can add custom docker build hooks to perfom additional actions before and after the `docker build` by adding a file `targets/my-target-name/build-hooks.sh` following this model:\n+```bash\n+target_docker_build_before() {\n+    echo \"Executed before docker build, useful to perform some action that cannot be performed into the Dockerfile\"\n+}\n+\n+target_docker_build_after() {\n+    echo \"Executed before docker build, useful to perform some action like temporary files cleanup\"\n+}\n+\n+```\n+\n ### Target creation step 3: startup script (optional)\n This part explain how to add start script to perform some custom initialization. The global LiveBOOTP process is stored into the file list `targets/base/startup.d/XX*.sh`\n \n",
          "commitId": "7e4525e1e2833ee7b93246986352cef2ee86a879"
        },
        {
          "id": 3543,
          "oldPath": "tools/gitlab-ci/run.d/target-build.sh",
          "newPath": "tools/gitlab-ci/run.d/target-build.sh",
          "newFile": false,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -1,6 +1,24 @@\n \n citbx_use \"dockerimg\"\n \n+target_build_exec_hook() {\n+    local hook_function=$1\n+    shift\n+    if [ -f \"targets/$LIBEBOOTP_TARGET_IMAGE_NAME/build-hooks.sh\" ]; then\n+        cd targets/$LIBEBOOTP_TARGET_IMAGE_NAME\n+        source \"build-hooks.sh\"\n+        if [[ \"$(type -t $hook_function)\" == \"function\" ]]; then\n+            $hook_function \"$@\"\n+        else\n+            print_note \"HOOK[$hook_function]: Function $hook_function not found, skipping this hook\"\n+        fi\n+    else\n+        print_note \"HOOK[$hook_function]: File targets/$LIBEBOOTP_TARGET_IMAGE_NAME/build-hooks.sh not found, skipping this hook\"\n+        return\n+    fi\n+    cd \"$CI_PROJECT_DIR\"\n+}\n+\n job_setup() {\n     # Only on workstation, set the suitable tag prefix if not set\n     local job_prefix=${CI_JOB_NAME%-build}\n@@ -24,24 +42,26 @@ job_main() {\n                         \"    --image-tag $LIBEBOOTP_TARGET_IMAGE_NAME/x.y.z\"\n     fi\n     LIBEBOOTP_TARGET_IMAGE_NAME=${LIBEBOOTP_TARGET_IMAGE_NAME#target-}\n-    LIBEBOOTP_TARGET_IMAGE_VERS=${CI_COMMIT_TAG#${CI_JOB_NAME%-build}/}\n-    LIBEBOOTP_CI_REGISTRY_IMAGE_TAG=\"$CI_REGISTRY_IMAGE/$LIBEBOOTP_TARGET_IMAGE_NAME:$LIBEBOOTP_TARGET_IMAGE_VERS\"\n+    LIBEBOOTP_TARGET_IMAGE_VERSION=${CI_COMMIT_TAG#${CI_JOB_NAME%-build}/}\n+    LIBEBOOTP_TARGET_IMAGE_TAG=\"$CI_REGISTRY_IMAGE/$LIBEBOOTP_TARGET_IMAGE_NAME:$LIBEBOOTP_TARGET_IMAGE_VERSION\"\n     # Build docker image\n-    LIBEBOOTP_DOCKER_BUILD_ARGS=(-t \"$LIBEBOOTP_CI_REGISTRY_IMAGE_TAG\")\n     if [ \"$LIBEBOOTP_TARGET_IMAGE_NAME\" != \"base\" ]; then\n         LIBEBOOTP_DOCKER_BUILD_ARGS+=(--build-arg \"CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE\")\n     fi\n+    target_build_exec_hook target_docker_build_before\n+    LIBEBOOTP_DOCKER_BUILD_ARGS+=(-t \"$LIBEBOOTP_TARGET_IMAGE_TAG\")\n     docker build \"${LIBEBOOTP_DOCKER_BUILD_ARGS[@]}\" \\\n         \"targets/$LIBEBOOTP_TARGET_IMAGE_NAME/\"\n     if [ -n \"$CI_BUILD_TOKEN\" ]; then\n         docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY\n-        docker push \"$LIBEBOOTP_CI_REGISTRY_IMAGE_TAG\"\n+        docker push \"$LIBEBOOTP_TARGET_IMAGE_TAG\"\n     fi\n }\n \n job_after() {\n     local retcode=$1\n+    target_build_exec_hook target_docker_build_after $1\n     if [ $retcode -eq 0 ]; then\n-        print_info \"Image \\\"$LIBEBOOTP_CI_REGISTRY_IMAGE_TAG\\\" successfully generated\"\n+        print_info \"Image \\\"$LIBEBOOTP_TARGET_IMAGE_TAG\\\" successfully generated\"\n     fi\n }\n",
          "commitId": "7e4525e1e2833ee7b93246986352cef2ee86a879"
        }
      ]
    },
    {
      "id": "020f1bb7ce3a32e24e69093c3f2d09536592f708",
      "title": "Merge branch 'remove-kernel-from-base' into 'master'",
      "created_at": "2018-01-25T13:52:36.000Z",
      "message": "Merge branch 'remove-kernel-from-base' into 'master'\n\n[target/base] Remove Linux kernel image installation\n\nSee merge request ercom/livebootp!2",
      "author_name": "Stephane Bausseron",
      "diffs": [
        {
          "id": 3544,
          "oldPath": "README.md",
          "newPath": "README.md",
          "newFile": false,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -92,10 +92,16 @@ For our example, we will create a file `targets/nginx-web-server/Dockerfile` con\n ARG CI_REGISTRY_IMAGE\n FROM $CI_REGISTRY_IMAGE/base:test\n \n-RUN apt update && apt install -y nginx\n+RUN apt update &&                                 \\\n+    DEBIAN_FRONTEND=noninteractive apt install -y \\\n+        nginx                                     \\\n+        linux-image-generic\n+\n VOLUME /etc/nginx /var/www\n ```\n \n+IMPORTANT NOTE, for final/bootable image, not required for intermediate one: you have to install a valid kernel image (like linux-image-generic)\n+\n ### Target creation step 3: startup script (optional)\n This part explain how to add start script to perform some custom initialization. The global LiveBOOTP process is stored into the file list `targets/base/startup.d/XX*.sh`\n \n",
          "commitId": "020f1bb7ce3a32e24e69093c3f2d09536592f708"
        },
        {
          "id": 3545,
          "oldPath": "targets/base/CHANGELOG.md",
          "newPath": "targets/base/CHANGELOG.md",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,7 @@\n+# Cangelog\n+\n+## 1.1.0\n+* [target/base] Remove Linux kernel image installation to be able to install a custom image on the final image targets\n+\n+## 1.0.0\n+* Initial version\n",
          "commitId": "020f1bb7ce3a32e24e69093c3f2d09536592f708"
        },
        {
          "id": 3546,
          "oldPath": "targets/base/Dockerfile",
          "newPath": "targets/base/Dockerfile",
          "newFile": false,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -9,14 +9,12 @@ RUN apt update && \\\n     gawk                                          \\\n     tftp-hpa                                      \\\n     live-boot                                     \\\n-    live-boot-initramfs-tools                     \\\n-    linux-image-generic\n+    live-boot-initramfs-tools\n \n ADD initramfs/livebootp-hook /etc/initramfs-tools/hooks/\n RUN mkdir /etc/initramfs-tools/patches\n ADD initramfs/9990-misc-helpers.sh.patch /etc/initramfs-tools/patches/\n RUN chmod +x /etc/initramfs-tools/hooks/livebootp-hook\n-RUN update-initramfs -u\n \n RUN mkdir -p /etc/livebootp\n ADD functions.sh /etc/livebootp/functions.sh\n",
          "commitId": "020f1bb7ce3a32e24e69093c3f2d09536592f708"
        },
        {
          "id": 3547,
          "oldPath": "tools/gitlab-ci/run.d/target-mksquashfs.sh",
          "newPath": "tools/gitlab-ci/run.d/target-mksquashfs.sh",
          "newFile": false,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -45,8 +45,16 @@ job_main() {\n     fi\n     # Extract vmlinuz & initrd.img files\n     mkdir -p $LIBEBOOTP_IMAGE_PATH\n-    sudo mv rootfs/boot/vmlinuz-*-generic $LIBEBOOTP_IMAGE_PATH/vmlinuz\n-    sudo mv rootfs/boot/initrd.img-*-generic $LIBEBOOTP_IMAGE_PATH/initrd.img\n+    local vmlinuz_file=$(find rootfs/boot/ -type f -name \"vmlinuz-*\")\n+    if [ -z \"$vmlinuz_file\" ]; then\n+        print_critical \"You must have one kernel image installed (e.g.: linux-image-generic) into the docker image\"\n+    fi\n+    if [ \"$(wc -l <<< \"$vmlinuz_file\")\" -ne 1 ]; then\n+        print_critical \"You cannot have more than one kernel image installed into the docker image\"\n+    fi\n+    local kernel_version=${vmlinuz_file:20}\n+    sudo mv rootfs/boot/vmlinuz-$kernel_version $LIBEBOOTP_IMAGE_PATH/vmlinuz\n+    sudo mv rootfs/boot/initrd.img-$kernel_version $LIBEBOOTP_IMAGE_PATH/initrd.img\n     if [ -f \"rootfs/boot/livebootp-cmdline\" ]; then\n         sudo mv rootfs/boot/livebootp-cmdline $LIBEBOOTP_IMAGE_PATH/cmdline\n     fi\n",
          "commitId": "020f1bb7ce3a32e24e69093c3f2d09536592f708"
        }
      ]
    },
    {
      "id": "35518e3b8c7dbccd4aa2abf2d39e91db81fd250c",
      "title": "[target/base] Remove Linux kernel image installation to be able to install a custom image on the final image targets",
      "created_at": "2018-01-23T15:05:55.000Z",
      "message": "[target/base] Remove Linux kernel image installation to be able to install a custom image on the final image targets\n",
      "author_name": "Emeric Verschuur",
      "diffs": [
        {
          "id": 3548,
          "oldPath": "README.md",
          "newPath": "README.md",
          "newFile": false,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -92,10 +92,16 @@ For our example, we will create a file `targets/nginx-web-server/Dockerfile` con\n ARG CI_REGISTRY_IMAGE\n FROM $CI_REGISTRY_IMAGE/base:test\n \n-RUN apt update && apt install -y nginx\n+RUN apt update &&                                 \\\n+    DEBIAN_FRONTEND=noninteractive apt install -y \\\n+        nginx                                     \\\n+        linux-image-generic\n+\n VOLUME /etc/nginx /var/www\n ```\n \n+IMPORTANT NOTE, for final/bootable image, not required for intermediate one: you have to install a valid kernel image (like linux-image-generic)\n+\n ### Target creation step 3: startup script (optional)\n This part explain how to add start script to perform some custom initialization. The global LiveBOOTP process is stored into the file list `targets/base/startup.d/XX*.sh`\n \n",
          "commitId": "35518e3b8c7dbccd4aa2abf2d39e91db81fd250c"
        },
        {
          "id": 3549,
          "oldPath": "targets/base/CHANGELOG.md",
          "newPath": "targets/base/CHANGELOG.md",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,7 @@\n+# Cangelog\n+\n+## 1.1.0\n+* [target/base] Remove Linux kernel image installation to be able to install a custom image on the final image targets\n+\n+## 1.0.0\n+* Initial version\n",
          "commitId": "35518e3b8c7dbccd4aa2abf2d39e91db81fd250c"
        },
        {
          "id": 3550,
          "oldPath": "targets/base/Dockerfile",
          "newPath": "targets/base/Dockerfile",
          "newFile": false,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -9,14 +9,12 @@ RUN apt update && \\\n     gawk                                          \\\n     tftp-hpa                                      \\\n     live-boot                                     \\\n-    live-boot-initramfs-tools                     \\\n-    linux-image-generic\n+    live-boot-initramfs-tools\n \n ADD initramfs/livebootp-hook /etc/initramfs-tools/hooks/\n RUN mkdir /etc/initramfs-tools/patches\n ADD initramfs/9990-misc-helpers.sh.patch /etc/initramfs-tools/patches/\n RUN chmod +x /etc/initramfs-tools/hooks/livebootp-hook\n-RUN update-initramfs -u\n \n RUN mkdir -p /etc/livebootp\n ADD functions.sh /etc/livebootp/functions.sh\n",
          "commitId": "35518e3b8c7dbccd4aa2abf2d39e91db81fd250c"
        },
        {
          "id": 3551,
          "oldPath": "tools/gitlab-ci/run.d/target-mksquashfs.sh",
          "newPath": "tools/gitlab-ci/run.d/target-mksquashfs.sh",
          "newFile": false,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -45,8 +45,16 @@ job_main() {\n     fi\n     # Extract vmlinuz & initrd.img files\n     mkdir -p $LIBEBOOTP_IMAGE_PATH\n-    sudo mv rootfs/boot/vmlinuz-*-generic $LIBEBOOTP_IMAGE_PATH/vmlinuz\n-    sudo mv rootfs/boot/initrd.img-*-generic $LIBEBOOTP_IMAGE_PATH/initrd.img\n+    local vmlinuz_file=$(find rootfs/boot/ -type f -name \"vmlinuz-*\")\n+    if [ -z \"$vmlinuz_file\" ]; then\n+        print_critical \"You must have one kernel image installed (e.g.: linux-image-generic) into the docker image\"\n+    fi\n+    if [ \"$(wc -l <<< \"$vmlinuz_file\")\" -ne 1 ]; then\n+        print_critical \"You cannot have more than one kernel image installed into the docker image\"\n+    fi\n+    local kernel_version=${vmlinuz_file:20}\n+    sudo mv rootfs/boot/vmlinuz-$kernel_version $LIBEBOOTP_IMAGE_PATH/vmlinuz\n+    sudo mv rootfs/boot/initrd.img-$kernel_version $LIBEBOOTP_IMAGE_PATH/initrd.img\n     if [ -f \"rootfs/boot/livebootp-cmdline\" ]; then\n         sudo mv rootfs/boot/livebootp-cmdline $LIBEBOOTP_IMAGE_PATH/cmdline\n     fi\n",
          "commitId": "35518e3b8c7dbccd4aa2abf2d39e91db81fd250c"
        }
      ]
    },
    {
      "id": "c2dfb61705e1965780836c2fc15633c7ad0709e5",
      "title": "Merge branch 'initial-release' into 'master'",
      "created_at": "2018-01-22T09:24:49.000Z",
      "message": "Merge branch 'initial-release' into 'master'\n\nProject initialization\n\nSee merge request ercom/livebootp!1",
      "author_name": "Stephane Bausseron",
      "diffs": [
        {
          "id": 3558,
          "oldPath": "bootp-registry/config/config-test.yml",
          "newPath": "bootp-registry/config/config-test.yml",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,12 @@\n+\n+bootp-registry:\n+    domain-name-servers:\n+        - 8.8.8.8\n+        - 9.9.9.9\n+\n+test-host:\n+    hardware-ethernet: \"52:54:00:12:34:56\"\n+    fixed-address: \"192.168.254.50\"\n+    image-name: generic/test\n+    ssh-authorized-keys: default\n+    cmdline-append: debug\n",
          "commitId": "c2dfb61705e1965780836c2fc15633c7ad0709e5"
        },
        {
          "id": 3552,
          "oldPath": ".gitignore",
          "newPath": ".gitignore",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,2 @@\n+artifacts\n+bootp-registry/config/config.yml\n",
          "commitId": "c2dfb61705e1965780836c2fc15633c7ad0709e5"
        },
        {
          "id": 3553,
          "oldPath": ".gitlab-ci.yml",
          "newPath": ".gitlab-ci.yml",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,80 @@\n+\n+stages:\n+  - build\n+  - mksquashfs\n+  - deploy\n+\n+bootp-registry:\n+  stage: build\n+  services:\n+  - name: registry.gitlab.com/ercom/docker:17.12.0-ce-dind\n+    alias: docker\n+  variables:\n+    DOCKER_DRIVER: overlay\n+    DOCKER_HOST: tcp://docker:2375\n+  image: registry.gitlab.com/ercom/docker:17.12.0-ce-git\n+  only:\n+    - /^bootp-registry\\/.*$/\n+  script:\n+    - tools/gitlab-ci/run.sh\n+\n+.target-build-template: &target-build-template\n+  stage: build\n+  services:\n+  - name: registry.gitlab.com/ercom/docker:17.12.0-ce-dind\n+    alias: docker\n+  variables:\n+    DOCKER_DRIVER: overlay\n+    DOCKER_HOST: tcp://docker:2375\n+    CITBX_JOB_RUN_FILE_NAME: target-build.sh\n+  image: registry.gitlab.com/ercom/docker:17.12.0-ce-git\n+  #With Gitlab 10.5\n+  #expression:\n+    #- $CI_COMMIT_TAG ~= /^\\$CI_JOB_NAME\\/.*$/\n+  script:\n+    - tools/gitlab-ci/run.sh\n+\n+.target-mksquashfs-template: &target-mksquashfs-template\n+  stage: mksquashfs\n+  services:\n+  - name: registry.gitlab.com/ercom/docker:17.12.0-ce-dind\n+    alias: docker\n+  variables:\n+    DOCKER_DRIVER: overlay\n+    DOCKER_HOST: tcp://docker:2375\n+    CITBX_JOB_RUN_FILE_NAME: target-mksquashfs.sh\n+  image: registry.gitlab.com/ercom/docker:17.12.0-ce-git\n+  #With Gitlab 10.5\n+  #expression:\n+    #- $CI_COMMIT_TAG ~= /^\\$CI_JOB_NAME\\/.*$/\n+  script:\n+    - tools/gitlab-ci/run.sh\n+  artifacts:\n+    paths:\n+      - artifacts\n+    expire_in: 1 day\n+\n+target-base-build:\n+  only:\n+    - /^target-base\\/.*$/\n+  <<: *target-build-template\n+\n+#target-my-target-name-build:\n+  #only:\n+    #- /^target-my-target-name\\/.*$/\n+  #<<: *target-build-template\n+\n+#target-my-target-name-mksquashfs:\n+  #only:\n+    #- /^target-my-target-name\\/.*$/\n+  #<<: *target-mksquashfs-template\n+\n+#########################################\n+#                                       #\n+#             SPECIFIC PART             #\n+#                                       #\n+# ### DO NOT MODIFY THE ABOVE LINES ### #\n+# ###  AND KEEP THIS INSERT AS IS   ### #\n+# ###   TO FACILITATE GIT REBASE    ### #\n+#                                       #\n+#########################################\n",
          "commitId": "c2dfb61705e1965780836c2fc15633c7ad0709e5"
        },
        {
          "id": 3554,
          "oldPath": "README.md",
          "newPath": "README.md",
          "newFile": false,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -1 +1,269 @@\n-## PXE image builder\n+# LiveBOOTP\n+\n+The LiveBOOTP project is a solution in two parts:\n+* The BOOTP registry\n+* Targets images\n+\n+## Table of Contents\n+\n+* [Target image creation](#target-image-creation)\n+    * [Target creation step 1: Gitlab-CI job creation](#target-creation-step-1-gitlab-ci-job-creation)\n+    * [Target creation step 2: Docker file creation](#target-creation-step-2-docker-file-creation)\n+    * [Target creation step 3: startup script (optional)](#target-creation-step-3-startup-script-optional)\n+    * [Generic startup process](#generic-startup-process)\n+    * [Add custom startup script](#add-custom-startup-script)\n+    * [How to build the target](#how-to-build-the-target)\n+* [The BOOTP registry](#the-bootp-registry)\n+    * [How to build the registry](#how-to-build-the-registry)\n+    * [How to setup the registry](#how-to-setup-the-registry)\n+    * [How to start a registry on your workstation](#how-to-start-a-registry-on-your-workstation)\n+    * [Setup target virtual machine](#setup-target-virtual-machine)\n+    * [How to deploy the registry](#how-to-deploy-the-registry)\n+* [Annexes](#annexes)\n+    * [RC.local: useful functions](#rclocal-useful-functions)\n+        * [print_critical](#print_critical)\n+        * [print_error](#print_error)\n+        * [print_note](#print_note)\n+        * [print_info](#print_info)\n+        * [fetch_url](#fetch_url)\n+        * [get_cmdline_param](#get_cmdline_param)\n+        * [is_mounted](#is_mounted)\n+        * [is_identical_file](#is_identical_file)\n+        * [add_pertistant_storage](#add_pertistant_storage)\n+    * [LibeBOOTP kernel parameters](#libebootp-kernel-parameters)\n+        * [debug](#debug)\n+        * [fetch-curl-allow-insecure](#fetch-curl-allow-insecure)\n+        * [root-password-disabled](#root-password-disabled)\n+    * [The ci-toolbox command](#the-ci-toolbox-command)\n+\n+## Target image creation\n+Each target image is generated using a simple way (Dockerfile based format) and produce, for each version, a set of file: kernel image + initrd + squashfs filesystem\n+\n+You can create a new target in tree steps. To illustrate with an example, wee will create a nginx web server image named `nginx-web-server`.\n+\n+There is two type of target image:\n+* **Intermediate image**: Used as base image by several targets\n+* **Final image**: image to deploy\n+\n+### Target creation step 1: Gitlab-CI job creation\n+The first step is to add the new job into the `.gitlab-ci.yml` file.\n+\n+There are tree steps to the image generation & deployment:\n+* 1: **Image build (intermediate and final images)**: Build the image and store it into the registry\n+* 2: **SquashFS image generation (final images specific)**: Extract SquashFS and kernel image from the docker image\n+* 3: **Image deployment to the BOOTP registries (final images specific)**: This step is specific and must be designed depending on your IT environment\n+\n+The job format must follow this model (only the two first steps will be documented here):\n+```yaml\n+target-my-target-name-build:\n+  only:\n+    - /^target-my-target-name\\/.*$/\n+  <<: *target-build-template\n+\n+target-my-target-name-mksquashfs:\n+  only:\n+    - /^target-my-target-name\\/.*$/\n+  <<: *target-mksquashfs-template\n+```\n+\n+For our example, we will create the following job:\n+```yaml\n+target-nginx-web-server-build:\n+  only:\n+    - /^target-nginx-web-server\\/.*$/\n+  <<: *target-build-template\n+\n+target-nginx-web-server-mksquashfs:\n+  only:\n+    - /^target-nginx-web-server\\/.*$/\n+  <<: *target-mksquashfs-template\n+```\n+\n+### Target creation step 2: Docker file creation\n+The target image is built from `targets/my-target-name/Dockerfile`.\n+\n+The Dockerfile supported commands are: `FROM`, `RUN`, `ADD`, `COPY`, `ENV`, `WORKDIR` and `VOLUME`. The other commands will don't have any effect.\n+\n+* __Note 1:__ The image must be built `FROM` the `$CI_REGISTRY_IMAGE/base:version` or derivated image (where CI_REGISTRY_IMAGE contains your-registry.domain/group/your-bootp-project)\n+* __Note 2:__ for each declared volume with `VOLUME` Dockerfile keyword, a persistant data directory will be created (using `add_pertistant_storage \"/your/volume\" bind copy`, see [here](#add_pertistant_storage) for more details).\n+\n+For our example, we will create a file `targets/nginx-web-server/Dockerfile` containing:\n+```Dockerfile\n+ARG CI_REGISTRY_IMAGE\n+FROM $CI_REGISTRY_IMAGE/base:test\n+\n+RUN apt update && apt install -y nginx\n+VOLUME /etc/nginx /var/www\n+```\n+\n+### Target creation step 3: startup script (optional)\n+This part explain how to add start script to perform some custom initialization. The global LiveBOOTP process is stored into the file list `targets/base/startup.d/XX*.sh`\n+\n+#### Generic startup process\n+The generic startup process (regrouped into the files `targets/base/startup.d/XX_*.sh`):\n+* [Once: first boot] Persistant storage initialization:\n+    + Create (if doesn't exists) and mount the persistant storage device\n+    + Setup SSH host keys\n+* [Once: first boot] Setup a new set of ssh_host_* key files for the SSH server\n+* [Always: each boot] Setup the hostname from the hostname given by the bootp-registry\n+* [Always: each boot] Fetch and setup the root authorized_keys specified by the bootp-registry\n+\n+#### Add custom startup script\n+You can add your own script, e.g.: `targets/nginx-web-server/startup-process.sh`\n+\n+And add a line like :\n+```Dockerfile\n+ADD startup-process.sh /etc/livebootp/startup.d/50-my-custom-startup-process.sh\n+```\n+in your `targets/nginx-web-server/Dockerfile`\n+\n+#### How to build the target\n+* With Gitlab-CI: create a tag under the following format: `target-my-target-name/x.y.z` where x.y.z is the version number. The gitlab-ci job is triggered only on tags with the prefix `target-my-target-name/`\n+* On your workstation: with the [ci-toolbox](#the-ci-toolbox-command) command like this: `ci-toolbox target-my-target-name-mksquashfs` (in addition you can use `--image-tag` parameter to customize version)\n+\n+The generated files will be available in the `artifacts/my-target-name/x.y.z/` directory\n+\n+## The BOOTP registry\n+The BOOTP registry is based on a docker image containing a DHCP and TFTP server where the configuration of all the service is centralized into a very basic YAML file.\n+\n+### How to build the registry\n+* With Gitlab-CI: create a tag under the following format: `bootp-registry/x.y.z` where x.y.z is the version number. The gitlab-ci job is triggered only on tags with the prefix `bootp-registry/`\n+* On your workstation: with the [ci-toolbox](#the-ci-toolbox-command) command like this: `ci-toolbox bootp-registry` (in addition you can use `--image-tag` parameter to customize version)\n+\n+### How to setup the registry\n+\n+The [config-default.yml](bootp-registry/config/config-default.yml) configuration file contains the full configuration schema with a documentation for each properties.\n+\n+For our example we have to define the file `bootp-registry/config/config.yml` with the following content:\n+```yaml\n+bootp-registry:\n+    domain-name-servers:\n+        - 8.8.8.8\n+        - 8.8.4.4\n+\n+my-nginx-web-server:\n+    hardware-ethernet: \"52:54:00:12:34:56\"\n+    fixed-address: \"192.168.254.50\"\n+    image-name: nginx-web-server/test\n+    ssh-authorized-keys: default\n+    cmdline-append: debug\n+```\n+\n+For the bootp-registry:\n+* On many distributions, all the `bootp-registry` parameters can be auto detected. In this case, we have just overloaded the domain-name-servers due to some distributions like Ubuntu which contains a local DNS cache not accessible outside the local host.\n+\n+We have defined a host block for our nginx web server:\n+* **Host name** (`block key name`): my-nginx-web-server\n+* **MAC address** (`hardware-ethernet`): 52:54:00:12:34:56 (may be customized when we will create the test target virtual machine)\n+* **IP address** (`fixed-address`): 192.168.254.50\n+* **Image name** (`image-name`): nginx-web-server/test (If you have generated your image using a custom version `--image-tag x.y.z`, set `nginx-web-server/x.y.z` here)\n+* **SSH authorized-keys file** (`ssh-authorized-keys`): default (For this test, don't change this value: the `bootp-registry/start-registry-devtool.sh` script used in the following part will mount your local `~/.ssh/id_rsa.pub` as `/var/lib/tftpboot/ssh_authorized_keys/default` into the `bootp-registry` docker)\n+* **[OPTIONAL] Append kernel parameters** (`cmdline-append`): We have append `debug` property to the kernel parameter to add debug info, see [here](#debug) for more information.\n+\n+### How to start a registry on your workstation\n+You can run the registry on your local workstation to perform some test on the generated target images.\n+\n+You can start the registry on your local workstation using the command:\n+```bash\n+$ bootp-registry/start-registry-devtool.sh registry.gitlab.com/ercom/livebootp/bootp-registry:your-test-version\n+```\n+\n+On the start process, an info message with `You have to use the bridge br-xxxxxxxxxxxx` where `br-xxxxxxxxxxxx` is the bridge to use for your test target virtual machine.\n+\n+### Setup target virtual machine\n+libvirt is highly recommended here !\n+\n+To setup the test virtual machine with libvirt, simply run:\n+```bash\n+$ virt-install --name my-nginx-web-server --vcpus 1 --memory 1024 \\\n+    --pxe --disk size=10 --boot network --os-variant ubuntu16.04 \\\n+    --network bridge=br-xxxxxxxxxxxx,model=virtio,mac=52:54:00:12:34:56 \\\n+    --noreboot --noautoconsole --wait 0\n+```\n+\n+Otherwith, you have to create manually a test virtual machine with the following properties:\n+* An network interface bridged on `br-xxxxxxxxxxxx`\n+* Start process setup on network (PXE)\n+* The hardware address must be the same than the `my-nginx-web-server.hardware-ethernet` in the `bootp-registry/config/config.yml` file\n+\n+NOTE: VirtualBox guest PXE client is not fully fonctional with this solution for now\n+\n+### How to deploy the registry\n+\n+In the first time, you have to prepare your environment:\n+* `/opt/bootp-registry/config` must contains your production config.yml file\n+* `/opt/bootp-registry/images` is the directory where you have to deploy your images\n+* `/opt/bootp-registry/ssh-authorized-keys` is the directory where you have to put the ssh authorized keys files\n+\n+Note: you can customize the paths on the host side (/opt/bootp-registry/...)\n+\n+You can now start the registry like this:\n+```bash\n+$ docker run --name bootp-registry -d --tmpfs /var/run \\\n+    -v /opt/bootp-registry/config:/opt/livebootp/etc \\\n+    -v /opt/bootp-registry/images:/var/lib/tftpboot/images \\\n+    -v /opt/bootp-registry/ssh-authorized-keys:/var/lib/tftpboot/ssh_authorized_keys \\\n+    --network host registry.gitlab.com/ercom/livebootp/bootp-registry:release-version\n+```\n+\n+Note: `--network host` is used here to bind directly on the host ethernet interface.\n+\n+## Annexes\n+\n+### RC.local: useful functions\n+\n+#### print_critical\n+Print error message and exit\n+* argument 1: Message\n+\n+#### print_error\n+Print error message\n+* argument 1: Message\n+\n+#### print_note\n+print note message\n+* argument 1: Message\n+\n+#### print_info\n+Print info message\n+* argument 1: Message\n+\n+#### fetch_url\n+Fetch a resource\n+* argument 1: URL\n+* argument 2: target file path\n+\n+#### get_cmdline_param\n+Get a /proc/cmdline parameter\n+* argument 1: parameter name\n+\n+#### is_mounted\n+Test if mount point is active\n+* argument 1: target mount point\n+\n+#### is_identical_file\n+Test if two files have the same content\n+* argument 1: file 1\n+* argument 2: file 2\n+\n+#### add_pertistant_storage\n+Add a persistant storage\n+* argument 1: target mount point (e.g.: /var/www)\n+* argument 2: persistant storage format (accepted values: bind (default) and unionfs)\n+* argument 3 *only applicable for `bind` persistant storage format*: Initialization method (accepted values: copy (default) and none)\n+\n+### LibeBOOTP kernel parameters\n+\n+#### debug\n+This parameter enable debug output into the files:\n+* /var/log/live/boot.log: Ubuntu liveboot process\n+* /var/log/live/livebootp-startup.log: Startup process\n+\n+#### fetch-curl-allow-insecure\n+Allow to fetch resources on unsecure HTTPS server.\n+\n+#### root-password-disabled\n+Disable root password. Useful to debug startup scripts.\n+\n+### The ci-toolbox command\n+The `ci-toolbox` command is a tool, provided by the `tools/gitlab-ci/run.sh setup` execution, to run Gitlab-CI jobs on your local workstation (see the [project page](https://gitlab.com/ercom/citbx4gitlab) for more information)\n",
          "commitId": "c2dfb61705e1965780836c2fc15633c7ad0709e5"
        },
        {
          "id": 3555,
          "oldPath": "bootp-registry/Dockerfile",
          "newPath": "bootp-registry/Dockerfile",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,30 @@\n+FROM alpine:3.7\n+\n+RUN apk add --no-cache \\\n+    openrc             \\\n+    nginx              \\\n+    dhcp               \\\n+    tftp-hpa           \\\n+    rsyslog            \\\n+    tar                \\\n+    xz                 \\\n+    jq                 \\\n+    bash               \\\n+    gawk               \\\n+    python             \\\n+    py-yaml\n+\n+ADD https://www.kernel.org/pub/linux/utils/boot/syslinux/syslinux-6.03.tar.xz /tmp/syslinux.tar.xz\n+RUN adduser -S -s /bin/nologin -h /var/lib/tftpboot -D tftp\n+RUN tar -C /var/lib/tftpboot/ --owner=0 --group=0            \\\n+        -xf /tmp/syslinux.tar.xz --transform='s|.*/||'       \\\n+        syslinux-6.03/bios/core/pxelinux.0                   \\\n+        syslinux-6.03/bios/com32/elflink/ldlinux/ldlinux.c32 \\\n+        syslinux-6.03/bios/com32/libutil/libutil.c32         \\\n+        syslinux-6.03/bios/com32/menu/menu.c32 &&            \\\n+    chmod +r /var/lib/tftpboot/* &&                          \\\n+    rm /tmp/syslinux.tar.xz\n+\n+ADD bootp-registry/bootp-registry-ctl.sh /opt/livebootp/bootp-registry-ctl.sh\n+EXPOSE 69/udp 67/udp\n+CMD [\"/opt/livebootp/bootp-registry-ctl.sh\", \"start\"]\n",
          "commitId": "c2dfb61705e1965780836c2fc15633c7ad0709e5"
        },
        {
          "id": 3556,
          "oldPath": "bootp-registry/bootp-registry-ctl.sh",
          "newPath": "bootp-registry/bootp-registry-ctl.sh",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,290 @@\n+#!/bin/bash -e\n+\n+# Print an error message and exit with error status 1\n+print_critical() {\n+    >&2 printf \"\\e[91m[CRIT] %s\\e[0m\\n\" \"$@\"\n+    exit 1\n+}\n+\n+# Print an error message\n+print_error() {\n+    >&2 printf \"\\e[91m[ERRO] %s\\e[0m\\n\" \"$@\"\n+}\n+\n+# Print a warning message\n+print_warning() {\n+    >&2 printf \"\\e[93m[WARN] %s\\e[0m\\n\" \"$@\"\n+}\n+\n+# Print a note message\n+print_note() {\n+    printf \"[NOTE] %s\\n\" \"$@\"\n+}\n+\n+# Print an info message\n+print_info() {\n+    printf \"\\e[92m[INFO] %s\\e[0m\\n\" \"$@\"\n+}\n+\n+if [ ! -f /opt/livebootp/etc/config.yml ]; then\n+    print_critical \"File /opt/livebootp/etc/config.yml not found\"\n+fi\n+\n+# YAML to JSON conversion\n+LIVEBOOTP_CONFIG=\"$(cat /opt/livebootp/etc/config.yml \\\n+    | python -c 'import sys, yaml, json; json.dump(yaml.load(sys.stdin), sys.stdout)')\"\n+config_query() {\n+    jq \"$@\" <<< \"$LIVEBOOTP_CONFIG\"\n+}\n+print_info \"Read configuration file: /opt/livebootp/etc/config.yml\"\n+\n+# Read DNS property\n+if [ $(config_query -r '.\"bootp-registry\".\"domain-name-servers\" | length') -gt 0 ]; then\n+    LIVEBOOTP_DNS=($(config_query -r '.\"bootp-registry\".\"domain-name-servers\"[]'))\n+else\n+    LIVEBOOTP_DNS=($(cat /etc/resolv.conf | awk '/^nameserver/ {\n+            if ($2 !~ /^127\\..*/ && $2 != \"::1\" ) {\n+                printf(\" %s\", $2);\n+            }\n+        }' 2> /dev/null || true))\n+fi\n+if [ ${#LIVEBOOTP_DNS[@]} -eq 0 ]; then\n+    print_critical \"No valid DNS found: please provide .\"bootp-registry\".domain-name-servers config property\"\n+fi\n+print_note \"DNS list                     : ${LIVEBOOTP_DNS[*]}\"\n+\n+# Read domain name property\n+if [ $(config_query -r '.\"bootp-registry\".\"domain-name\" | length') -gt 0 ]; then\n+    LIVEBOOTP_DN=\"$(config_query -r '.\"bootp-registry\".\"domain-name\"')\"\n+else\n+    LIVEBOOTP_DN=\"example.com\"\n+fi\n+print_note \"Root domain name             : $LIVEBOOTP_DN\"\n+\n+# Read registry domain property\n+if [ $(config_query -r '.\"bootp-registry\".\"targets-domain-name\" | length') -gt 0 ]; then\n+    LIVEBOOTP_CN=\"$(config_query -r '.\"bootp-registry\".\"targets-domain-name\"')\"\n+else\n+    LIVEBOOTP_CN=\"bootp-registry.$LIVEBOOTP_DN\"\n+fi\n+print_note \"Registry domain name         : $LIVEBOOTP_CN\"\n+\n+# Read listen interface property\n+if [ $(config_query -r '.\"bootp-registry\".\"listen-intf\" | length') -gt 0 ]; then\n+    LIVEBOOTP_INTF=\"$(config_query -r '.\"bootp-registry\".\"listen-intf\"')\"\n+else\n+    LIVEBOOTP_INTF=\"$(ip -4 route show | awk '/^default / {print $5; exit;}')\"\n+fi\n+print_note \"Listen on interface          : $LIVEBOOTP_INTF\"\n+\n+# Read routers property\n+if [ $(config_query -r '.\"bootp-registry\".\"routers\" | length') -gt 0 ]; then\n+    LIVEBOOTP_ROUTER=($(config_query -r '.\"bootp-registry\".\"routers\"[]'))\n+else\n+    LIVEBOOTP_ROUTER=\"$(ip -4 route show | awk '/^default / {print $3; exit;}')\"\n+fi\n+print_note \"Using router                 : $LIVEBOOTP_ROUTER\"\n+\n+# Read bootp-registry address\n+if [ $(config_query -r '.\"bootp-registry\".address | length') -gt 0 ]; then\n+    LIVEBOOTP_ADDR=\"$(config_query -r '.\"bootp-registry\".address')\"\n+else\n+    LIVEBOOTP_ADDR=\"$(ip -4 addr show dev $LIVEBOOTP_INTF | awk '/^    inet / { print $2}')\"\n+fi\n+print_note \"Server adress                : $LIVEBOOTP_ADDR\"\n+\n+cdr2mask() {\n+   # Number of args to shift, 255..255, first non-255 byte, zeroes\n+   set -- $(( 5 - ($1 / 8) )) 255 255 255 255 $(( (255 << (8 - ($1 % 8))) & 255 )) 0 0 0\n+   [ $1 -gt 1 ] && shift $1 || shift\n+   echo ${1-0}.${2-0}.${3-0}.${4-0}\n+}\n+\n+netaddr() {\n+    IFS=. read -r i1 i2 i3 i4 <<< $1\n+    IFS=. read -r m1 m2 m3 m4 <<< $2\n+    printf \"%d.%d.%d.%d\\n\" \"$((i1 & m1))\" \"$((i2 & m2))\" \"$((i3 & m3))\" \"$((i4 & m4))\"\n+}\n+\n+# Get network mask\n+LIVEBOOTP_NETMASK=$(cdr2mask ${LIVEBOOTP_ADDR#*/})\n+print_note \"Server netmask               : $LIVEBOOTP_NETMASK\"\n+\n+# Get network adress\n+LIVEBOOTP_IP=${LIVEBOOTP_ADDR%/*}\n+LIVEBOOTP_NETADDR=$(netaddr $LIVEBOOTP_IP $LIVEBOOTP_NETMASK)\n+print_note \"Network adress               : $LIVEBOOTP_NETADDR\"\n+\n+# Read ssh keys url property\n+if [ $(config_query -r '.\"bootp-registry\".\"ssh-authorized-keys-base-url\" | length') -gt 0 ]; then\n+    LIVEBOOTP_SSH_AUTHORIZED_KEYS_BASE_URL=\"$(config_query -r '.\"bootp-registry\".\"ssh-authorized-keys-base-url\"')\"\n+else\n+    LIVEBOOTP_SSH_AUTHORIZED_KEYS_BASE_URL=\"http://$LIVEBOOTP_IP/ssh_authorized_keys\"\n+fi\n+print_note \"SSH authorized keys base URL : $LIVEBOOTP_SSH_AUTHORIZED_KEYS_BASE_URL\"\n+\n+# Read image url property\n+if [ $(config_query -r '.\"bootp-registry\".\"image-repo-url\" | length') -gt 0 ]; then\n+    LIVEBOOTP_SQUASHFS_REPO_URL=\"$(config_query -r '.\"bootp-registry\".\"image-repo-url\"')\"\n+else\n+    LIVEBOOTP_SQUASHFS_REPO_URL=\"http://$LIVEBOOTP_IP/images\"\n+fi\n+print_note \"SquashFS Image repo URL      : $LIVEBOOTP_SQUASHFS_REPO_URL\"\n+\n+LIVEBOOTP_DHCPD_CONF=\"/etc/dhcp/dhcpd.conf\"\n+LIVEBOOTP_TFTPROOT=\"/var/lib/tftpboot\"\n+LIVEBOOTP_SSH_HOST_CONFIG=\"$LIVEBOOTP_TFTPROOT/ssh_host_config.txt\"\n+LIVEBOOTP_PXELINCFG=\"$LIVEBOOTP_TFTPROOT/pxelinux.cfg\"\n+\n+# Generate dhcpd.conf head\n+cat > $LIVEBOOTP_DHCPD_CONF << EOF\n+ddns-update-style none;\n+option domain-name \"$LIVEBOOTP_DN\";\n+option domain-name-servers $(IFS=$','; echo \"${LIVEBOOTP_DNS[*]}\");\n+default-lease-time 3600;\n+max-lease-time 86400;\n+authoritative;\n+log-facility local7;\n+subnet $LIVEBOOTP_NETADDR netmask $LIVEBOOTP_NETMASK {\n+    option routers $(IFS=$','; echo \"${LIVEBOOTP_ROUTER[*]}\");\n+    next-server $LIVEBOOTP_IP;\n+    filename \"pxelinux.0\";\n+EOF\n+\n+URL_PATTERN='^\\w+://'\n+> \"$LIVEBOOTP_SSH_HOST_CONFIG\"\n+\n+for host in $(config_query -r '. | keys[]' | grep -E -v '^(^\\..*|bootp\\-registry)$'); do\n+    print_note \"Reading host $host...\"\n+    host_cfg_state=\"ok\"\n+    prefix=\".\\\"$host\\\"\"\n+    hwaddr=$(config_query -r \"$prefix\"'.\"hardware-ethernet\"')\n+    address=$(config_query -r \"$prefix\"'.\"fixed-address\"')\n+    image=$(config_query -r \"$prefix\"'.\"image-name\"')\n+    ssh_auth_keys=$(config_query -r \"$prefix\"'.\"ssh-authorized-keys\"')\n+    cmdline_append=$(config_query -r \"$prefix\"'.\"cmdline-append\"')\n+    persistence_disabled=$(config_query -r \"$prefix\"'.\"persistence-disabled\"')\n+    if [ \"$hwaddr\" != \"null\" ]; then\n+        print_note \" * HW address                      : $hwaddr\"\n+    else\n+        host_cfg_state=\"ko\"\n+        print_error \"Missing hardware-ethernet property\"\n+    fi\n+    if [ \"$address\" != \"null\" ]; then\n+        print_note \" * Fixed address                   : $address\"\n+    else\n+        host_cfg_state=\"ko\"\n+        print_error \"Missing fixed-address property\"\n+    fi\n+    if [ \"$host_cfg_state\" == \"ko\" ]; then\n+        print_warning \"Skipping this host due to previous errors\"\n+        continue\n+    fi\n+    cat >> $LIVEBOOTP_DHCPD_CONF << EOF\n+    host $host {\n+        hardware ethernet $hwaddr;\n+        fixed-address $address;\n+    }\n+EOF\n+    cat >> $LIVEBOOTP_SSH_HOST_CONFIG << EOF\n+Host $host\n+HostName $address\n+User root\n+\n+EOF\n+    if [ \"$image\" != \"null\" ]; then\n+        print_note \" * Image name                      : $image\"\n+        if [[ \"$image\" =~ $URL_PATTERN ]]; then\n+            image_url=\"$image\"\n+        else\n+            image_url=\"$LIVEBOOTP_SQUASHFS_REPO_URL/$image\"\n+        fi\n+    else\n+        print_warning \" * No image-name property found, skipping bootp part for this host...\"\n+        continue\n+    fi\n+    if [ \"$ssh_auth_keys\" != \"null\" ]; then\n+        print_note \" * SSH authorized keys file used   : $ssh_auth_keys\"\n+        if [[ \"$ssh_auth_keys\" =~ $URL_PATTERN ]]; then\n+            ssh_auth_keys_path=\"$ssh_auth_keys\"\n+        else\n+            ssh_auth_keys_path=\"$LIVEBOOTP_SSH_AUTHORIZED_KEYS_BASE_URL/$ssh_auth_keys\"\n+        fi\n+    else\n+        print_critical \"Missing ssh-authorized-keys property\"\n+    fi\n+    mkdir -p $LIVEBOOTP_TFTPROOT/pxelinux.cfg\n+    cat > \"$LIVEBOOTP_TFTPROOT/pxelinux.cfg/01-${hwaddr//:/-}\" << EOF\n+UI menu.c32\n+PROMPT 0\n+\n+MENU TITLE Boot Menu\n+TIMEOUT 10\n+DEFAULT liveboot\n+\n+LABEL liveboot\n+        MENU LABEL Live boot image $image\n+        LINUX images/$image/vmlinuz\n+        APPEND initrd=images/$image/initrd.img boot=live dhcp hostname=$host fetch=$image_url/rootfs.squashfs fetch-ssh-authorized-keys=$ssh_auth_keys_path $(test \"$persistence_disabled\" == \"true\" || echo \"persistence\") $cmdline_append $(test ! -f images/$image/cmdline || cat images/$image/cmdline | tr '\\n' ' ')\n+\n+EOF\n+done\n+echo \"}\" >> $LIVEBOOTP_DHCPD_CONF\n+\n+cat > /etc/nginx/conf.d/default.conf <<EOF\n+server {\n+        listen $LIVEBOOTP_IP:80;\n+\n+        root /var/lib/tftpboot;\n+        index index.html;\n+\n+        server_name $LIVEBOOTP_IP $LIVEBOOTP_CN;\n+\n+        location / {\n+                autoindex on;\n+                try_files \\$uri \\$uri/ =404;\n+        }\n+}\n+EOF\n+\n+# DHCP conf sanity check\n+if ! /usr/sbin/dhcpd -t -q -cf \"$LIVEBOOTP_DHCPD_CONF\" > /dev/null 2>&1; then\n+    print_critical \"dhcpd self-test failed. Please fix $LIVEBOOTP_DHCPD_CONF.\" \\\n+                \"The error was: $(/usr/sbin/dhcpd -t -cf \"$LIVEBOOTP_DHCPD_CONF\" 2>&1)\"\n+fi\n+touch /var/lib/dhcp/dhcpd.leases\n+print_info \"Read configuration file [DONE]\"\n+\n+LIVEBOOTP_DHCPD_PID=\"/run/dhcpd.pid\"\n+case \"$1\" in\n+    start)\n+        if [ -e \"/run/rsyslogd.pid\" ]; then\n+            print_critical \"Already started, please use rotate/reload action, otherwise restart docker instance\"\n+        fi\n+        start-stop-daemon --start --quiet --pidfile /run/rsyslogd.pid \\\n+                --exec /usr/sbin/rsyslogd --\n+        mkdir -p /run/nginx\n+        start-stop-daemon --start --quiet --pidfile /run/nginx/nginx.pid \\\n+                --exec /usr/sbin/nginx -- -c /etc/nginx/nginx.conf\n+        start-stop-daemon --start --quiet --exec /usr/sbin/in.tftpd -- \\\n+                --listen --user tftp --address $LIVEBOOTP_IP:69 \\\n+                --secure $LIVEBOOTP_TFTPROOT\n+        start-stop-daemon --start --quiet --pidfile \"$LIVEBOOTP_DHCPD_PID\" \\\n+                --exec /usr/sbin/dhcpd -- \\\n+                -cf \"$LIVEBOOTP_DHCPD_CONF\" -pf \"$LIVEBOOTP_DHCPD_PID\" $LIVEBOOTP_INTF\n+        while [ -e /run/rsyslogd.pid ]; do\n+            tail -f /var/log/messages\n+        done\n+        ;;\n+    rotate)\n+        start-stop-daemon --stop --signal HUP --quiet --pidfile /run/rsyslogd.pid \\\n+                --exec /usr/sbin/rsyslogd\n+        ;;\n+    reload)\n+        start-stop-daemon --stop --quiet --pidfile \"$LIVEBOOTP_DHCPD_PID\"\n+        sleep 2\n+        start-stop-daemon --start --quiet --pidfile \"$LIVEBOOTP_DHCPD_PID\" \\\n+                --exec /usr/sbin/dhcpd -- \\\n+                -cf \"$LIVEBOOTP_DHCPD_CONF\" -pf \"$LIVEBOOTP_DHCPD_PID\" $LIVEBOOTP_INTF\n+        ;;\n+esac\n",
          "commitId": "c2dfb61705e1965780836c2fc15633c7ad0709e5"
        },
        {
          "id": 3557,
          "oldPath": "bootp-registry/config/config-default.yml",
          "newPath": "bootp-registry/config/config-default.yml",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,69 @@\n+# BOOTP registry configuration\n+#bootp-registry:\n+#    # Domain name used by the DHCP server\n+#    # [Optional] Default value: 'search' property from /etc/resolv.conf file\n+#    domain-name: example.com\n+#\n+#    # Listen interface used by the DHCP server\n+#    # [Optional] Default value: network interface used by the default route\n+#    listen-intf: eth0\n+#\n+#    # Registry IP address and prefix\n+#    # [Optional] Default value: the first IP address on listen-intf\n+#    address: 192.168.254.254/24\n+#\n+#    # Gateway list\n+#    # [Optional] Default value: the system default route\n+#    routers:\n+#        - 192.168.254.1\n+#\n+#    # Domain name server list\n+#    # [Optional] Default value: 'nameserver' properties from /etc/resolv.conf file\n+#    domain-name-servers:\n+#        - 8.8.8.8\n+#        - 9.9.9.9\n+\n+# Host template example\n+#.host-generic: &host-generic\n+#    # Target image: image_name/image_version\n+#    # [Optional] Default value: empty\n+#    # If this value is empty, the registry will only provide an IP address to the host (without BOOTP)\n+#    image-name: generic/test\n+#\n+#    # SSH authorized file name for this host\n+#    # [Required if image-name is set]\n+#    ssh-authorized-keys: default\n+\n+# Host template extension example with debug option enable\n+#.host-generic-debug: &host-generic-debug\n+#    # Use host-generic template\n+#    <<: *host-generic\n+#\n+#    # Add vmlinuz kernel options\n+#    # [Optional] Default value: empty\n+#    cmdline-append: debug\n+\n+# Host definition example with BOOTP\n+#my-host-with-liveboot:\n+#\n+#    # MAC address for this host\n+#    # [Required]\n+#    hardware-ethernet: \"52:54:00:12:34:56\"\n+#\n+#    # IP address for this host\n+#    # [Required]\n+#    fixed-address: \"192.168.254.10\"\n+#\n+#    # Use host-generic template\n+#    <<: *host-generic\n+\n+# Host definition example without BOOTP\n+#my-host-without-liveboot:\n+#\n+#    # MAC address for this host\n+#    # [Required]\n+#    hardware-ethernet: \"52:54:00:12:34:99\"\n+#\n+#    # IP address for this host\n+#    # [Required]\n+#    fixed-address: \"192.168.254.20\"\n",
          "commitId": "c2dfb61705e1965780836c2fc15633c7ad0709e5"
        },
        {
          "id": 3559,
          "oldPath": "bootp-registry/start-registry-devtool.sh",
          "newPath": "bootp-registry/start-registry-devtool.sh",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,56 @@\n+#!/bin/sh -e\n+\n+# Print an error message and exit with error status 1\n+print_critical() {\n+    >&2 printf \"\\e[91m[CRIT] %s\\e[0m\\n\" \"$@\"\n+    exit 1\n+}\n+\n+# Print an info message\n+print_info() {\n+    printf \"\\e[92m[INFO] %s\\e[0m\\n\" \"$@\"\n+}\n+\n+# Print a warning message\n+print_warning() {\n+    >&2 printf \"\\e[93m[WARN] %s\\e[0m\\n\" \"$@\"\n+}\n+\n+IMAGE_NAME=$1\n+LIVEBOOTP_PROJECT_DIR=$(readlink -f $(dirname $0)/..)\n+\n+if [ -z \"$IMAGE_NAME\" ]; then\n+    print_critical \"Use $0: <bootp-registry image name>\"\n+fi\n+\n+if [ ! -f \"$LIVEBOOTP_PROJECT_DIR/bootp-registry/config/config.yml\" ]; then\n+    cp \"$LIVEBOOTP_PROJECT_DIR/bootp-registry/config/config-test.yml\" \"$LIVEBOOTP_PROJECT_DIR/bootp-registry/config/config.yml\"\n+    print_warning \"No $LIVEBOOTP_PROJECT_DIR/bootp-registry/config/config.yml found\" \\\n+                \"  A new $LIVEBOOTP_PROJECT_DIR/bootp-registry/config/config.yml configuration file will be generated using $LIVEBOOTP_PROJECT_DIR/bootp-registry/config/config-test.yml\" \\\n+                \"> You will have to edit the file $LIVEBOOTP_PROJECT_DIR/bootp-registry/config/config.yml and update:\" \\\n+                \"  * The 'hardware-ethernet' property with the test host MAC adress\" \\\n+                \"  * The 'image-name' property with the image/version to test\"\n+fi\n+\n+if ! docker network inspect livebootp > /dev/null 2>&1; then\n+    if ip -4 route | grep -q ^192.168.254; then\n+        print_critical \"Subnet 192.168.254.0/24 seems to be already used, please edit this script to choose an other one\"\n+    fi\n+    docker network create --subnet=192.168.254.0/24 livebootp\n+fi\n+\n+BRIDGE_NAME=\"br-$(docker network inspect livebootp | jq -r '.[0].Id[0:12]')\"\n+print_info \"Starting bootp registry...\" \\\n+    \" => You have to use the bridge $BRIDGE_NAME\" \\\n+    \"type 'docker exec bootp-registry /opt/livebootp/bootp-registry-ctl.sh reload' to reload the configuration\" \\\n+    \"> You can also setup a qemu guest with libvirt simply by running this command:\n+$ virt-install --connect qemu:///system --name my-target --vcpus 1 --memory 1024 \\\\\n+    --pxe --disk size=10 --boot network --os-variant ubuntu16.04 \\\\\n+    --network bridge=$BRIDGE_NAME,model=virtio,mac=52:54:00:12:34:56 \\\\\n+    --noreboot --noautoconsole --wait 0\"\n+set -x\n+exec docker run --name bootp-registry --rm -ti --tmpfs /var/run \\\n+    -v $LIVEBOOTP_PROJECT_DIR/bootp-registry/config:/opt/livebootp/etc \\\n+    -v $LIVEBOOTP_PROJECT_DIR/artifacts:/var/lib/tftpboot/images \\\n+    -v $HOME/.ssh/id_rsa.pub:/var/lib/tftpboot/ssh_authorized_keys/default \\\n+    --network livebootp \"$IMAGE_NAME\"\n",
          "commitId": "c2dfb61705e1965780836c2fc15633c7ad0709e5"
        },
        {
          "id": 3560,
          "oldPath": "targets/base/Dockerfile",
          "newPath": "targets/base/Dockerfile",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,28 @@\n+FROM ubuntu:16.04\n+\n+RUN apt update && \\\n+    DEBIAN_FRONTEND=noninteractive apt install -y \\\n+    ubuntu-standard                               \\\n+    openssh-server                                \\\n+    curl                                          \\\n+    vim                                           \\\n+    gawk                                          \\\n+    tftp-hpa                                      \\\n+    live-boot                                     \\\n+    live-boot-initramfs-tools                     \\\n+    linux-image-generic\n+\n+ADD initramfs/livebootp-hook /etc/initramfs-tools/hooks/\n+RUN mkdir /etc/initramfs-tools/patches\n+ADD initramfs/9990-misc-helpers.sh.patch /etc/initramfs-tools/patches/\n+RUN chmod +x /etc/initramfs-tools/hooks/livebootp-hook\n+RUN update-initramfs -u\n+\n+RUN mkdir -p /etc/livebootp\n+ADD functions.sh /etc/livebootp/functions.sh\n+ADD startup.sh /etc/livebootp/startup.sh\n+ADD cron.hourly.sh /etc/cron.hourly/livebootp\n+RUN chmod +x /etc/livebootp/startup.sh /etc/cron.hourly/livebootp\n+ADD startup.d /etc/livebootp/startup.d\n+ADD livebootp.service /etc/systemd/system/livebootp.service\n+RUN systemctl enable livebootp.service\n",
          "commitId": "c2dfb61705e1965780836c2fc15633c7ad0709e5"
        },
        {
          "id": 3561,
          "oldPath": "targets/base/cron.hourly.sh",
          "newPath": "targets/base/cron.hourly.sh",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,7 @@\n+#!/bin/bash -e\n+# LiveBOOTP cron.hourly script\n+\n+. /etc/livebootp/functions.sh\n+. /etc/livebootp/startup.d/10_root-ssh-authorized-keys.sh\n+\n+exit 0\n",
          "commitId": "c2dfb61705e1965780836c2fc15633c7ad0709e5"
        },
        {
          "id": 3562,
          "oldPath": "targets/base/functions.sh",
          "newPath": "targets/base/functions.sh",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,133 @@\n+\n+declare -A KERNEL_CMDLINE_PARAMS\n+parse_cmdline() {\n+    local name value\n+    set -- $(cat /proc/cmdline)\n+    for x in \"$@\"; do\n+        case \"$x\" in\n+            debug)\n+                # Use FD 19 to capture the debug stream caused by \"set -x\":\n+                exec 19>/var/log/live/livebootp-startup.log\n+                # Tell bash about it  (there's nothing special about 19, its arbitrary)\n+                export BASH_XTRACEFD=19\n+                # turn on the debug stream:\n+                set -x\n+                ;;\n+            root-password-disabled)\n+                passwd -d root\n+                ;;\n+        esac\n+        name=${x%%=*}\n+        if [ \"$x\" == \"$name\" ]; then\n+            KERNEL_CMDLINE_PARAMS[$name]=\"true\"\n+        else\n+            KERNEL_CMDLINE_PARAMS[$name]=$(eval \"echo ${x#$name=}\")\n+        fi\n+    done\n+}\n+\n+parse_cmdline\n+\n+# Print error message and exit\n+# * argument 1: Message\n+print_critical() {\n+    printf \"\\e[91m[CRIT] %s\\e[0m\\n\" \"$@\"\n+    return 1\n+}\n+\n+# Print error message\n+# * argument 1: Message\n+print_error() {\n+    printf \"\\e[91m[ERRO] %s\\e[0m\\n\" \"$@\"\n+}\n+\n+# print note message\n+# * argument 1: Message\n+print_note() {\n+    printf \"[NOTE] %s\\n\" \"$@\"\n+}\n+\n+# Print info message\n+# * argument 1: Message\n+print_info() {\n+    printf \"\\e[92m[INFO] %s\\e[0m\\n\" \"$@\"\n+}\n+\n+# Print a warning message\n+print_warning() {\n+    >&2 printf \"\\e[93m[WARN] %s\\e[0m\\n\" \"$@\"\n+}\n+\n+# Get a /proc/cmdline parameter\n+# * argument 1: parameter name\n+get_cmdline_param() {\n+    echo \"${KERNEL_CMDLINE_PARAMS[$1]}\"\n+}\n+\n+LIVEBOOTP_FETCH_URL_CURL_ADD_OPTS=()\n+if [ \"${KERNEL_CMDLINE_PARAMS[fetch-curl-allow-insecure]}\" == \"true\" ]; then\n+    LIVEBOOTP_FETCH_CURL_ADD_OPTS+=(--insecure)\n+fi\n+\n+# Fetch a ressource\n+# * argument 1: URL\n+# * argument 2: target file path\n+fetch_url() {\n+    local url=$1\n+    local tg=$2\n+    local url_proto url_hostname url_portnum url_path\n+    eval \"$(echo \"$1\" | gawk '\n+        match($0, /^(\\w+):\\/\\/([^\\/:]+)(:(\\d*))?(\\S+)$/, res) {\n+            printf \"url_proto=%s\\n \\\n+                url_hostname=%s\\n \\\n+                url_portnum=%s\\n \\\n+                url_path=%s\\n\", res[1], res[2], res[3], res[5]\n+        }')\"\n+    case \"$url_proto\" in\n+        tftp)\n+            tftp \"$url_hostname\" -c get \"$url_path\" \"$tg\"\n+            ;;\n+        http|https)\n+            curl \"${LIVEBOOTP_FETCH_URL_CURL_ADD_OPTS[@]}\" --location --silent --output \"$tg\" \"$url\"\n+            ;;\n+        *)\n+            print_critical \"fetch_url: unsupported protocol $url_proto\"\n+            ;;\n+    esac\n+}\n+\n+# Test if mount point is active\n+# * argument 1: target mount point\n+is_mounted() {\n+    return $(awk '\n+        BEGIN {\n+            retcode = 1;\n+        }\n+        ($2 == \"'\"$1\"'\") {\n+            retcode=0;\n+            exit;\n+        }\n+        END {\n+            print retcode;\n+        }' /etc/mtab)\n+}\n+\n+# Test if two files have the same content\n+# * argument 1: file 1\n+# * argument 2: file 2\n+is_identical_file () {\n+    return $(sha256sum \"$1\" \"$2\" | awk '\n+        BEGIN {\n+            retcode = 1;\n+        }\n+        (sha256==$1) {\n+            retcode=0;\n+            exit;\n+        }\n+        {\n+            sha256=$1\n+        }\n+        END {\n+            print retcode;\n+        }')\n+}\n",
          "commitId": "c2dfb61705e1965780836c2fc15633c7ad0709e5"
        },
        {
          "id": 3563,
          "oldPath": "targets/base/initramfs/9990-misc-helpers.sh.patch",
          "newPath": "targets/base/initramfs/9990-misc-helpers.sh.patch",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,20 @@\n+--- lib/live/boot/9990-misc-helpers.sh.orig\t2018-01-11 14:45:02.233394302 +0100\n++++ lib/live/boot/9990-misc-helpers.sh\t2018-01-11 14:51:39.977387180 +0100\n+@@ -1489,7 +1489,7 @@\n+ \t\t\tfi\n+ \t\tfi\n+ \n+-\t\tif [ ! -d \"${dest}\" ]\n++\t\tif [ ! -e \"${dest}\" ]\n+ \t\tthen\n+ \t\t\t# create the destination and delete existing files in\n+ \t\t\t# its path that are in the way\n+@@ -1518,7 +1518,7 @@\n+ \t\t# we bootstrap it with $dest from the live filesystem.\n+ \t\t# this both makes sense and is critical if we're\n+ \t\t# dealing with /etc or other system dir.\n+-\t\tif [ ! -d \"${source}\" ]\n++\t\tif [ ! -e \"${source}\" ]\n+ \t\tthen\n+ \t\t\tif [ -n \"${PERSISTENCE_READONLY}\" ]\n+ \t\t\tthen\n",
          "commitId": "c2dfb61705e1965780836c2fc15633c7ad0709e5"
        },
        {
          "id": 3564,
          "oldPath": "targets/base/initramfs/livebootp-hook",
          "newPath": "targets/base/initramfs/livebootp-hook",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,65 @@\n+#!/bin/sh\n+\n+set -e\n+\n+case \"${1}\" in\n+\tprereqs)\n+\t\texit 0\n+\t\t;;\n+esac\n+\n+. /usr/share/initramfs-tools/hook-functions\n+\n+# Encode special characters\n+_urlencode() {\n+  echo \"$@\" | awk -v ORS=\"\" '{ gsub(/./,\"&\\n\") ; print }' | while read l;\n+  do\n+    case \"$l\" in\n+      [-_.~a-zA-Z0-9] ) echo -n ${l} ;;\n+      \"\" ) echo -n %20 ;;\n+      * )  printf '%%%02x' \"'$l\"\n+    esac\n+  done\n+  echo \"\"\n+}\n+\n+# Unpack a deb file into a specific rootfs\n+# arguments: package_name dest_dir\n+dpkg_unpack () {\n+  PKG_URL=\"https://mirrors.kernel.org/ubuntu/$(apt-cache show $1 \\\n+    | grep -A 15 \"^Maintainer: Ubuntu\" | grep \"^Filename: \" \\\n+    | cut -d ' ' -f 2)\"\n+  PKG_FILE=\"$(basename $PKG_URL)\"\n+  PKG_PATH=\"/tmp/$PKG_FILE\"\n+  if [ ! -e $PKG_PATH ]; then\n+    curl -sLo \"$PKG_PATH\" \"$PKG_URL\"\n+  fi\n+  dpkg -x $PKG_PATH $2\n+}\n+\n+manual_add_modules squashfs\n+copy_exec /sbin/modprobe $DESTDIR/sbin/\n+\n+# Add the full busybox version\n+# and add link to needed modules\n+STAGINGDIR=`mktemp -d`\n+dpkg_unpack busybox $STAGINGDIR/\n+cp -a $STAGINGDIR/bin/busybox $DESTDIR/bin/\n+cd $DESTDIR/sbin/\n+ln -s ../bin/busybox ifconfig\n+ln -s ../bin/busybox route\n+cd -\n+cd $DESTDIR/bin/\n+ln -s ../bin/busybox tftp\n+ln -s ../bin/busybox dirname\n+cd -\n+dpkg_unpack udhcpc $STAGINGDIR\n+cp -a $STAGINGDIR/etc/udhcpc $DESTDIR/etc/\n+cp -a $STAGINGDIR/sbin/udhcpc $DESTDIR/sbin/\n+rm $STAGINGDIR -r\n+\n+# Patch to support file mount (not only directory)\n+$DESTDIR/bin/busybox patch -i /etc/initramfs-tools/patches/9990-misc-helpers.sh.patch \\\n+    -p0 $DESTDIR/lib/live/boot/9990-misc-helpers.sh\n+\n+exit 0\n",
          "commitId": "c2dfb61705e1965780836c2fc15633c7ad0709e5"
        },
        {
          "id": 3565,
          "oldPath": "targets/base/livebootp.service",
          "newPath": "targets/base/livebootp.service",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,11 @@\n+[Unit]\n+Wants=network-online.target\n+After=network.target network-online.target\n+\n+[Service]\n+Type=oneshot\n+ExecStart=/etc/livebootp/startup.sh\n+RemainAfterExit=yes\n+\n+[Install]\n+WantedBy=multi-user.target sshd.service\n",
          "commitId": "c2dfb61705e1965780836c2fc15633c7ad0709e5"
        },
        {
          "id": 3566,
          "oldPath": "targets/base/startup.d/01_persistence.sh",
          "newPath": "targets/base/startup.d/01_persistence.sh",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,94 @@\n+\n+LIVEBOOTP_PERSISTENCE_ENABLED=${KERNEL_CMDLINE_PARAMS[persistence]}\n+LIVEBOOTP_PERSISTENCE_LABEL=${KERNEL_CMDLINE_PARAMS[persistence-label]:-persistence}\n+\n+if [ \"$LIVEBOOTP_PERSISTENCE_ENABLED\" == \"true\" ]; then\n+    # Setup persistence\n+    if [ -e /dev/disk/by-label/$LIVEBOOTP_PERSISTENCE_LABEL ]; then\n+        PERSISTENCE_ROOT=\"/lib/live/mount/persistence/$(basename $( \\\n+            readlink -f /dev/disk/by-label/$LIVEBOOTP_PERSISTENCE_LABEL))\"\n+        if [ ! -d \"$PERSISTENCE_ROOT\" ]; then\n+            mkdir -p $PERSISTENCE_ROOT\n+            mount /dev/disk/by-label/$LIVEBOOTP_PERSISTENCE_LABEL $PERSISTENCE_ROOT\n+        fi\n+    else\n+        # get the first available hard drive\n+        KNAME=\"$(lsblk -io TYPE,KNAME | awk '/^disk / {print $2; exit;}')\"\n+        if [ -z \"$KNAME\" ]; then\n+            print_warning \"No disk found for persistence - Persistence mode disabled\"\n+            LIVEBOOTP_PERSISTENCE_ENABLE=\"false\"\n+        else\n+            DISK_DEV=\"/dev/$KNAME\"\n+            # To be sure that the MBR is erased\n+            dd if=/dev/zero of=$DISK_DEV bs=512 count=1 conv=sync\n+            # Set a new partition table\n+            parted $DISK_DEV mklabel gpt Y\n+            # Create a new partition on the whole disk\n+            parted $DISK_DEV mkpart primary 0% 100%\n+            # Get the first part dev path\n+            for i in $(seq 1 10); do\n+                KPART=$(lsblk -io TYPE,KNAME $DISK_DEV | awk '/^part / {print $2; exit;}')\n+                if [ -n \"$KPART\" ]; then\n+                    break\n+                fi\n+                sleep 1\n+            done\n+            PART_DEV=\"/dev/$KPART\"\n+            # Formate to ext4 + label=$LIVEBOOTP_PERSISTENCE_LABEL\n+            yes | mkfs.ext4 -L $LIVEBOOTP_PERSISTENCE_LABEL $PART_DEV\n+            PERSISTENCE_ROOT=\"/lib/live/mount/persistence/$(basename $PART_DEV)\"\n+            # mount persistence storage\n+            mkdir -p \"$PERSISTENCE_ROOT\"\n+            mount $PART_DEV \"$PERSISTENCE_ROOT\"\n+        fi\n+    fi\n+fi\n+\n+if [ \"$LIVEBOOTP_PERSISTENCE_ENABLED\" == \"true\" ]; then\n+    PERSISTENCE_CONFIG=\"$PERSISTENCE_ROOT/persistence.conf\"\n+    > \"$PERSISTENCE_CONFIG\"\n+\n+    # Add pertistant s\n+    add_pertistant_storage() {\n+        local target=\"${1:1}\"\n+        local method=\"$2\"\n+        if ! is_mounted \"/$target\" && ! [ -L \"/$target\" ]; then\n+            case \"$method\" in\n+                link)\n+                    mkdir -p \"$(dirname \"$PERSISTENCE_ROOT/$target\")\"\n+                    touch \"$PERSISTENCE_ROOT/$target\"\n+                    ln -sf \"$PERSISTENCE_ROOT/$target\" \"/$target\"\n+                    ;;\n+                union)\n+                    mkdir -p \"$PERSISTENCE_ROOT/$target/\"{rw,work}\n+                    mount -t overlay overlay -o \"rw,noatime,lowerdir=/lib/live/mount/rootfs/rootfs.squashfs/$target,upperdir=$PERSISTENCE_ROOT/$target/rw,workdir=$PERSISTENCE_ROOT/$target/work\" \"/$target\"\n+                    ;;\n+                ''|bind)\n+                    method=\"bind\"\n+                    case \"$3\" in\n+                        none)\n+                            test -e \"$PERSISTENCE_ROOT/$target\" || mkdir -p \"$PERSISTENCE_ROOT/$target\"\n+                            ;;\n+                        ''|copy)\n+                            local pdir=\"$(dirname \"$PERSISTENCE_ROOT/$target\")\"\n+                            mkdir -p \"$pdir\"\n+                            test -e \"$PERSISTENCE_ROOT/$target\" || cp -a \"/$target\" \"$pdir/\"\n+                            ;;\n+                        *)\n+                            add_pertistant_storage_bind_init_$3 \"$PERSISTENCE_ROOT/$target\" \"/$target\"\n+                            ;;\n+                    esac\n+                    mount -o bind \"$PERSISTENCE_ROOT/$target\" \"/$target\"\n+                    ;;\n+                *)\n+                    print_critical \"add_pertistant_storage: Unmanaged method $method\"\n+                    ;;\n+            esac\n+        fi\n+        echo \"/$target $method\" >> \"$PERSISTENCE_CONFIG\"\n+    }\n+else\n+    add_pertistant_storage() {\n+        print_warning \"add_pertistant_storage: Persistence mode disabled\"\n+    }\n+fi\n",
          "commitId": "c2dfb61705e1965780836c2fc15633c7ad0709e5"
        },
        {
          "id": 3567,
          "oldPath": "targets/base/startup.d/10_root-ssh-authorized-keys.sh",
          "newPath": "targets/base/startup.d/10_root-ssh-authorized-keys.sh",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,19 @@\n+# ###      SSH AUTHORIZED KEYS      ###\n+\n+if [ ! -d /root/.ssh ]; then\n+    mkdir -p /root/.ssh/authorized_keys.d\n+    chown root:root /root/.ssh\n+    chmod 0700 /root/.ssh\n+fi\n+\n+FETCH_SSH_AUTHORIZED_KEYS=${KERNEL_CMDLINE_PARAMS[fetch-ssh-authorized-keys]}\n+if [ -n \"$FETCH_SSH_AUTHORIZED_KEYS\" ]; then\n+    fetch_url $FETCH_SSH_AUTHORIZED_KEYS /root/.ssh/authorized_keys\n+    if [ -d /root/.ssh/authorized_keys.d ]; then\n+        find /root/.ssh/authorized_keys.d -type f -exec echo \"# Additional keys from file:\" '{}' \\; \\\n+            -exec cat '{}' \\; >> /root/.ssh/authorized_keys\n+    fi\n+    chmod 0600 /root/.ssh/authorized_keys\n+else # ### RESCUE MODE ###\n+    passwd -d root\n+fi\n",
          "commitId": "c2dfb61705e1965780836c2fc15633c7ad0709e5"
        },
        {
          "id": 3568,
          "oldPath": "targets/base/startup.d/20_hostname.sh",
          "newPath": "targets/base/startup.d/20_hostname.sh",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,37 @@\n+# ###            HOSTNAME          ###\n+_HOSTNAME=\"$(get_cmdline_param hostname)\"\n+\n+if [ ! -f $PERSISTENCE_ROOT/etc/hosts ]; then\n+    cat > /etc/hosts <<EOF\n+127.0.0.1       localhost\n+127.0.1.1       $_HOSTNAME\n+\n+# The following lines are desirable for IPv6 capable hosts\n+::1     ip6-localhost ip6-loopback\n+fe00::0 ip6-localnet\n+ff00::0 ip6-mcastprefix\n+ff02::1 ip6-allnodes\n+ff02::2 ip6-allrouters\n+EOF\n+fi\n+\n+add_pertistant_storage /etc/hosts bind\n+\n+if [ ! -f $PERSISTENCE_ROOT/etc/hosts ]; then\n+    mkdir -p $PERSISTENCE_ROOT/etc\n+    echo \"$_HOSTNAME\" > $PERSISTENCE_ROOT/etc/hosts\n+fi\n+\n+add_pertistant_storage /etc/hostname bind\n+\n+if [ \"$_HOSTNAME\" != \"$HOSTNAME\" ]; then\n+    # NOTE: ignore hostnamectl error due to this autistic tool try to remove\n+    # /etc/hostname and create a new one instead of simply write into it... o_O\n+    hostnamectl set-hostname \"$_HOSTNAME\" 2> /dev/null || true\n+    echo \"$_HOSTNAME\" > /etc/hostname\n+    hostname \"$_HOSTNAME\"\n+    if [ \"$HOSTNAME\" != \"localhost\" ]; then\n+        sed -i \"s/$HOSTNAME/$_HOSTNAME/g\" /etc/hosts\n+    fi\n+    export HOSTNAME=\"$_HOSTNAME\"\n+fi\n",
          "commitId": "c2dfb61705e1965780836c2fc15633c7ad0709e5"
        },
        {
          "id": 3569,
          "oldPath": "targets/base/startup.d/30_ssh-server.sh",
          "newPath": "targets/base/startup.d/30_ssh-server.sh",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,9 @@\n+# ###              SSH             ###\n+add_pertistant_storage /etc/ssh bind\n+\n+if is_identical_file /etc/ssh/ssh_host_rsa_key \\\n+    /lib/live/mount/rootfs/rootfs.squashfs/etc/ssh/ssh_host_rsa_key \\\n+    && [ \"$LIVEBOOTP_PERSISTENCE_ENABLED\" == \"true\" ]; then\n+    rm /etc/ssh/ssh_host_*\n+    dpkg-reconfigure openssh-server\n+fi\n",
          "commitId": "c2dfb61705e1965780836c2fc15633c7ad0709e5"
        },
        {
          "id": 3570,
          "oldPath": "targets/base/startup.d/99_restart_failed_services.sh",
          "newPath": "targets/base/startup.d/99_restart_failed_services.sh",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,16 @@\n+\n+# Try to restart all failed services\n+for s in $(systemctl list-units --state=failed \\\n+    | awk '\n+        /^  UNIT / {\n+            inner_list=1;\n+            next;\n+        }\n+        /^$/ && inner_list==1 {\n+            exit;\n+        }\n+        (inner_list==1) {\n+            print $2;\n+        }'); do\n+    systemctl restart $s || true &\n+done\n",
          "commitId": "c2dfb61705e1965780836c2fc15633c7ad0709e5"
        },
        {
          "id": 3571,
          "oldPath": "targets/base/startup.sh",
          "newPath": "targets/base/startup.sh",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,10 @@\n+#!/bin/bash -e\n+# LiveBOOTP startup script\n+\n+. /etc/livebootp/functions.sh\n+\n+for script in $(ls /etc/livebootp/startup.d/??_*.sh); do\n+    . $script\n+done\n+\n+exit 0\n",
          "commitId": "c2dfb61705e1965780836c2fc15633c7ad0709e5"
        }
      ]
    },
    {
      "id": "f48b23650d2134d3072b68a8f9cbd7a701b44576",
      "title": "Project initialization: add project documentation",
      "created_at": "2018-01-19T12:07:35.000Z",
      "message": "Project initialization: add project documentation\n",
      "author_name": "Emeric Verschuur",
      "diffs": [
        {
          "id": 3572,
          "oldPath": "README.md",
          "newPath": "README.md",
          "newFile": false,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -1 +1,269 @@\n-## PXE image builder\n+# LiveBOOTP\n+\n+The LiveBOOTP project is a solution in two parts:\n+* The BOOTP registry\n+* Targets images\n+\n+## Table of Contents\n+\n+* [Target image creation](#target-image-creation)\n+    * [Target creation step 1: Gitlab-CI job creation](#target-creation-step-1-gitlab-ci-job-creation)\n+    * [Target creation step 2: Docker file creation](#target-creation-step-2-docker-file-creation)\n+    * [Target creation step 3: startup script (optional)](#target-creation-step-3-startup-script-optional)\n+    * [Generic startup process](#generic-startup-process)\n+    * [Add custom startup script](#add-custom-startup-script)\n+    * [How to build the target](#how-to-build-the-target)\n+* [The BOOTP registry](#the-bootp-registry)\n+    * [How to build the registry](#how-to-build-the-registry)\n+    * [How to setup the registry](#how-to-setup-the-registry)\n+    * [How to start a registry on your workstation](#how-to-start-a-registry-on-your-workstation)\n+    * [Setup target virtual machine](#setup-target-virtual-machine)\n+    * [How to deploy the registry](#how-to-deploy-the-registry)\n+* [Annexes](#annexes)\n+    * [RC.local: useful functions](#rclocal-useful-functions)\n+        * [print_critical](#print_critical)\n+        * [print_error](#print_error)\n+        * [print_note](#print_note)\n+        * [print_info](#print_info)\n+        * [fetch_url](#fetch_url)\n+        * [get_cmdline_param](#get_cmdline_param)\n+        * [is_mounted](#is_mounted)\n+        * [is_identical_file](#is_identical_file)\n+        * [add_pertistant_storage](#add_pertistant_storage)\n+    * [LibeBOOTP kernel parameters](#libebootp-kernel-parameters)\n+        * [debug](#debug)\n+        * [fetch-curl-allow-insecure](#fetch-curl-allow-insecure)\n+        * [root-password-disabled](#root-password-disabled)\n+    * [The ci-toolbox command](#the-ci-toolbox-command)\n+\n+## Target image creation\n+Each target image is generated using a simple way (Dockerfile based format) and produce, for each version, a set of file: kernel image + initrd + squashfs filesystem\n+\n+You can create a new target in tree steps. To illustrate with an example, wee will create a nginx web server image named `nginx-web-server`.\n+\n+There is two type of target image:\n+* **Intermediate image**: Used as base image by several targets\n+* **Final image**: image to deploy\n+\n+### Target creation step 1: Gitlab-CI job creation\n+The first step is to add the new job into the `.gitlab-ci.yml` file.\n+\n+There are tree steps to the image generation & deployment:\n+* 1: **Image build (intermediate and final images)**: Build the image and store it into the registry\n+* 2: **SquashFS image generation (final images specific)**: Extract SquashFS and kernel image from the docker image\n+* 3: **Image deployment to the BOOTP registries (final images specific)**: This step is specific and must be designed depending on your IT environment\n+\n+The job format must follow this model (only the two first steps will be documented here):\n+```yaml\n+target-my-target-name-build:\n+  only:\n+    - /^target-my-target-name\\/.*$/\n+  <<: *target-build-template\n+\n+target-my-target-name-mksquashfs:\n+  only:\n+    - /^target-my-target-name\\/.*$/\n+  <<: *target-mksquashfs-template\n+```\n+\n+For our example, we will create the following job:\n+```yaml\n+target-nginx-web-server-build:\n+  only:\n+    - /^target-nginx-web-server\\/.*$/\n+  <<: *target-build-template\n+\n+target-nginx-web-server-mksquashfs:\n+  only:\n+    - /^target-nginx-web-server\\/.*$/\n+  <<: *target-mksquashfs-template\n+```\n+\n+### Target creation step 2: Docker file creation\n+The target image is built from `targets/my-target-name/Dockerfile`.\n+\n+The Dockerfile supported commands are: `FROM`, `RUN`, `ADD`, `COPY`, `ENV`, `WORKDIR` and `VOLUME`. The other commands will don't have any effect.\n+\n+* __Note 1:__ The image must be built `FROM` the `$CI_REGISTRY_IMAGE/base:version` or derivated image (where CI_REGISTRY_IMAGE contains your-registry.domain/group/your-bootp-project)\n+* __Note 2:__ for each declared volume with `VOLUME` Dockerfile keyword, a persistant data directory will be created (using `add_pertistant_storage \"/your/volume\" bind copy`, see [here](#add_pertistant_storage) for more details).\n+\n+For our example, we will create a file `targets/nginx-web-server/Dockerfile` containing:\n+```Dockerfile\n+ARG CI_REGISTRY_IMAGE\n+FROM $CI_REGISTRY_IMAGE/base:test\n+\n+RUN apt update && apt install -y nginx\n+VOLUME /etc/nginx /var/www\n+```\n+\n+### Target creation step 3: startup script (optional)\n+This part explain how to add start script to perform some custom initialization. The global LiveBOOTP process is stored into the file list `targets/base/startup.d/XX*.sh`\n+\n+#### Generic startup process\n+The generic startup process (regrouped into the files `targets/base/startup.d/XX_*.sh`):\n+* [Once: first boot] Persistant storage initialization:\n+    + Create (if doesn't exists) and mount the persistant storage device\n+    + Setup SSH host keys\n+* [Once: first boot] Setup a new set of ssh_host_* key files for the SSH server\n+* [Always: each boot] Setup the hostname from the hostname given by the bootp-registry\n+* [Always: each boot] Fetch and setup the root authorized_keys specified by the bootp-registry\n+\n+#### Add custom startup script\n+You can add your own script, e.g.: `targets/nginx-web-server/startup-process.sh`\n+\n+And add a line like :\n+```Dockerfile\n+ADD startup-process.sh /etc/livebootp/startup.d/50-my-custom-startup-process.sh\n+```\n+in your `targets/nginx-web-server/Dockerfile`\n+\n+#### How to build the target\n+* With Gitlab-CI: create a tag under the following format: `target-my-target-name/x.y.z` where x.y.z is the version number. The gitlab-ci job is triggered only on tags with the prefix `target-my-target-name/`\n+* On your workstation: with the [ci-toolbox](#the-ci-toolbox-command) command like this: `ci-toolbox target-my-target-name-mksquashfs` (in addition you can use `--image-tag` parameter to customize version)\n+\n+The generated files will be available in the `artifacts/my-target-name/x.y.z/` directory\n+\n+## The BOOTP registry\n+The BOOTP registry is based on a docker image containing a DHCP and TFTP server where the configuration of all the service is centralized into a very basic YAML file.\n+\n+### How to build the registry\n+* With Gitlab-CI: create a tag under the following format: `bootp-registry/x.y.z` where x.y.z is the version number. The gitlab-ci job is triggered only on tags with the prefix `bootp-registry/`\n+* On your workstation: with the [ci-toolbox](#the-ci-toolbox-command) command like this: `ci-toolbox bootp-registry` (in addition you can use `--image-tag` parameter to customize version)\n+\n+### How to setup the registry\n+\n+The [config-default.yml](bootp-registry/config/config-default.yml) configuration file contains the full configuration schema with a documentation for each properties.\n+\n+For our example we have to define the file `bootp-registry/config/config.yml` with the following content:\n+```yaml\n+bootp-registry:\n+    domain-name-servers:\n+        - 8.8.8.8\n+        - 8.8.4.4\n+\n+my-nginx-web-server:\n+    hardware-ethernet: \"52:54:00:12:34:56\"\n+    fixed-address: \"192.168.254.50\"\n+    image-name: nginx-web-server/test\n+    ssh-authorized-keys: default\n+    cmdline-append: debug\n+```\n+\n+For the bootp-registry:\n+* On many distributions, all the `bootp-registry` parameters can be auto detected. In this case, we have just overloaded the domain-name-servers due to some distributions like Ubuntu which contains a local DNS cache not accessible outside the local host.\n+\n+We have defined a host block for our nginx web server:\n+* **Host name** (`block key name`): my-nginx-web-server\n+* **MAC address** (`hardware-ethernet`): 52:54:00:12:34:56 (may be customized when we will create the test target virtual machine)\n+* **IP address** (`fixed-address`): 192.168.254.50\n+* **Image name** (`image-name`): nginx-web-server/test (If you have generated your image using a custom version `--image-tag x.y.z`, set `nginx-web-server/x.y.z` here)\n+* **SSH authorized-keys file** (`ssh-authorized-keys`): default (For this test, don't change this value: the `bootp-registry/start-registry-devtool.sh` script used in the following part will mount your local `~/.ssh/id_rsa.pub` as `/var/lib/tftpboot/ssh_authorized_keys/default` into the `bootp-registry` docker)\n+* **[OPTIONAL] Append kernel parameters** (`cmdline-append`): We have append `debug` property to the kernel parameter to add debug info, see [here](#debug) for more information.\n+\n+### How to start a registry on your workstation\n+You can run the registry on your local workstation to perform some test on the generated target images.\n+\n+You can start the registry on your local workstation using the command:\n+```bash\n+$ bootp-registry/start-registry-devtool.sh registry.gitlab.com/ercom/livebootp/bootp-registry:your-test-version\n+```\n+\n+On the start process, an info message with `You have to use the bridge br-xxxxxxxxxxxx` where `br-xxxxxxxxxxxx` is the bridge to use for your test target virtual machine.\n+\n+### Setup target virtual machine\n+libvirt is highly recommended here !\n+\n+To setup the test virtual machine with libvirt, simply run:\n+```bash\n+$ virt-install --name my-nginx-web-server --vcpus 1 --memory 1024 \\\n+    --pxe --disk size=10 --boot network --os-variant ubuntu16.04 \\\n+    --network bridge=br-xxxxxxxxxxxx,model=virtio,mac=52:54:00:12:34:56 \\\n+    --noreboot --noautoconsole --wait 0\n+```\n+\n+Otherwith, you have to create manually a test virtual machine with the following properties:\n+* An network interface bridged on `br-xxxxxxxxxxxx`\n+* Start process setup on network (PXE)\n+* The hardware address must be the same than the `my-nginx-web-server.hardware-ethernet` in the `bootp-registry/config/config.yml` file\n+\n+NOTE: VirtualBox guest PXE client is not fully fonctional with this solution for now\n+\n+### How to deploy the registry\n+\n+In the first time, you have to prepare your environment:\n+* `/opt/bootp-registry/config` must contains your production config.yml file\n+* `/opt/bootp-registry/images` is the directory where you have to deploy your images\n+* `/opt/bootp-registry/ssh-authorized-keys` is the directory where you have to put the ssh authorized keys files\n+\n+Note: you can customize the paths on the host side (/opt/bootp-registry/...)\n+\n+You can now start the registry like this:\n+```bash\n+$ docker run --name bootp-registry -d --tmpfs /var/run \\\n+    -v /opt/bootp-registry/config:/opt/livebootp/etc \\\n+    -v /opt/bootp-registry/images:/var/lib/tftpboot/images \\\n+    -v /opt/bootp-registry/ssh-authorized-keys:/var/lib/tftpboot/ssh_authorized_keys \\\n+    --network host registry.gitlab.com/ercom/livebootp/bootp-registry:release-version\n+```\n+\n+Note: `--network host` is used here to bind directly on the host ethernet interface.\n+\n+## Annexes\n+\n+### RC.local: useful functions\n+\n+#### print_critical\n+Print error message and exit\n+* argument 1: Message\n+\n+#### print_error\n+Print error message\n+* argument 1: Message\n+\n+#### print_note\n+print note message\n+* argument 1: Message\n+\n+#### print_info\n+Print info message\n+* argument 1: Message\n+\n+#### fetch_url\n+Fetch a resource\n+* argument 1: URL\n+* argument 2: target file path\n+\n+#### get_cmdline_param\n+Get a /proc/cmdline parameter\n+* argument 1: parameter name\n+\n+#### is_mounted\n+Test if mount point is active\n+* argument 1: target mount point\n+\n+#### is_identical_file\n+Test if two files have the same content\n+* argument 1: file 1\n+* argument 2: file 2\n+\n+#### add_pertistant_storage\n+Add a persistant storage\n+* argument 1: target mount point (e.g.: /var/www)\n+* argument 2: persistant storage format (accepted values: bind (default) and unionfs)\n+* argument 3 *only applicable for `bind` persistant storage format*: Initialization method (accepted values: copy (default) and none)\n+\n+### LibeBOOTP kernel parameters\n+\n+#### debug\n+This parameter enable debug output into the files:\n+* /var/log/live/boot.log: Ubuntu liveboot process\n+* /var/log/live/livebootp-startup.log: Startup process\n+\n+#### fetch-curl-allow-insecure\n+Allow to fetch resources on unsecure HTTPS server.\n+\n+#### root-password-disabled\n+Disable root password. Useful to debug startup scripts.\n+\n+### The ci-toolbox command\n+The `ci-toolbox` command is a tool, provided by the `tools/gitlab-ci/run.sh setup` execution, to run Gitlab-CI jobs on your local workstation (see the [project page](https://gitlab.com/ercom/citbx4gitlab) for more information)\n",
          "commitId": "f48b23650d2134d3072b68a8f9cbd7a701b44576"
        }
      ]
    },
    {
      "id": "412bf67d6553eb2391735ed0cb1eba5ba3718d12",
      "title": "Project initialization: add target image part",
      "created_at": "2018-01-19T12:07:35.000Z",
      "message": "Project initialization: add target image part\n",
      "author_name": "Emeric Verschuur",
      "diffs": [
        {
          "id": 3573,
          "oldPath": ".gitlab-ci.yml",
          "newPath": ".gitlab-ci.yml",
          "newFile": false,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -1,4 +1,9 @@\n \n+stages:\n+  - build\n+  - mksquashfs\n+  - deploy\n+\n bootp-registry:\n   stage: build\n   services:\n@@ -12,3 +17,64 @@ bootp-registry:\n     - /^bootp-registry\\/.*$/\n   script:\n     - tools/gitlab-ci/run.sh\n+\n+.target-build-template: &target-build-template\n+  stage: build\n+  services:\n+  - name: registry.gitlab.com/ercom/docker:17.12.0-ce-dind\n+    alias: docker\n+  variables:\n+    DOCKER_DRIVER: overlay\n+    DOCKER_HOST: tcp://docker:2375\n+    CITBX_JOB_RUN_FILE_NAME: target-build.sh\n+  image: registry.gitlab.com/ercom/docker:17.12.0-ce-git\n+  #With Gitlab 10.5\n+  #expression:\n+    #- $CI_COMMIT_TAG ~= /^\\$CI_JOB_NAME\\/.*$/\n+  script:\n+    - tools/gitlab-ci/run.sh\n+\n+.target-mksquashfs-template: &target-mksquashfs-template\n+  stage: mksquashfs\n+  services:\n+  - name: registry.gitlab.com/ercom/docker:17.12.0-ce-dind\n+    alias: docker\n+  variables:\n+    DOCKER_DRIVER: overlay\n+    DOCKER_HOST: tcp://docker:2375\n+    CITBX_JOB_RUN_FILE_NAME: target-mksquashfs.sh\n+  image: registry.gitlab.com/ercom/docker:17.12.0-ce-git\n+  #With Gitlab 10.5\n+  #expression:\n+    #- $CI_COMMIT_TAG ~= /^\\$CI_JOB_NAME\\/.*$/\n+  script:\n+    - tools/gitlab-ci/run.sh\n+  artifacts:\n+    paths:\n+      - artifacts\n+    expire_in: 1 day\n+\n+target-base-build:\n+  only:\n+    - /^target-base\\/.*$/\n+  <<: *target-build-template\n+\n+#target-my-target-name-build:\n+  #only:\n+    #- /^target-my-target-name\\/.*$/\n+  #<<: *target-build-template\n+\n+#target-my-target-name-mksquashfs:\n+  #only:\n+    #- /^target-my-target-name\\/.*$/\n+  #<<: *target-mksquashfs-template\n+\n+#########################################\n+#                                       #\n+#             SPECIFIC PART             #\n+#                                       #\n+# ### DO NOT MODIFY THE ABOVE LINES ### #\n+# ###  AND KEEP THIS INSERT AS IS   ### #\n+# ###   TO FACILITATE GIT REBASE    ### #\n+#                                       #\n+#########################################\n",
          "commitId": "412bf67d6553eb2391735ed0cb1eba5ba3718d12"
        },
        {
          "id": 3574,
          "oldPath": "targets/base/Dockerfile",
          "newPath": "targets/base/Dockerfile",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,28 @@\n+FROM ubuntu:16.04\n+\n+RUN apt update && \\\n+    DEBIAN_FRONTEND=noninteractive apt install -y \\\n+    ubuntu-standard                               \\\n+    openssh-server                                \\\n+    curl                                          \\\n+    vim                                           \\\n+    gawk                                          \\\n+    tftp-hpa                                      \\\n+    live-boot                                     \\\n+    live-boot-initramfs-tools                     \\\n+    linux-image-generic\n+\n+ADD initramfs/livebootp-hook /etc/initramfs-tools/hooks/\n+RUN mkdir /etc/initramfs-tools/patches\n+ADD initramfs/9990-misc-helpers.sh.patch /etc/initramfs-tools/patches/\n+RUN chmod +x /etc/initramfs-tools/hooks/livebootp-hook\n+RUN update-initramfs -u\n+\n+RUN mkdir -p /etc/livebootp\n+ADD functions.sh /etc/livebootp/functions.sh\n+ADD startup.sh /etc/livebootp/startup.sh\n+ADD cron.hourly.sh /etc/cron.hourly/livebootp\n+RUN chmod +x /etc/livebootp/startup.sh /etc/cron.hourly/livebootp\n+ADD startup.d /etc/livebootp/startup.d\n+ADD livebootp.service /etc/systemd/system/livebootp.service\n+RUN systemctl enable livebootp.service\n",
          "commitId": "412bf67d6553eb2391735ed0cb1eba5ba3718d12"
        },
        {
          "id": 3575,
          "oldPath": "targets/base/cron.hourly.sh",
          "newPath": "targets/base/cron.hourly.sh",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,7 @@\n+#!/bin/bash -e\n+# LiveBOOTP cron.hourly script\n+\n+. /etc/livebootp/functions.sh\n+. /etc/livebootp/startup.d/10_root-ssh-authorized-keys.sh\n+\n+exit 0\n",
          "commitId": "412bf67d6553eb2391735ed0cb1eba5ba3718d12"
        },
        {
          "id": 3576,
          "oldPath": "targets/base/functions.sh",
          "newPath": "targets/base/functions.sh",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,133 @@\n+\n+declare -A KERNEL_CMDLINE_PARAMS\n+parse_cmdline() {\n+    local name value\n+    set -- $(cat /proc/cmdline)\n+    for x in \"$@\"; do\n+        case \"$x\" in\n+            debug)\n+                # Use FD 19 to capture the debug stream caused by \"set -x\":\n+                exec 19>/var/log/live/livebootp-startup.log\n+                # Tell bash about it  (there's nothing special about 19, its arbitrary)\n+                export BASH_XTRACEFD=19\n+                # turn on the debug stream:\n+                set -x\n+                ;;\n+            root-password-disabled)\n+                passwd -d root\n+                ;;\n+        esac\n+        name=${x%%=*}\n+        if [ \"$x\" == \"$name\" ]; then\n+            KERNEL_CMDLINE_PARAMS[$name]=\"true\"\n+        else\n+            KERNEL_CMDLINE_PARAMS[$name]=$(eval \"echo ${x#$name=}\")\n+        fi\n+    done\n+}\n+\n+parse_cmdline\n+\n+# Print error message and exit\n+# * argument 1: Message\n+print_critical() {\n+    printf \"\\e[91m[CRIT] %s\\e[0m\\n\" \"$@\"\n+    return 1\n+}\n+\n+# Print error message\n+# * argument 1: Message\n+print_error() {\n+    printf \"\\e[91m[ERRO] %s\\e[0m\\n\" \"$@\"\n+}\n+\n+# print note message\n+# * argument 1: Message\n+print_note() {\n+    printf \"[NOTE] %s\\n\" \"$@\"\n+}\n+\n+# Print info message\n+# * argument 1: Message\n+print_info() {\n+    printf \"\\e[92m[INFO] %s\\e[0m\\n\" \"$@\"\n+}\n+\n+# Print a warning message\n+print_warning() {\n+    >&2 printf \"\\e[93m[WARN] %s\\e[0m\\n\" \"$@\"\n+}\n+\n+# Get a /proc/cmdline parameter\n+# * argument 1: parameter name\n+get_cmdline_param() {\n+    echo \"${KERNEL_CMDLINE_PARAMS[$1]}\"\n+}\n+\n+LIVEBOOTP_FETCH_URL_CURL_ADD_OPTS=()\n+if [ \"${KERNEL_CMDLINE_PARAMS[fetch-curl-allow-insecure]}\" == \"true\" ]; then\n+    LIVEBOOTP_FETCH_CURL_ADD_OPTS+=(--insecure)\n+fi\n+\n+# Fetch a ressource\n+# * argument 1: URL\n+# * argument 2: target file path\n+fetch_url() {\n+    local url=$1\n+    local tg=$2\n+    local url_proto url_hostname url_portnum url_path\n+    eval \"$(echo \"$1\" | gawk '\n+        match($0, /^(\\w+):\\/\\/([^\\/:]+)(:(\\d*))?(\\S+)$/, res) {\n+            printf \"url_proto=%s\\n \\\n+                url_hostname=%s\\n \\\n+                url_portnum=%s\\n \\\n+                url_path=%s\\n\", res[1], res[2], res[3], res[5]\n+        }')\"\n+    case \"$url_proto\" in\n+        tftp)\n+            tftp \"$url_hostname\" -c get \"$url_path\" \"$tg\"\n+            ;;\n+        http|https)\n+            curl \"${LIVEBOOTP_FETCH_URL_CURL_ADD_OPTS[@]}\" --location --silent --output \"$tg\" \"$url\"\n+            ;;\n+        *)\n+            print_critical \"fetch_url: unsupported protocol $url_proto\"\n+            ;;\n+    esac\n+}\n+\n+# Test if mount point is active\n+# * argument 1: target mount point\n+is_mounted() {\n+    return $(awk '\n+        BEGIN {\n+            retcode = 1;\n+        }\n+        ($2 == \"'\"$1\"'\") {\n+            retcode=0;\n+            exit;\n+        }\n+        END {\n+            print retcode;\n+        }' /etc/mtab)\n+}\n+\n+# Test if two files have the same content\n+# * argument 1: file 1\n+# * argument 2: file 2\n+is_identical_file () {\n+    return $(sha256sum \"$1\" \"$2\" | awk '\n+        BEGIN {\n+            retcode = 1;\n+        }\n+        (sha256==$1) {\n+            retcode=0;\n+            exit;\n+        }\n+        {\n+            sha256=$1\n+        }\n+        END {\n+            print retcode;\n+        }')\n+}\n",
          "commitId": "412bf67d6553eb2391735ed0cb1eba5ba3718d12"
        },
        {
          "id": 3577,
          "oldPath": "targets/base/initramfs/9990-misc-helpers.sh.patch",
          "newPath": "targets/base/initramfs/9990-misc-helpers.sh.patch",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,20 @@\n+--- lib/live/boot/9990-misc-helpers.sh.orig\t2018-01-11 14:45:02.233394302 +0100\n++++ lib/live/boot/9990-misc-helpers.sh\t2018-01-11 14:51:39.977387180 +0100\n+@@ -1489,7 +1489,7 @@\n+ \t\t\tfi\n+ \t\tfi\n+ \n+-\t\tif [ ! -d \"${dest}\" ]\n++\t\tif [ ! -e \"${dest}\" ]\n+ \t\tthen\n+ \t\t\t# create the destination and delete existing files in\n+ \t\t\t# its path that are in the way\n+@@ -1518,7 +1518,7 @@\n+ \t\t# we bootstrap it with $dest from the live filesystem.\n+ \t\t# this both makes sense and is critical if we're\n+ \t\t# dealing with /etc or other system dir.\n+-\t\tif [ ! -d \"${source}\" ]\n++\t\tif [ ! -e \"${source}\" ]\n+ \t\tthen\n+ \t\t\tif [ -n \"${PERSISTENCE_READONLY}\" ]\n+ \t\t\tthen\n",
          "commitId": "412bf67d6553eb2391735ed0cb1eba5ba3718d12"
        },
        {
          "id": 3578,
          "oldPath": "targets/base/initramfs/livebootp-hook",
          "newPath": "targets/base/initramfs/livebootp-hook",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,65 @@\n+#!/bin/sh\n+\n+set -e\n+\n+case \"${1}\" in\n+\tprereqs)\n+\t\texit 0\n+\t\t;;\n+esac\n+\n+. /usr/share/initramfs-tools/hook-functions\n+\n+# Encode special characters\n+_urlencode() {\n+  echo \"$@\" | awk -v ORS=\"\" '{ gsub(/./,\"&\\n\") ; print }' | while read l;\n+  do\n+    case \"$l\" in\n+      [-_.~a-zA-Z0-9] ) echo -n ${l} ;;\n+      \"\" ) echo -n %20 ;;\n+      * )  printf '%%%02x' \"'$l\"\n+    esac\n+  done\n+  echo \"\"\n+}\n+\n+# Unpack a deb file into a specific rootfs\n+# arguments: package_name dest_dir\n+dpkg_unpack () {\n+  PKG_URL=\"https://mirrors.kernel.org/ubuntu/$(apt-cache show $1 \\\n+    | grep -A 15 \"^Maintainer: Ubuntu\" | grep \"^Filename: \" \\\n+    | cut -d ' ' -f 2)\"\n+  PKG_FILE=\"$(basename $PKG_URL)\"\n+  PKG_PATH=\"/tmp/$PKG_FILE\"\n+  if [ ! -e $PKG_PATH ]; then\n+    curl -sLo \"$PKG_PATH\" \"$PKG_URL\"\n+  fi\n+  dpkg -x $PKG_PATH $2\n+}\n+\n+manual_add_modules squashfs\n+copy_exec /sbin/modprobe $DESTDIR/sbin/\n+\n+# Add the full busybox version\n+# and add link to needed modules\n+STAGINGDIR=`mktemp -d`\n+dpkg_unpack busybox $STAGINGDIR/\n+cp -a $STAGINGDIR/bin/busybox $DESTDIR/bin/\n+cd $DESTDIR/sbin/\n+ln -s ../bin/busybox ifconfig\n+ln -s ../bin/busybox route\n+cd -\n+cd $DESTDIR/bin/\n+ln -s ../bin/busybox tftp\n+ln -s ../bin/busybox dirname\n+cd -\n+dpkg_unpack udhcpc $STAGINGDIR\n+cp -a $STAGINGDIR/etc/udhcpc $DESTDIR/etc/\n+cp -a $STAGINGDIR/sbin/udhcpc $DESTDIR/sbin/\n+rm $STAGINGDIR -r\n+\n+# Patch to support file mount (not only directory)\n+$DESTDIR/bin/busybox patch -i /etc/initramfs-tools/patches/9990-misc-helpers.sh.patch \\\n+    -p0 $DESTDIR/lib/live/boot/9990-misc-helpers.sh\n+\n+exit 0\n",
          "commitId": "412bf67d6553eb2391735ed0cb1eba5ba3718d12"
        },
        {
          "id": 3579,
          "oldPath": "targets/base/livebootp.service",
          "newPath": "targets/base/livebootp.service",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,11 @@\n+[Unit]\n+Wants=network-online.target\n+After=network.target network-online.target\n+\n+[Service]\n+Type=oneshot\n+ExecStart=/etc/livebootp/startup.sh\n+RemainAfterExit=yes\n+\n+[Install]\n+WantedBy=multi-user.target sshd.service\n",
          "commitId": "412bf67d6553eb2391735ed0cb1eba5ba3718d12"
        },
        {
          "id": 3580,
          "oldPath": "targets/base/startup.d/01_persistence.sh",
          "newPath": "targets/base/startup.d/01_persistence.sh",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,94 @@\n+\n+LIVEBOOTP_PERSISTENCE_ENABLED=${KERNEL_CMDLINE_PARAMS[persistence]}\n+LIVEBOOTP_PERSISTENCE_LABEL=${KERNEL_CMDLINE_PARAMS[persistence-label]:-persistence}\n+\n+if [ \"$LIVEBOOTP_PERSISTENCE_ENABLED\" == \"true\" ]; then\n+    # Setup persistence\n+    if [ -e /dev/disk/by-label/$LIVEBOOTP_PERSISTENCE_LABEL ]; then\n+        PERSISTENCE_ROOT=\"/lib/live/mount/persistence/$(basename $( \\\n+            readlink -f /dev/disk/by-label/$LIVEBOOTP_PERSISTENCE_LABEL))\"\n+        if [ ! -d \"$PERSISTENCE_ROOT\" ]; then\n+            mkdir -p $PERSISTENCE_ROOT\n+            mount /dev/disk/by-label/$LIVEBOOTP_PERSISTENCE_LABEL $PERSISTENCE_ROOT\n+        fi\n+    else\n+        # get the first available hard drive\n+        KNAME=\"$(lsblk -io TYPE,KNAME | awk '/^disk / {print $2; exit;}')\"\n+        if [ -z \"$KNAME\" ]; then\n+            print_warning \"No disk found for persistence - Persistence mode disabled\"\n+            LIVEBOOTP_PERSISTENCE_ENABLE=\"false\"\n+        else\n+            DISK_DEV=\"/dev/$KNAME\"\n+            # To be sure that the MBR is erased\n+            dd if=/dev/zero of=$DISK_DEV bs=512 count=1 conv=sync\n+            # Set a new partition table\n+            parted $DISK_DEV mklabel gpt Y\n+            # Create a new partition on the whole disk\n+            parted $DISK_DEV mkpart primary 0% 100%\n+            # Get the first part dev path\n+            for i in $(seq 1 10); do\n+                KPART=$(lsblk -io TYPE,KNAME $DISK_DEV | awk '/^part / {print $2; exit;}')\n+                if [ -n \"$KPART\" ]; then\n+                    break\n+                fi\n+                sleep 1\n+            done\n+            PART_DEV=\"/dev/$KPART\"\n+            # Formate to ext4 + label=$LIVEBOOTP_PERSISTENCE_LABEL\n+            yes | mkfs.ext4 -L $LIVEBOOTP_PERSISTENCE_LABEL $PART_DEV\n+            PERSISTENCE_ROOT=\"/lib/live/mount/persistence/$(basename $PART_DEV)\"\n+            # mount persistence storage\n+            mkdir -p \"$PERSISTENCE_ROOT\"\n+            mount $PART_DEV \"$PERSISTENCE_ROOT\"\n+        fi\n+    fi\n+fi\n+\n+if [ \"$LIVEBOOTP_PERSISTENCE_ENABLED\" == \"true\" ]; then\n+    PERSISTENCE_CONFIG=\"$PERSISTENCE_ROOT/persistence.conf\"\n+    > \"$PERSISTENCE_CONFIG\"\n+\n+    # Add pertistant s\n+    add_pertistant_storage() {\n+        local target=\"${1:1}\"\n+        local method=\"$2\"\n+        if ! is_mounted \"/$target\" && ! [ -L \"/$target\" ]; then\n+            case \"$method\" in\n+                link)\n+                    mkdir -p \"$(dirname \"$PERSISTENCE_ROOT/$target\")\"\n+                    touch \"$PERSISTENCE_ROOT/$target\"\n+                    ln -sf \"$PERSISTENCE_ROOT/$target\" \"/$target\"\n+                    ;;\n+                union)\n+                    mkdir -p \"$PERSISTENCE_ROOT/$target/\"{rw,work}\n+                    mount -t overlay overlay -o \"rw,noatime,lowerdir=/lib/live/mount/rootfs/rootfs.squashfs/$target,upperdir=$PERSISTENCE_ROOT/$target/rw,workdir=$PERSISTENCE_ROOT/$target/work\" \"/$target\"\n+                    ;;\n+                ''|bind)\n+                    method=\"bind\"\n+                    case \"$3\" in\n+                        none)\n+                            test -e \"$PERSISTENCE_ROOT/$target\" || mkdir -p \"$PERSISTENCE_ROOT/$target\"\n+                            ;;\n+                        ''|copy)\n+                            local pdir=\"$(dirname \"$PERSISTENCE_ROOT/$target\")\"\n+                            mkdir -p \"$pdir\"\n+                            test -e \"$PERSISTENCE_ROOT/$target\" || cp -a \"/$target\" \"$pdir/\"\n+                            ;;\n+                        *)\n+                            add_pertistant_storage_bind_init_$3 \"$PERSISTENCE_ROOT/$target\" \"/$target\"\n+                            ;;\n+                    esac\n+                    mount -o bind \"$PERSISTENCE_ROOT/$target\" \"/$target\"\n+                    ;;\n+                *)\n+                    print_critical \"add_pertistant_storage: Unmanaged method $method\"\n+                    ;;\n+            esac\n+        fi\n+        echo \"/$target $method\" >> \"$PERSISTENCE_CONFIG\"\n+    }\n+else\n+    add_pertistant_storage() {\n+        print_warning \"add_pertistant_storage: Persistence mode disabled\"\n+    }\n+fi\n",
          "commitId": "412bf67d6553eb2391735ed0cb1eba5ba3718d12"
        },
        {
          "id": 3581,
          "oldPath": "targets/base/startup.d/10_root-ssh-authorized-keys.sh",
          "newPath": "targets/base/startup.d/10_root-ssh-authorized-keys.sh",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,19 @@\n+# ###      SSH AUTHORIZED KEYS      ###\n+\n+if [ ! -d /root/.ssh ]; then\n+    mkdir -p /root/.ssh/authorized_keys.d\n+    chown root:root /root/.ssh\n+    chmod 0700 /root/.ssh\n+fi\n+\n+FETCH_SSH_AUTHORIZED_KEYS=${KERNEL_CMDLINE_PARAMS[fetch-ssh-authorized-keys]}\n+if [ -n \"$FETCH_SSH_AUTHORIZED_KEYS\" ]; then\n+    fetch_url $FETCH_SSH_AUTHORIZED_KEYS /root/.ssh/authorized_keys\n+    if [ -d /root/.ssh/authorized_keys.d ]; then\n+        find /root/.ssh/authorized_keys.d -type f -exec echo \"# Additional keys from file:\" '{}' \\; \\\n+            -exec cat '{}' \\; >> /root/.ssh/authorized_keys\n+    fi\n+    chmod 0600 /root/.ssh/authorized_keys\n+else # ### RESCUE MODE ###\n+    passwd -d root\n+fi\n",
          "commitId": "412bf67d6553eb2391735ed0cb1eba5ba3718d12"
        },
        {
          "id": 3582,
          "oldPath": "targets/base/startup.d/20_hostname.sh",
          "newPath": "targets/base/startup.d/20_hostname.sh",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,37 @@\n+# ###            HOSTNAME          ###\n+_HOSTNAME=\"$(get_cmdline_param hostname)\"\n+\n+if [ ! -f $PERSISTENCE_ROOT/etc/hosts ]; then\n+    cat > /etc/hosts <<EOF\n+127.0.0.1       localhost\n+127.0.1.1       $_HOSTNAME\n+\n+# The following lines are desirable for IPv6 capable hosts\n+::1     ip6-localhost ip6-loopback\n+fe00::0 ip6-localnet\n+ff00::0 ip6-mcastprefix\n+ff02::1 ip6-allnodes\n+ff02::2 ip6-allrouters\n+EOF\n+fi\n+\n+add_pertistant_storage /etc/hosts bind\n+\n+if [ ! -f $PERSISTENCE_ROOT/etc/hosts ]; then\n+    mkdir -p $PERSISTENCE_ROOT/etc\n+    echo \"$_HOSTNAME\" > $PERSISTENCE_ROOT/etc/hosts\n+fi\n+\n+add_pertistant_storage /etc/hostname bind\n+\n+if [ \"$_HOSTNAME\" != \"$HOSTNAME\" ]; then\n+    # NOTE: ignore hostnamectl error due to this autistic tool try to remove\n+    # /etc/hostname and create a new one instead of simply write into it... o_O\n+    hostnamectl set-hostname \"$_HOSTNAME\" 2> /dev/null || true\n+    echo \"$_HOSTNAME\" > /etc/hostname\n+    hostname \"$_HOSTNAME\"\n+    if [ \"$HOSTNAME\" != \"localhost\" ]; then\n+        sed -i \"s/$HOSTNAME/$_HOSTNAME/g\" /etc/hosts\n+    fi\n+    export HOSTNAME=\"$_HOSTNAME\"\n+fi\n",
          "commitId": "412bf67d6553eb2391735ed0cb1eba5ba3718d12"
        },
        {
          "id": 3583,
          "oldPath": "targets/base/startup.d/30_ssh-server.sh",
          "newPath": "targets/base/startup.d/30_ssh-server.sh",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,9 @@\n+# ###              SSH             ###\n+add_pertistant_storage /etc/ssh bind\n+\n+if is_identical_file /etc/ssh/ssh_host_rsa_key \\\n+    /lib/live/mount/rootfs/rootfs.squashfs/etc/ssh/ssh_host_rsa_key \\\n+    && [ \"$LIVEBOOTP_PERSISTENCE_ENABLED\" == \"true\" ]; then\n+    rm /etc/ssh/ssh_host_*\n+    dpkg-reconfigure openssh-server\n+fi\n",
          "commitId": "412bf67d6553eb2391735ed0cb1eba5ba3718d12"
        },
        {
          "id": 3584,
          "oldPath": "targets/base/startup.d/99_restart_failed_services.sh",
          "newPath": "targets/base/startup.d/99_restart_failed_services.sh",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,16 @@\n+\n+# Try to restart all failed services\n+for s in $(systemctl list-units --state=failed \\\n+    | awk '\n+        /^  UNIT / {\n+            inner_list=1;\n+            next;\n+        }\n+        /^$/ && inner_list==1 {\n+            exit;\n+        }\n+        (inner_list==1) {\n+            print $2;\n+        }'); do\n+    systemctl restart $s || true &\n+done\n",
          "commitId": "412bf67d6553eb2391735ed0cb1eba5ba3718d12"
        },
        {
          "id": 3585,
          "oldPath": "targets/base/startup.sh",
          "newPath": "targets/base/startup.sh",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,10 @@\n+#!/bin/bash -e\n+# LiveBOOTP startup script\n+\n+. /etc/livebootp/functions.sh\n+\n+for script in $(ls /etc/livebootp/startup.d/??_*.sh); do\n+    . $script\n+done\n+\n+exit 0\n",
          "commitId": "412bf67d6553eb2391735ed0cb1eba5ba3718d12"
        },
        {
          "id": 3586,
          "oldPath": "tools/gitlab-ci/run.d/target-build.sh",
          "newPath": "tools/gitlab-ci/run.d/target-build.sh",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,47 @@\n+\n+citbx_use \"dockerimg\"\n+\n+job_setup() {\n+    # Only on workstation, set the suitable tag prefix if not set\n+    local job_prefix=${CI_JOB_NAME%-build}\n+    CI_COMMIT_TAG=\"$job_prefix/${CI_COMMIT_TAG#$job_prefix/}\"\n+}\n+\n+job_main() {\n+    local pattern='^target-.*-build$'\n+    if ! [[ $CI_JOB_NAME =~ $pattern ]]; then\n+        print_critical \"Target image job name must begin by 'target-' and terminate by '-build'\"\n+    fi\n+    LIBEBOOTP_TARGET_IMAGE_NAME=${CI_JOB_NAME%-build}\n+    pattern='^'\"$LIBEBOOTP_TARGET_IMAGE_NAME\"'/.*$'\n+    if ! [[ $CI_COMMIT_TAG =~ $pattern ]]; then\n+        print_critical \"This job cannot be launched with the following tag '$CI_COMMIT_TAG'\" \\\n+                        \"This error is probably due to:\" \\\n+                        \" * on a Gitlab runner: Missing or incorrect 'only' tag in the .gitlab-ci.yml - You can put this one:\" \\\n+                        \"    only:\" \\\n+                        \"        - /^$LIBEBOOTP_TARGET_IMAGE_NAME\\/.*\\$/\" \\\n+                        \" * on your local worspace: You have launched ci-toolbox $CI_JOB_NAME with the wrong tag - Try with the additional option:\" \\\n+                        \"    --image-tag $LIBEBOOTP_TARGET_IMAGE_NAME/x.y.z\"\n+    fi\n+    LIBEBOOTP_TARGET_IMAGE_NAME=${LIBEBOOTP_TARGET_IMAGE_NAME#target-}\n+    LIBEBOOTP_TARGET_IMAGE_VERS=${CI_COMMIT_TAG#${CI_JOB_NAME%-build}/}\n+    LIBEBOOTP_CI_REGISTRY_IMAGE_TAG=\"$CI_REGISTRY_IMAGE/$LIBEBOOTP_TARGET_IMAGE_NAME:$LIBEBOOTP_TARGET_IMAGE_VERS\"\n+    # Build docker image\n+    LIBEBOOTP_DOCKER_BUILD_ARGS=(-t \"$LIBEBOOTP_CI_REGISTRY_IMAGE_TAG\")\n+    if [ \"$LIBEBOOTP_TARGET_IMAGE_NAME\" != \"base\" ]; then\n+        LIBEBOOTP_DOCKER_BUILD_ARGS+=(--build-arg \"CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE\")\n+    fi\n+    docker build \"${LIBEBOOTP_DOCKER_BUILD_ARGS[@]}\" \\\n+        \"targets/$LIBEBOOTP_TARGET_IMAGE_NAME/\"\n+    if [ -n \"$CI_BUILD_TOKEN\" ]; then\n+        docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY\n+        docker push \"$LIBEBOOTP_CI_REGISTRY_IMAGE_TAG\"\n+    fi\n+}\n+\n+job_after() {\n+    local retcode=$1\n+    if [ $retcode -eq 0 ]; then\n+        print_info \"Image \\\"$LIBEBOOTP_CI_REGISTRY_IMAGE_TAG\\\" successfully generated\"\n+    fi\n+}\n",
          "commitId": "412bf67d6553eb2391735ed0cb1eba5ba3718d12"
        },
        {
          "id": 3587,
          "oldPath": "tools/gitlab-ci/run.d/target-mksquashfs.sh",
          "newPath": "tools/gitlab-ci/run.d/target-mksquashfs.sh",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,73 @@\n+\n+citbx_use \"dockerimg\"\n+\n+job_setup() {\n+    citbx_run_ext_job \"${CI_JOB_NAME%-mksquashfs}-build\"\n+    # Only on workstation, set the suitable tag prefix if not set\n+    local job_prefix=${CI_JOB_NAME%-mksquashfs}\n+    CI_COMMIT_TAG=\"$job_prefix/${CI_COMMIT_TAG#$job_prefix/}\"\n+}\n+\n+job_main() {\n+    local pattern='^target-.*-mksquashfs$'\n+    if ! [[ $CI_JOB_NAME =~ $pattern ]]; then\n+        print_critical \"Target image job name must begin by 'target-' and terminate by '-mksquashfs'\"\n+    fi\n+    LIBEBOOTP_TARGET_NAME=${CI_JOB_NAME%-mksquashfs}\n+    pattern='^'\"$LIBEBOOTP_TARGET_NAME\"'/.*$'\n+    if ! [[ $CI_COMMIT_TAG =~ $pattern ]]; then\n+        print_critical \"This job cannot be launched with the following tag '$CI_COMMIT_TAG'\" \\\n+                        \"This error is probably due to:\" \\\n+                        \" * on a Gitlab runner: Missing or incorrect 'only' tag in the .gitlab-ci.yml - You can put this one:\" \\\n+                        \"    only:\" \\\n+                        \"        - /^$LIBEBOOTP_TARGET_NAME\\/.*\\$/\" \\\n+                        \" * on your local worspace: You have launched ci-toolbox $CI_JOB_NAME with the wrong tag - Try with the additional option:\" \\\n+                        \"    --image-tag $LIBEBOOTP_TARGET_NAME/x.y.z\"\n+    fi\n+    LIBEBOOTP_TARGET_NAME=${LIBEBOOTP_TARGET_NAME#target-}\n+    LIBEBOOTP_TARGET_VERSION=${CI_COMMIT_TAG#${CI_JOB_NAME%-mksquashfs}/}\n+    LIBEBOOTP_DOCKER_IMAGE=\"$CI_REGISTRY_IMAGE/$LIBEBOOTP_TARGET_NAME:$LIBEBOOTP_TARGET_VERSION\"\n+    LIBEBOOTP_IMAGE_DIR=\"${LIBEBOOTP_TARGET_NAME}/$LIBEBOOTP_TARGET_VERSION\"\n+    LIBEBOOTP_IMAGE_PATH=\"$CI_PROJECT_DIR/artifacts/$LIBEBOOTP_IMAGE_DIR\"\n+    # Export docker filesystem\n+    LIBEBOOTP_DOCKER_EXPORT_ID=$(docker run -d \"$LIBEBOOTP_DOCKER_IMAGE\" sleep infinity)\n+    print_note \"Extracting rootfs from $LIBEBOOTP_DOCKER_IMAGE docker image...\"\n+    mkdir -p rootfs\n+    docker export $LIBEBOOTP_DOCKER_EXPORT_ID | sudo tar -C rootfs -x\n+    # Convert VOLUME instruction to add_pertistant_storage commands\n+    if [ $(docker image inspect \"$LIBEBOOTP_DOCKER_IMAGE\" \\\n+        | jq -r '.[0].ContainerConfig.Volumes | length') -gt 0 ]; then\n+        while read -r line; do\n+            echo \"add_pertistant_storage \\\"$line\\\" bind copy\"\n+        done <<< \"$(docker image inspect \"$LIBEBOOTP_DOCKER_IMAGE\" \\\n+            | jq -r '.[0].ContainerConfig.Volumes | keys[]')\" \\\n+            | sudo sudo tee -a rootfs/etc/livebootp/startup.d/40_pesistant-volumes.sh > /dev/null\n+    fi\n+    # Extract vmlinuz & initrd.img files\n+    mkdir -p $LIBEBOOTP_IMAGE_PATH\n+    sudo mv rootfs/boot/vmlinuz-*-generic $LIBEBOOTP_IMAGE_PATH/vmlinuz\n+    sudo mv rootfs/boot/initrd.img-*-generic $LIBEBOOTP_IMAGE_PATH/initrd.img\n+    if [ -f \"rootfs/boot/livebootp-cmdline\" ]; then\n+        sudo mv rootfs/boot/livebootp-cmdline $LIBEBOOTP_IMAGE_PATH/cmdline\n+    fi\n+    # Write image info\n+    printf '%s=\"%s\"'\"\\n\" LIBEBOOTP_TARGET_NAME $LIBEBOOTP_TARGET_NAME \\\n+        LIBEBOOTP_TARGET_VERSION $LIBEBOOTP_TARGET_VERSION \\\n+        LIBEBOOTP_DOCKER_IMAGE $LIBEBOOTP_DOCKER_IMAGE \\\n+        | sudo sudo tee -a rootfs/etc/os-release > /dev/null\n+    # Generate squashfs file\n+    sudo mksquashfs rootfs $LIBEBOOTP_IMAGE_PATH/rootfs.squashfs -no-recovery -noappend -comp lzo -e boot\n+}\n+\n+job_after() {\n+    local retcode=$1\n+    docker rm -f $LIBEBOOTP_DOCKER_EXPORT_ID || true\n+    sudo rm -rf rootfs\n+    if [ -d $LIBEBOOTP_IMAGE_PATH ]; then\n+        sudo chmod +rX -R $LIBEBOOTP_IMAGE_PATH\n+        sudo chown $(id -u):$(id -g) -R $LIBEBOOTP_IMAGE_PATH\n+    fi\n+    if [ $retcode -eq 0 ]; then\n+        print_info \"Image \\\"$LIBEBOOTP_IMAGE_DIR\\\" successfully generated\"\n+    fi\n+}\n",
          "commitId": "412bf67d6553eb2391735ed0cb1eba5ba3718d12"
        }
      ]
    },
    {
      "id": "727d9e87a3ec2aa571ba1b55d95cc146a5e7d7d7",
      "title": "Project initialization: add BOOTP registry part",
      "created_at": "2018-01-19T12:07:35.000Z",
      "message": "Project initialization: add BOOTP registry part\n",
      "author_name": "Emeric Verschuur",
      "diffs": [
        {
          "id": 3588,
          "oldPath": ".gitignore",
          "newPath": ".gitignore",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,2 @@\n+artifacts\n+bootp-registry/config/config.yml\n",
          "commitId": "727d9e87a3ec2aa571ba1b55d95cc146a5e7d7d7"
        },
        {
          "id": 3589,
          "oldPath": ".gitlab-ci.yml",
          "newPath": ".gitlab-ci.yml",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,14 @@\n+\n+bootp-registry:\n+  stage: build\n+  services:\n+  - name: registry.gitlab.com/ercom/docker:17.12.0-ce-dind\n+    alias: docker\n+  variables:\n+    DOCKER_DRIVER: overlay\n+    DOCKER_HOST: tcp://docker:2375\n+  image: registry.gitlab.com/ercom/docker:17.12.0-ce-git\n+  only:\n+    - /^bootp-registry\\/.*$/\n+  script:\n+    - tools/gitlab-ci/run.sh\n",
          "commitId": "727d9e87a3ec2aa571ba1b55d95cc146a5e7d7d7"
        },
        {
          "id": 3590,
          "oldPath": "bootp-registry/Dockerfile",
          "newPath": "bootp-registry/Dockerfile",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,30 @@\n+FROM alpine:3.7\n+\n+RUN apk add --no-cache \\\n+    openrc             \\\n+    nginx              \\\n+    dhcp               \\\n+    tftp-hpa           \\\n+    rsyslog            \\\n+    tar                \\\n+    xz                 \\\n+    jq                 \\\n+    bash               \\\n+    gawk               \\\n+    python             \\\n+    py-yaml\n+\n+ADD https://www.kernel.org/pub/linux/utils/boot/syslinux/syslinux-6.03.tar.xz /tmp/syslinux.tar.xz\n+RUN adduser -S -s /bin/nologin -h /var/lib/tftpboot -D tftp\n+RUN tar -C /var/lib/tftpboot/ --owner=0 --group=0            \\\n+        -xf /tmp/syslinux.tar.xz --transform='s|.*/||'       \\\n+        syslinux-6.03/bios/core/pxelinux.0                   \\\n+        syslinux-6.03/bios/com32/elflink/ldlinux/ldlinux.c32 \\\n+        syslinux-6.03/bios/com32/libutil/libutil.c32         \\\n+        syslinux-6.03/bios/com32/menu/menu.c32 &&            \\\n+    chmod +r /var/lib/tftpboot/* &&                          \\\n+    rm /tmp/syslinux.tar.xz\n+\n+ADD bootp-registry/bootp-registry-ctl.sh /opt/livebootp/bootp-registry-ctl.sh\n+EXPOSE 69/udp 67/udp\n+CMD [\"/opt/livebootp/bootp-registry-ctl.sh\", \"start\"]\n",
          "commitId": "727d9e87a3ec2aa571ba1b55d95cc146a5e7d7d7"
        },
        {
          "id": 3591,
          "oldPath": "bootp-registry/bootp-registry-ctl.sh",
          "newPath": "bootp-registry/bootp-registry-ctl.sh",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,290 @@\n+#!/bin/bash -e\n+\n+# Print an error message and exit with error status 1\n+print_critical() {\n+    >&2 printf \"\\e[91m[CRIT] %s\\e[0m\\n\" \"$@\"\n+    exit 1\n+}\n+\n+# Print an error message\n+print_error() {\n+    >&2 printf \"\\e[91m[ERRO] %s\\e[0m\\n\" \"$@\"\n+}\n+\n+# Print a warning message\n+print_warning() {\n+    >&2 printf \"\\e[93m[WARN] %s\\e[0m\\n\" \"$@\"\n+}\n+\n+# Print a note message\n+print_note() {\n+    printf \"[NOTE] %s\\n\" \"$@\"\n+}\n+\n+# Print an info message\n+print_info() {\n+    printf \"\\e[92m[INFO] %s\\e[0m\\n\" \"$@\"\n+}\n+\n+if [ ! -f /opt/livebootp/etc/config.yml ]; then\n+    print_critical \"File /opt/livebootp/etc/config.yml not found\"\n+fi\n+\n+# YAML to JSON conversion\n+LIVEBOOTP_CONFIG=\"$(cat /opt/livebootp/etc/config.yml \\\n+    | python -c 'import sys, yaml, json; json.dump(yaml.load(sys.stdin), sys.stdout)')\"\n+config_query() {\n+    jq \"$@\" <<< \"$LIVEBOOTP_CONFIG\"\n+}\n+print_info \"Read configuration file: /opt/livebootp/etc/config.yml\"\n+\n+# Read DNS property\n+if [ $(config_query -r '.\"bootp-registry\".\"domain-name-servers\" | length') -gt 0 ]; then\n+    LIVEBOOTP_DNS=($(config_query -r '.\"bootp-registry\".\"domain-name-servers\"[]'))\n+else\n+    LIVEBOOTP_DNS=($(cat /etc/resolv.conf | awk '/^nameserver/ {\n+            if ($2 !~ /^127\\..*/ && $2 != \"::1\" ) {\n+                printf(\" %s\", $2);\n+            }\n+        }' 2> /dev/null || true))\n+fi\n+if [ ${#LIVEBOOTP_DNS[@]} -eq 0 ]; then\n+    print_critical \"No valid DNS found: please provide .\"bootp-registry\".domain-name-servers config property\"\n+fi\n+print_note \"DNS list                     : ${LIVEBOOTP_DNS[*]}\"\n+\n+# Read domain name property\n+if [ $(config_query -r '.\"bootp-registry\".\"domain-name\" | length') -gt 0 ]; then\n+    LIVEBOOTP_DN=\"$(config_query -r '.\"bootp-registry\".\"domain-name\"')\"\n+else\n+    LIVEBOOTP_DN=\"example.com\"\n+fi\n+print_note \"Root domain name             : $LIVEBOOTP_DN\"\n+\n+# Read registry domain property\n+if [ $(config_query -r '.\"bootp-registry\".\"targets-domain-name\" | length') -gt 0 ]; then\n+    LIVEBOOTP_CN=\"$(config_query -r '.\"bootp-registry\".\"targets-domain-name\"')\"\n+else\n+    LIVEBOOTP_CN=\"bootp-registry.$LIVEBOOTP_DN\"\n+fi\n+print_note \"Registry domain name         : $LIVEBOOTP_CN\"\n+\n+# Read listen interface property\n+if [ $(config_query -r '.\"bootp-registry\".\"listen-intf\" | length') -gt 0 ]; then\n+    LIVEBOOTP_INTF=\"$(config_query -r '.\"bootp-registry\".\"listen-intf\"')\"\n+else\n+    LIVEBOOTP_INTF=\"$(ip -4 route show | awk '/^default / {print $5; exit;}')\"\n+fi\n+print_note \"Listen on interface          : $LIVEBOOTP_INTF\"\n+\n+# Read routers property\n+if [ $(config_query -r '.\"bootp-registry\".\"routers\" | length') -gt 0 ]; then\n+    LIVEBOOTP_ROUTER=($(config_query -r '.\"bootp-registry\".\"routers\"[]'))\n+else\n+    LIVEBOOTP_ROUTER=\"$(ip -4 route show | awk '/^default / {print $3; exit;}')\"\n+fi\n+print_note \"Using router                 : $LIVEBOOTP_ROUTER\"\n+\n+# Read bootp-registry address\n+if [ $(config_query -r '.\"bootp-registry\".address | length') -gt 0 ]; then\n+    LIVEBOOTP_ADDR=\"$(config_query -r '.\"bootp-registry\".address')\"\n+else\n+    LIVEBOOTP_ADDR=\"$(ip -4 addr show dev $LIVEBOOTP_INTF | awk '/^    inet / { print $2}')\"\n+fi\n+print_note \"Server adress                : $LIVEBOOTP_ADDR\"\n+\n+cdr2mask() {\n+   # Number of args to shift, 255..255, first non-255 byte, zeroes\n+   set -- $(( 5 - ($1 / 8) )) 255 255 255 255 $(( (255 << (8 - ($1 % 8))) & 255 )) 0 0 0\n+   [ $1 -gt 1 ] && shift $1 || shift\n+   echo ${1-0}.${2-0}.${3-0}.${4-0}\n+}\n+\n+netaddr() {\n+    IFS=. read -r i1 i2 i3 i4 <<< $1\n+    IFS=. read -r m1 m2 m3 m4 <<< $2\n+    printf \"%d.%d.%d.%d\\n\" \"$((i1 & m1))\" \"$((i2 & m2))\" \"$((i3 & m3))\" \"$((i4 & m4))\"\n+}\n+\n+# Get network mask\n+LIVEBOOTP_NETMASK=$(cdr2mask ${LIVEBOOTP_ADDR#*/})\n+print_note \"Server netmask               : $LIVEBOOTP_NETMASK\"\n+\n+# Get network adress\n+LIVEBOOTP_IP=${LIVEBOOTP_ADDR%/*}\n+LIVEBOOTP_NETADDR=$(netaddr $LIVEBOOTP_IP $LIVEBOOTP_NETMASK)\n+print_note \"Network adress               : $LIVEBOOTP_NETADDR\"\n+\n+# Read ssh keys url property\n+if [ $(config_query -r '.\"bootp-registry\".\"ssh-authorized-keys-base-url\" | length') -gt 0 ]; then\n+    LIVEBOOTP_SSH_AUTHORIZED_KEYS_BASE_URL=\"$(config_query -r '.\"bootp-registry\".\"ssh-authorized-keys-base-url\"')\"\n+else\n+    LIVEBOOTP_SSH_AUTHORIZED_KEYS_BASE_URL=\"http://$LIVEBOOTP_IP/ssh_authorized_keys\"\n+fi\n+print_note \"SSH authorized keys base URL : $LIVEBOOTP_SSH_AUTHORIZED_KEYS_BASE_URL\"\n+\n+# Read image url property\n+if [ $(config_query -r '.\"bootp-registry\".\"image-repo-url\" | length') -gt 0 ]; then\n+    LIVEBOOTP_SQUASHFS_REPO_URL=\"$(config_query -r '.\"bootp-registry\".\"image-repo-url\"')\"\n+else\n+    LIVEBOOTP_SQUASHFS_REPO_URL=\"http://$LIVEBOOTP_IP/images\"\n+fi\n+print_note \"SquashFS Image repo URL      : $LIVEBOOTP_SQUASHFS_REPO_URL\"\n+\n+LIVEBOOTP_DHCPD_CONF=\"/etc/dhcp/dhcpd.conf\"\n+LIVEBOOTP_TFTPROOT=\"/var/lib/tftpboot\"\n+LIVEBOOTP_SSH_HOST_CONFIG=\"$LIVEBOOTP_TFTPROOT/ssh_host_config.txt\"\n+LIVEBOOTP_PXELINCFG=\"$LIVEBOOTP_TFTPROOT/pxelinux.cfg\"\n+\n+# Generate dhcpd.conf head\n+cat > $LIVEBOOTP_DHCPD_CONF << EOF\n+ddns-update-style none;\n+option domain-name \"$LIVEBOOTP_DN\";\n+option domain-name-servers $(IFS=$','; echo \"${LIVEBOOTP_DNS[*]}\");\n+default-lease-time 3600;\n+max-lease-time 86400;\n+authoritative;\n+log-facility local7;\n+subnet $LIVEBOOTP_NETADDR netmask $LIVEBOOTP_NETMASK {\n+    option routers $(IFS=$','; echo \"${LIVEBOOTP_ROUTER[*]}\");\n+    next-server $LIVEBOOTP_IP;\n+    filename \"pxelinux.0\";\n+EOF\n+\n+URL_PATTERN='^\\w+://'\n+> \"$LIVEBOOTP_SSH_HOST_CONFIG\"\n+\n+for host in $(config_query -r '. | keys[]' | grep -E -v '^(^\\..*|bootp\\-registry)$'); do\n+    print_note \"Reading host $host...\"\n+    host_cfg_state=\"ok\"\n+    prefix=\".\\\"$host\\\"\"\n+    hwaddr=$(config_query -r \"$prefix\"'.\"hardware-ethernet\"')\n+    address=$(config_query -r \"$prefix\"'.\"fixed-address\"')\n+    image=$(config_query -r \"$prefix\"'.\"image-name\"')\n+    ssh_auth_keys=$(config_query -r \"$prefix\"'.\"ssh-authorized-keys\"')\n+    cmdline_append=$(config_query -r \"$prefix\"'.\"cmdline-append\"')\n+    persistence_disabled=$(config_query -r \"$prefix\"'.\"persistence-disabled\"')\n+    if [ \"$hwaddr\" != \"null\" ]; then\n+        print_note \" * HW address                      : $hwaddr\"\n+    else\n+        host_cfg_state=\"ko\"\n+        print_error \"Missing hardware-ethernet property\"\n+    fi\n+    if [ \"$address\" != \"null\" ]; then\n+        print_note \" * Fixed address                   : $address\"\n+    else\n+        host_cfg_state=\"ko\"\n+        print_error \"Missing fixed-address property\"\n+    fi\n+    if [ \"$host_cfg_state\" == \"ko\" ]; then\n+        print_warning \"Skipping this host due to previous errors\"\n+        continue\n+    fi\n+    cat >> $LIVEBOOTP_DHCPD_CONF << EOF\n+    host $host {\n+        hardware ethernet $hwaddr;\n+        fixed-address $address;\n+    }\n+EOF\n+    cat >> $LIVEBOOTP_SSH_HOST_CONFIG << EOF\n+Host $host\n+HostName $address\n+User root\n+\n+EOF\n+    if [ \"$image\" != \"null\" ]; then\n+        print_note \" * Image name                      : $image\"\n+        if [[ \"$image\" =~ $URL_PATTERN ]]; then\n+            image_url=\"$image\"\n+        else\n+            image_url=\"$LIVEBOOTP_SQUASHFS_REPO_URL/$image\"\n+        fi\n+    else\n+        print_warning \" * No image-name property found, skipping bootp part for this host...\"\n+        continue\n+    fi\n+    if [ \"$ssh_auth_keys\" != \"null\" ]; then\n+        print_note \" * SSH authorized keys file used   : $ssh_auth_keys\"\n+        if [[ \"$ssh_auth_keys\" =~ $URL_PATTERN ]]; then\n+            ssh_auth_keys_path=\"$ssh_auth_keys\"\n+        else\n+            ssh_auth_keys_path=\"$LIVEBOOTP_SSH_AUTHORIZED_KEYS_BASE_URL/$ssh_auth_keys\"\n+        fi\n+    else\n+        print_critical \"Missing ssh-authorized-keys property\"\n+    fi\n+    mkdir -p $LIVEBOOTP_TFTPROOT/pxelinux.cfg\n+    cat > \"$LIVEBOOTP_TFTPROOT/pxelinux.cfg/01-${hwaddr//:/-}\" << EOF\n+UI menu.c32\n+PROMPT 0\n+\n+MENU TITLE Boot Menu\n+TIMEOUT 10\n+DEFAULT liveboot\n+\n+LABEL liveboot\n+        MENU LABEL Live boot image $image\n+        LINUX images/$image/vmlinuz\n+        APPEND initrd=images/$image/initrd.img boot=live dhcp hostname=$host fetch=$image_url/rootfs.squashfs fetch-ssh-authorized-keys=$ssh_auth_keys_path $(test \"$persistence_disabled\" == \"true\" || echo \"persistence\") $cmdline_append $(test ! -f images/$image/cmdline || cat images/$image/cmdline | tr '\\n' ' ')\n+\n+EOF\n+done\n+echo \"}\" >> $LIVEBOOTP_DHCPD_CONF\n+\n+cat > /etc/nginx/conf.d/default.conf <<EOF\n+server {\n+        listen $LIVEBOOTP_IP:80;\n+\n+        root /var/lib/tftpboot;\n+        index index.html;\n+\n+        server_name $LIVEBOOTP_IP $LIVEBOOTP_CN;\n+\n+        location / {\n+                autoindex on;\n+                try_files \\$uri \\$uri/ =404;\n+        }\n+}\n+EOF\n+\n+# DHCP conf sanity check\n+if ! /usr/sbin/dhcpd -t -q -cf \"$LIVEBOOTP_DHCPD_CONF\" > /dev/null 2>&1; then\n+    print_critical \"dhcpd self-test failed. Please fix $LIVEBOOTP_DHCPD_CONF.\" \\\n+                \"The error was: $(/usr/sbin/dhcpd -t -cf \"$LIVEBOOTP_DHCPD_CONF\" 2>&1)\"\n+fi\n+touch /var/lib/dhcp/dhcpd.leases\n+print_info \"Read configuration file [DONE]\"\n+\n+LIVEBOOTP_DHCPD_PID=\"/run/dhcpd.pid\"\n+case \"$1\" in\n+    start)\n+        if [ -e \"/run/rsyslogd.pid\" ]; then\n+            print_critical \"Already started, please use rotate/reload action, otherwise restart docker instance\"\n+        fi\n+        start-stop-daemon --start --quiet --pidfile /run/rsyslogd.pid \\\n+                --exec /usr/sbin/rsyslogd --\n+        mkdir -p /run/nginx\n+        start-stop-daemon --start --quiet --pidfile /run/nginx/nginx.pid \\\n+                --exec /usr/sbin/nginx -- -c /etc/nginx/nginx.conf\n+        start-stop-daemon --start --quiet --exec /usr/sbin/in.tftpd -- \\\n+                --listen --user tftp --address $LIVEBOOTP_IP:69 \\\n+                --secure $LIVEBOOTP_TFTPROOT\n+        start-stop-daemon --start --quiet --pidfile \"$LIVEBOOTP_DHCPD_PID\" \\\n+                --exec /usr/sbin/dhcpd -- \\\n+                -cf \"$LIVEBOOTP_DHCPD_CONF\" -pf \"$LIVEBOOTP_DHCPD_PID\" $LIVEBOOTP_INTF\n+        while [ -e /run/rsyslogd.pid ]; do\n+            tail -f /var/log/messages\n+        done\n+        ;;\n+    rotate)\n+        start-stop-daemon --stop --signal HUP --quiet --pidfile /run/rsyslogd.pid \\\n+                --exec /usr/sbin/rsyslogd\n+        ;;\n+    reload)\n+        start-stop-daemon --stop --quiet --pidfile \"$LIVEBOOTP_DHCPD_PID\"\n+        sleep 2\n+        start-stop-daemon --start --quiet --pidfile \"$LIVEBOOTP_DHCPD_PID\" \\\n+                --exec /usr/sbin/dhcpd -- \\\n+                -cf \"$LIVEBOOTP_DHCPD_CONF\" -pf \"$LIVEBOOTP_DHCPD_PID\" $LIVEBOOTP_INTF\n+        ;;\n+esac\n",
          "commitId": "727d9e87a3ec2aa571ba1b55d95cc146a5e7d7d7"
        },
        {
          "id": 3592,
          "oldPath": "bootp-registry/config/config-default.yml",
          "newPath": "bootp-registry/config/config-default.yml",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,69 @@\n+# BOOTP registry configuration\n+#bootp-registry:\n+#    # Domain name used by the DHCP server\n+#    # [Optional] Default value: 'search' property from /etc/resolv.conf file\n+#    domain-name: example.com\n+#\n+#    # Listen interface used by the DHCP server\n+#    # [Optional] Default value: network interface used by the default route\n+#    listen-intf: eth0\n+#\n+#    # Registry IP address and prefix\n+#    # [Optional] Default value: the first IP address on listen-intf\n+#    address: 192.168.254.254/24\n+#\n+#    # Gateway list\n+#    # [Optional] Default value: the system default route\n+#    routers:\n+#        - 192.168.254.1\n+#\n+#    # Domain name server list\n+#    # [Optional] Default value: 'nameserver' properties from /etc/resolv.conf file\n+#    domain-name-servers:\n+#        - 8.8.8.8\n+#        - 9.9.9.9\n+\n+# Host template example\n+#.host-generic: &host-generic\n+#    # Target image: image_name/image_version\n+#    # [Optional] Default value: empty\n+#    # If this value is empty, the registry will only provide an IP address to the host (without BOOTP)\n+#    image-name: generic/test\n+#\n+#    # SSH authorized file name for this host\n+#    # [Required if image-name is set]\n+#    ssh-authorized-keys: default\n+\n+# Host template extension example with debug option enable\n+#.host-generic-debug: &host-generic-debug\n+#    # Use host-generic template\n+#    <<: *host-generic\n+#\n+#    # Add vmlinuz kernel options\n+#    # [Optional] Default value: empty\n+#    cmdline-append: debug\n+\n+# Host definition example with BOOTP\n+#my-host-with-liveboot:\n+#\n+#    # MAC address for this host\n+#    # [Required]\n+#    hardware-ethernet: \"52:54:00:12:34:56\"\n+#\n+#    # IP address for this host\n+#    # [Required]\n+#    fixed-address: \"192.168.254.10\"\n+#\n+#    # Use host-generic template\n+#    <<: *host-generic\n+\n+# Host definition example without BOOTP\n+#my-host-without-liveboot:\n+#\n+#    # MAC address for this host\n+#    # [Required]\n+#    hardware-ethernet: \"52:54:00:12:34:99\"\n+#\n+#    # IP address for this host\n+#    # [Required]\n+#    fixed-address: \"192.168.254.20\"\n",
          "commitId": "727d9e87a3ec2aa571ba1b55d95cc146a5e7d7d7"
        },
        {
          "id": 3593,
          "oldPath": "bootp-registry/config/config-test.yml",
          "newPath": "bootp-registry/config/config-test.yml",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,12 @@\n+\n+bootp-registry:\n+    domain-name-servers:\n+        - 8.8.8.8\n+        - 9.9.9.9\n+\n+test-host:\n+    hardware-ethernet: \"52:54:00:12:34:56\"\n+    fixed-address: \"192.168.254.50\"\n+    image-name: generic/test\n+    ssh-authorized-keys: default\n+    cmdline-append: debug\n",
          "commitId": "727d9e87a3ec2aa571ba1b55d95cc146a5e7d7d7"
        },
        {
          "id": 3594,
          "oldPath": "bootp-registry/start-registry-devtool.sh",
          "newPath": "bootp-registry/start-registry-devtool.sh",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,56 @@\n+#!/bin/sh -e\n+\n+# Print an error message and exit with error status 1\n+print_critical() {\n+    >&2 printf \"\\e[91m[CRIT] %s\\e[0m\\n\" \"$@\"\n+    exit 1\n+}\n+\n+# Print an info message\n+print_info() {\n+    printf \"\\e[92m[INFO] %s\\e[0m\\n\" \"$@\"\n+}\n+\n+# Print a warning message\n+print_warning() {\n+    >&2 printf \"\\e[93m[WARN] %s\\e[0m\\n\" \"$@\"\n+}\n+\n+IMAGE_NAME=$1\n+LIVEBOOTP_PROJECT_DIR=$(readlink -f $(dirname $0)/..)\n+\n+if [ -z \"$IMAGE_NAME\" ]; then\n+    print_critical \"Use $0: <bootp-registry image name>\"\n+fi\n+\n+if [ ! -f \"$LIVEBOOTP_PROJECT_DIR/bootp-registry/config/config.yml\" ]; then\n+    cp \"$LIVEBOOTP_PROJECT_DIR/bootp-registry/config/config-test.yml\" \"$LIVEBOOTP_PROJECT_DIR/bootp-registry/config/config.yml\"\n+    print_warning \"No $LIVEBOOTP_PROJECT_DIR/bootp-registry/config/config.yml found\" \\\n+                \"  A new $LIVEBOOTP_PROJECT_DIR/bootp-registry/config/config.yml configuration file will be generated using $LIVEBOOTP_PROJECT_DIR/bootp-registry/config/config-test.yml\" \\\n+                \"> You will have to edit the file $LIVEBOOTP_PROJECT_DIR/bootp-registry/config/config.yml and update:\" \\\n+                \"  * The 'hardware-ethernet' property with the test host MAC adress\" \\\n+                \"  * The 'image-name' property with the image/version to test\"\n+fi\n+\n+if ! docker network inspect livebootp > /dev/null 2>&1; then\n+    if ip -4 route | grep -q ^192.168.254; then\n+        print_critical \"Subnet 192.168.254.0/24 seems to be already used, please edit this script to choose an other one\"\n+    fi\n+    docker network create --subnet=192.168.254.0/24 livebootp\n+fi\n+\n+BRIDGE_NAME=\"br-$(docker network inspect livebootp | jq -r '.[0].Id[0:12]')\"\n+print_info \"Starting bootp registry...\" \\\n+    \" => You have to use the bridge $BRIDGE_NAME\" \\\n+    \"type 'docker exec bootp-registry /opt/livebootp/bootp-registry-ctl.sh reload' to reload the configuration\" \\\n+    \"> You can also setup a qemu guest with libvirt simply by running this command:\n+$ virt-install --connect qemu:///system --name my-target --vcpus 1 --memory 1024 \\\\\n+    --pxe --disk size=10 --boot network --os-variant ubuntu16.04 \\\\\n+    --network bridge=$BRIDGE_NAME,model=virtio,mac=52:54:00:12:34:56 \\\\\n+    --noreboot --noautoconsole --wait 0\"\n+set -x\n+exec docker run --name bootp-registry --rm -ti --tmpfs /var/run \\\n+    -v $LIVEBOOTP_PROJECT_DIR/bootp-registry/config:/opt/livebootp/etc \\\n+    -v $LIVEBOOTP_PROJECT_DIR/artifacts:/var/lib/tftpboot/images \\\n+    -v $HOME/.ssh/id_rsa.pub:/var/lib/tftpboot/ssh_authorized_keys/default \\\n+    --network livebootp \"$IMAGE_NAME\"\n",
          "commitId": "727d9e87a3ec2aa571ba1b55d95cc146a5e7d7d7"
        },
        {
          "id": 3595,
          "oldPath": "tools/gitlab-ci/run.d/bootp-registry.sh",
          "newPath": "tools/gitlab-ci/run.d/bootp-registry.sh",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,35 @@\n+\n+citbx_use \"dockerimg\"\n+\n+job_setup() {\n+    # Only on workstation, set the suitable tag prefix if not set\n+    CI_COMMIT_TAG=\"$CI_JOB_NAME/${CI_COMMIT_TAG#$CI_JOB_NAME/}\"\n+}\n+\n+job_main() {\n+    local pattern='^'\"$CI_JOB_NAME\"'/.*$'\n+    if ! [[ $CI_COMMIT_TAG =~ $pattern ]]; then\n+        print_critical \"This job cannot be launched with the following tag '$CI_COMMIT_TAG'\" \\\n+                        \"This error is probably due to:\" \\\n+                        \" * on a Gitlab runner: Missing or incorrect 'only' tag in the .gitlab-ci.yml - You can put this one:\" \\\n+                        \"    only:\" \\\n+                        \"        - /^$CI_JOB_NAME\\/.*\\$/\" \\\n+                        \" * on your local worspace: You have launched ci-toolbox $CI_JOB_NAME with the wrong tag - Try with the additional option:\" \\\n+                        \"    --image-tag $CI_JOB_NAME/x.y.z\"\n+    fi\n+    docker build -f bootp-registry/Dockerfile -t $CI_REGISTRY_IMAGE/bootp-registry:${CI_COMMIT_TAG#bootp-registry/} .\n+    if [ -n \"$CI_BUILD_TOKEN\" ]; then\n+        docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN ${CI_REGISTRY};\n+        docker push $CI_REGISTRY_IMAGE/bootp-registry:${CI_COMMIT_TAG#bootp-registry/};\n+    fi\n+}\n+\n+job_after() {\n+    local retcode=$1\n+    if [ $retcode -eq 0 ]; then\n+        local imgname=\"$CI_REGISTRY_IMAGE/bootp-registry:${CI_COMMIT_TAG#bootp-registry/}\"\n+        print_info \"Image \\\"$imgname\\\" successfully generated\" \\\n+                    \"> You can now test this image by running the following script like this:\" \\\n+                    \"> $ $CI_PROJECT_DIR/bootp-registry/start-registry-devtool.sh $imgname\"\n+    fi\n+}\n",
          "commitId": "727d9e87a3ec2aa571ba1b55d95cc146a5e7d7d7"
        }
      ]
    },
    {
      "id": "32bb094a7917395d26545900b3a9feb5525cc2fa",
      "title": "Project initialization: add dockerimg module from ercom/docker project",
      "created_at": "2018-01-17T18:37:09.000Z",
      "message": "Project initialization: add dockerimg module from ercom/docker project\n",
      "author_name": "Emeric Verschuur",
      "diffs": [
        {
          "id": 3596,
          "oldPath": "tools/gitlab-ci/modules/dockerimg.sh",
          "newPath": "tools/gitlab-ci/modules/dockerimg.sh",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,38 @@\n+\n+citbx_module_dockerimg_define() {\n+    local prj_name=$(git remote -v \\\n+        | gawk '\n+            match($0, /^origin\\s.*:[\\/]*(.*)\\.git\\s.*$/, ret) {\n+                print ret[1];\n+                exit;\n+            }\n+            match($0, /^origin\\s.*:[\\/]*(.*)\\s.*$/, ret) {\n+                print ret[1];\n+                exit;\n+            }')\n+    local declare_opts=()\n+    if [ -n \"$prj_name\" ]; then\n+        declare_opts+=(-x \"\\\"\\$CI_REGISTRY/$prj_name\\\"\")\n+    fi\n+    bashopts_declare -n CI_REGISTRY_IMAGE -l image-name -d \"Registry image name\" -t string \"${declare_opts[@]}\"\n+    bashopts_declare -n CI_COMMIT_TAG -l image-tag -d \"Image tag\" -t string -v \"test\"\n+    bashopts_declare -n USE_DIND_SERVICE -l use-dind -d \"Use the dind docker service instead of the host docker instance\" -t boolean\n+}\n+\n+citbx_module_dockerimg_setup() {\n+    if [ $CITBX_UID -ne 0 ]; then\n+        DOCKER_GID=$(awk -F ':' '/docker:/ {print $3; exit;}' /etc/group)\n+        citbx_export DOCKER_GID\n+    fi\n+    CITBX_USER_GROUPS+=(docker)\n+    citbx_export CI_REGISTRY_IMAGE CI_COMMIT_TAG\n+    bashopts_process_option -n CI_REGISTRY_IMAGE -r\n+    if [ \"$USE_DIND_SERVICE\" == \"false\" ]; then\n+        CITBX_DISABLED_SERVICES+=(docker)\n+    fi\n+    pattern='\\bdocker\\b'\n+    if [[ \"${CITBX_DISABLED_SERVICES[*]}\" =~ $pattern ]]; then\n+        DOCKER_HOST=\"unix:///var/run/docker.sock\"\n+        citbx_export DOCKER_HOST\n+    fi\n+}\n",
          "commitId": "32bb094a7917395d26545900b3a9feb5525cc2fa"
        }
      ]
    },
    {
      "id": "6d8343b6a739a8d09744f699ab8bb5330c62c494",
      "title": "Project initialization: add CI toolbox part (version 3.3.1)",
      "created_at": "2018-01-17T18:37:09.000Z",
      "message": "Project initialization: add CI toolbox part (version 3.3.1)\n",
      "author_name": "Emeric Verschuur",
      "diffs": [
        {
          "id": 3597,
          "oldPath": "tools/gitlab-ci/3rdparty/bashopts.sh",
          "newPath": "tools/gitlab-ci/3rdparty/bashopts.sh",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,825 @@\n+# Copyright 2017 Emeric Verschuur <emeric@mbedsys.org>\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+set -e\n+\n+BASHOPTS_VERSION=2.0.0\n+\n+bashopts_exit_handle() {\n+  local err=$?\n+  set +o xtrace\n+  local code=\"${1:-1}\"\n+  echo \"Error in ${BASH_SOURCE[1]}:${BASH_LINENO[0]}. '${BASH_COMMAND}' exited with status $err\"\n+  # Print out the stack trace described by $function_stack\n+  if [ ${#FUNCNAME[@]} -gt 2 ]\n+  then\n+    echo \"Call tree:\"\n+    for ((i=1;i<${#FUNCNAME[@]}-1;i++))\n+    do\n+      echo \" $i: ${BASH_SOURCE[$i+1]}:${BASH_LINENO[$i]} ${FUNCNAME[$i]}(...)\"\n+    done\n+  fi\n+  echo \"Exiting with status ${code}\"\n+  exit \"${code}\"\n+}\n+\n+# trap ERR to provide an error handler whenever a command exits nonzero\n+#  this is a more verbose version of set -o errexit\n+trap 'bashopts_exit_handle' ERR\n+# setting errtrace allows our ERR trap handler to be propagated to functions,\n+#  expansions and subshells\n+set -o errtrace\n+\n+# display a error (fatal)\n+bashopts_log() {\n+    if [ -n \"$bashopts_log_handler\" ]; then\n+        $bashopts_log_handler \"$@\"\n+        return;\n+    fi\n+    local level=$1;\n+    shift || bashopts_log C \"Usage bashopts_log <level> message\"\n+    case \"${level,,}\" in\n+        c|critical)\n+            >&2 printf \"[CRIT] %s\\n\" \"$@\"\n+            exit 1\n+            ;;\n+        e|error)\n+            >&2 printf \"[ERRO] %s\\n\" \"$@\"\n+            ;;\n+        w|warning)\n+            >&2 printf \"[WARN] %s\\n\" \"$@\"\n+            ;;\n+        *)\n+            bashopts_log C \"Invalid log level: $level\"\n+            ;;\n+    esac\n+}\n+\n+if [ ! \"${BASH_VERSINFO[0]}\" -ge 4 ]; then\n+    bashopts_log C \"bashopts require BASH version 4 or greater\"\n+fi\n+\n+# extract the value part of a declaration (\"the value\")\n+bashopts_get_def() {\n+    declare | grep \"^$1=\" | sed -E 's/^[^=]+=//g'\n+    # NOTE: alternative but not working in some case...:\n+    # declare -p $1 | sed -E \"s/^declare\\\\s[^=]*=//g\"\n+}\n+\n+# extract the full declaration (name=\"the value\")\n+bashopts_get_def_full() {\n+    declare | grep \"^$1=\"\n+    # NOTE: alternative but not working in some case...:\n+    # declare -p $1 | sed -E \"s/^declare\\\\s[^=]*=/$1=/g\"\n+}\n+\n+# check and format an option name value\n+bashopts_check_opt_name() {\n+    if [[ \"$1\" =~ ^[a-zA-Z0-9_]+$ ]]; then\n+        echo $1\n+        return 0\n+    fi\n+    bashopts_log E \"'$1' is not a valid variable name\"\n+    return 1\n+}\n+\n+# check and format a number value\n+bashopts_check_number() {\n+    if [ -z \"$1\" ]; then\n+        echo 0\n+        return 0\n+    elif [[ \"$1\" =~ ^-?[0-9]+([.][0-9]+)?$ ]]; then\n+        echo $1\n+        return 0\n+    fi\n+    bashopts_log E \"Option $op: '$1' is not a valid number\"\n+    return 1\n+}\n+\n+# check and format a boolean value\n+bashopts_check_boolean() {\n+    case \"${1,,}\" in\n+        ''|f|false|0)\n+            echo \"false\"\n+            return 0\n+            ;;\n+        t|true|1)\n+            echo \"true\"\n+            return 0\n+            ;;\n+        *)\n+            bashopts_log E \"Option $op: '$1' is not a valid boolean value\"\n+            return 1\n+            ;;\n+    esac\n+}\n+\n+# check and format a string value\n+bashopts_check_string() {\n+    echo \"$1\"\n+    return 0\n+}\n+\n+# check and format a enumeration value\n+bashopts_check_enumeration() {\n+    local line expr values\n+    while read -r line; do\n+        expr=\"^($line)\\$\"\n+        if [[ \"$1\" =~ $expr ]]; then\n+            echo \"${line##*|}\"\n+            return 0\n+        fi\n+        values+=(\"'${line##*|}'\")\n+    done <<< \"${2:-${bashopts_optprop_enum_values[$op]}}\"\n+    bashopts_log E \"Option $op: Invalid value '$1' (accepted values are: ${values[*]})\"\n+    return 1\n+}\n+\n+# check nothing\n+bashopts_check_nothing() {\n+    echo \"$1\"\n+    return 0\n+}\n+\n+# declare the options property arrays\n+for f in name default expression short_opt long_opt description type enum_values method check setting interactive req_value; do\n+    eval declare -x -A bashopts_optprop_$f\n+done\n+\n+# declare the associative array: arg name => option name\n+declare -x -A bashopts_arg2op\n+# option list in the declaration order\n+bashopts_optlist=()\n+# commands list (from global tool_name [args] [commands] [-- optional extra args])\n+bashopts_commands=()\n+# extra arguments list (from global tool_name [args] [commands] [-- optional extra args])\n+bashopts_extra_args=()\n+# tool name (from global tool_name [args] [commands] [-- optional extra args])\n+bashopts_tool_name=$0\n+\n+# STEP 1: setup\n+bashopts_setup() {\n+    local arg arglist no_default_opts non_interactive disable_interactive\n+    if ! arglist=$(getopt -o \"n:d:u:s:yxp\" -n \"$0 \" -- \"$@\"); then\n+        bashopts_log C \"Usage bashopts_setup:\" \\\n+            \"        -n <val>  Tool name\" \\\n+            \"        -d <val>  Tool description\" \\\n+            \"        -u <val>  Tool usage description\" \\\n+            \"        -s <val>  setting file path\" \\\n+            \"        -y        Set non interactive mode as the default mode\" \\\n+            \"        -x        Disable entirely interactive mode\" \\\n+            \"        -p        Force value storage even if the value is equal to the default one\"\n+    fi\n+    eval set -- \"$arglist\";\n+    # Store the global bashopts properties\n+    while true; do\n+        arg=$1\n+        shift\n+        case \"$arg\" in\n+            -n) bashopts_tool_name=$1;           shift;;\n+            -d) bashopts_tool_description=$1;    shift;;\n+            -u) bashopts_tool_usage=$1;          shift;;\n+            -s) bashopts_tool_settings_path=$1;  shift;;\n+            -y) non_interactive=\"true\";;\n+            -x) disable_interactive=\"true\";;\n+            -p) bashopts_tool_settings_force_write=\"true\";;\n+            --) break;;\n+            *)  bashopts_log C \"Fatal error\";;\n+        esac\n+    done\n+    if [ -z \"$bashopts_tool_name\" ]; then\n+        bashopts_log C \"Undefined tool name\"\n+    fi\n+    if [ -z \"$bashopts_tool_description\" ]; then\n+        bashopts_log C \"Undefined tool description\"\n+    fi\n+    bashopts_tool_usage=${bashopts_tool_usage:-\"$bashopts_tool_name [options and commands] [-- [extra args]]\"}\n+    # add the default options\n+    bashopts_declare -n __BASHOPTS_DISPLAY_HELP__ -l help -o h -d \"Display this help\"\n+    if [ \"$disable_interactive\" == \"true\" ]; then\n+        BASHOPTS_INTERACTIVE=\"false\"\n+    else\n+        if [ \"$non_interactive\" == \"true\" ]; then\n+            bashopts_declare -n BASHOPTS_INTERACTIVE -l interactive -o i -d \"Interactive mode\"\n+        else\n+            bashopts_declare -n BASHOPTS_NON_INTERACTIVE -l non-interactive -o n -d \"Non interactive mode\"\n+        fi\n+    fi\n+}\n+\n+# STEP 2: add options\n+bashopts_declare() {\n+    local arg arglist options options_enum_values\n+    if ! arglist=$(getopt -o \"n:v:x:o:l:d:t:e:m:k:rsi\" -n \"$0 \" -- \"$@\"); then\n+        bashopts_log C \"Usage bashopts_declare:\" \\\n+            \"        -n <val>  Name\" \\\n+            \"        -v <val>  Default value\" \\\n+            \"        -x <val>  Bash expression: like default but this expression is computed and can contain variables and other bash expression\" \\\n+            \"        -o <val>  Short option\" \\\n+            \"        -l <val>  Long option\" \\\n+            \"        -d <val>  Description\" \\\n+            \"        -t <val>  Value type: string, enumeration, number, boolean (default)\" \\\n+            \"        -e <val>  Enum element: restrict accepted values with a list of '-e <element>' options (you have to set one '-e <val>' by elements)\" \\\n+            \"        -m <val>  Method: set (DEFAULT: simple value), add (list with several values)\" \\\n+            \"        -k <val>  Custom check method (bash function)\" \\\n+            \"        -r        Value required\" \\\n+            \"        -i        Enable interactive edition\" \\\n+            \"        -s        Store in setting\"\n+    fi\n+    eval set -- \"$arglist\";\n+    declare -A options\n+    # parse all the parameters\n+    while true; do\n+        arg=$1\n+        shift\n+        case \"$arg\" in\n+            -n) options[name]=$(bashopts_check_opt_name $1 || exit 1); shift;;\n+            -v) options[default]=$1;        shift;;\n+            -x) options[expression]=$1;     shift;;\n+            -o) options[short_opt]=$1;      shift;;\n+            -l) options[long_opt]=$1;       shift;;\n+            -d) options[description]=$1;    shift;;\n+            -t) options[type]=$1;           shift;;\n+            -e) options_enum_values+=($1);  shift;;\n+            -m) options[method]=$1;         shift;;\n+            -k) options[check]=$1;          shift;;\n+            -s) options[setting]=\"true\";;\n+            -i) options[interactive]=\"true\";;\n+            -r) options[req_value]=\"true\";;\n+            --) break;;\n+            *)  bashopts_log C \"Fatal error\";;\n+        esac\n+    done\n+    # Check incompatible -v and -r options\n+    if [ -n \"${options[default]}\" ] && [ \"${options[req_value]}\" == \"true\" ]; then\n+        bashopts_log C \"bashopts_declare: -r and -v options cannot be activated at the same time\"\n+    fi\n+    # format the type and check/format the default value\n+    case \"${options[type],,}\" in\n+        ''|b|bool|boolean)\n+            options[type]=\"boolean\"\n+            ;;\n+        e|enum|enumeration)\n+            options[type]=\"enumeration\"\n+            if [ ${#options_enum_values[@]} -lt 2 ]; then\n+                bashopts_log C \"bashopts_declare: ${options[name]} enumeration need at least two elements (two '-e <val>' calls at least)\"\n+            fi\n+            options[enum_values]=\"$(IFS=$'\\n'; echo \"${options_enum_values[*]}\")\"\n+            ;;\n+        s|str|string)\n+            options[type]=\"string\"\n+            ;;\n+        n|num|number)\n+            options[type]=\"number\"\n+            ;;\n+        *)\n+            bashopts_log C \"Invalid type ${options[type]}\"\n+            ;;\n+    esac\n+    # Check for incompatibility with old version (-e opt moved to -x)\n+    if [ \"${options[type]}\" != \"enumeration\" ] && [ ${#options_enum_values[@]} -gt 0 ]; then\n+        bashopts_log C \"bashopts_declare: The former '-e' option is now moved to '-x'\" \\\n+            \" => the new '-e' is reserved for enumeration elements\"\n+    fi\n+    # Setup check value method\n+    if ! [[ -v options[check] ]]; then\n+        options[check]=\"bashopts_check_${options[type]}\"\n+    fi\n+    # format the option method\n+    case \"${options[method],,}\" in\n+        ''|s|set)\n+            # default: simple value - override\n+            options[method]=\"set\"\n+            if [ \"${options[type]}\" != \"string\" ] || [[ -v options[default] ]]; then\n+                # Check the default value format\n+                if ! options[default]=\"$(${options[check]} \"${options[default]}\" \"${options[enum_values]}\")\"; then\n+                    bashopts_log W \"Invalid default value for ${options[name]} option, this value will stay unset\"\n+                    unset options[default]\n+                fi\n+            fi\n+            ;;\n+        a|add)\n+            # array value - add\n+            options[method]=\"add\"\n+            ;;\n+        *)\n+            bashopts_log C \"Invalid method ${options[method]}\"\n+            ;;\n+    esac\n+    # Check option name\n+    if [[ -v bashopts_optprop_name[${options[name]}] ]]; then\n+        bashopts_log C \"Dupplicate option name '${options[name]}'\"\n+    fi\n+    # check the short option\n+    if [[ -v options[short_opt] ]]; then\n+        if ! [[ ${options[short_opt]} =~ ^[a-zA-Z0-9_-]$ ]]; then\n+            bashopts_log C \"Invalid short option ${options[short_opt]}\"\n+        fi\n+        if [[ -v bashopts_arg2op[-${options[short_opt]}] ]]; then\n+            bashopts_log C \"Dupplicate short option '${options[short_opt]}'\"\n+        fi\n+        bashopts_arg2op[-${options[short_opt]}]=${options[name]}\n+    fi\n+    # check the long option\n+    if [[ -v options[long_opt] ]]; then\n+        if ! [[ ${options[long_opt]} =~ ^[a-zA-Z0-9_-]{2,}$ ]]; then\n+            bashopts_log C \"Invalid long option ${options[long_opt]}\"\n+        fi\n+        if [[ -v bashopts_arg2op[--${options[long_opt]}] ]]; then\n+            bashopts_log C \"Dupplicate long option '${options[long_opt]}'\"\n+        fi\n+        bashopts_arg2op[--${options[long_opt]}]=${options[name]}\n+    fi\n+    # store the option properties\n+    for f in ${!options[@]}; do\n+        eval \"bashopts_optprop_$f[${options[name]}]='${options[$f]//\\'/\\'\\\\\\'\\'}'\"\n+    done\n+    bashopts_optlist+=(${options[name]})\n+}\n+\n+bashopts_get_valid_value_list() {\n+    local op\n+    case \"$1\" in\n+        -*)\n+            op=${bashopts_arg2op[$1]}\n+            ;;\n+        *)\n+            op=$1\n+            ;;\n+    esac\n+    case \"${bashopts_optprop_type[$op]}\" in\n+        boolean)\n+            echo -e \"true\\nfalse\"\n+            ;;\n+        enumeration)\n+            while read -r line; do\n+                echo \"\\\"${line##*|}\\\"\"\n+            done <<< \"${bashopts_optprop_enum_values[$op]}\"\n+            ;;\n+    esac\n+}\n+\n+# maximum of two values\n+bashopts_math_max() {\n+    echo $(($1>$2?$1:$2))\n+}\n+\n+# minimum of two values\n+bashopts_math_min() {\n+    echo $(($1<$2?$1:$2))\n+}\n+\n+# join array element\n+bashopts_join_by() {\n+    local IFS=\"$1\"\n+    shift || bashopts_log C \"Usage: bashopts_join_by <character> [elt1 [elt2...]]\"\n+    echo \"$*\"\n+}\n+\n+# dump an option value by its name\n+bashopts_dump_value() {\n+    local op=$1\n+    shift || bashopts_log C \"Usage: bashopts_dump_value op_name\"\n+    [[ -v \"$op\" ]] || return 0\n+    if [ \"${bashopts_optprop_method[$op]}\" == \"set\" ]; then\n+        if [ \"${bashopts_optprop_type[$op]}\" == \"string\" ]; then\n+            echo -n \"\\\"${!op//\\\"/\\\\\\\"}\\\"\"\n+        else\n+            echo -n \"${!op}\"\n+        fi\n+        return 0\n+    fi\n+    eval set -- \\\"\\${${op}[@]}\\\"\n+    echo -n \"[\"\n+    if [ \"${bashopts_optprop_type[$op]}\" == \"string\" ]; then\n+        echo -n \"\\\"${1//\\\"/\\\\\\\"}\\\"\"\n+    else\n+        echo -n \"${1}\"\n+    fi\n+    shift\n+    while [ -n \"$1\" ]; do\n+        if [ \"${bashopts_optprop_type[$op]}\" == \"string\" ]; then\n+            echo -n \", \\\"${1//\\\"/\\\\\\\"}\\\"\"\n+        else\n+            echo -n \", ${1}\"\n+        fi\n+        shift\n+    done\n+    echo -n \"]\"\n+}\n+\n+# display the formated help\n+bashopts_diplay_help() {\n+    local elts optargs_max_len=8 val ncol line\n+    declare -A optargs\n+    ncol=$(tput cols || true) 2> /dev/null\n+    # compute the good arguments comumn size\n+    for op in \"${bashopts_optlist[@]}\"; do\n+        elts=()\n+        unset val\n+        if ! [[ $op =~ ^__.*__$ ]] && [[ -v $op ]]; then\n+            val=\" $(bashopts_dump_value $op)\"\n+        fi\n+        if [[ -v bashopts_optprop_short_opt[$op] ]]; then elts+=(\"-${bashopts_optprop_short_opt[$op]}\"); fi\n+        if [[ -v bashopts_optprop_long_opt[$op] ]]; then elts+=(\"--${bashopts_optprop_long_opt[$op]}\"); fi\n+        optargs[$op]=\"$(bashopts_join_by , ${elts[@]})$val\"\n+        optargs_max_len=$(bashopts_math_max $optargs_max_len ${#optargs[$op]})\n+    done\n+    ncol=${ncol:-160}\n+    optargs_max_len=$(bashopts_math_min $optargs_max_len $(( $ncol / 3 )) )\n+    # display global info\n+    echo\n+    echo \"NAME:\"\n+    echo \"    $bashopts_tool_name - $bashopts_tool_description\"\n+    echo\n+    echo \"USAGE:\"\n+    echo -e \"    $bashopts_tool_usage\"\n+    echo\n+    echo \"OPTIONS:\"\n+    for op in \"${bashopts_optlist[@]}\"; do\n+        # display arguments, value if available, description, and additional info if available\n+        printf \"    %-${optargs_max_len}s        %s\\n\" \"${optargs[$op]}\" \"${bashopts_optprop_description[$op]} $(\n+            if ! [[ $op =~ ^__.*__$ ]]; then\n+                # display additional information the each properties\n+                # discarding special options like --help\n+                echo -n \"- [\\$$op] (type:${bashopts_optprop_type[$op]}\"\n+                if [[ -v bashopts_optprop_expression[$op] ]]; then\n+                    echo -n \", default:\\\"${bashopts_optprop_expression[$op]//\\\"/\\\\\\\"}\\\"\"\n+                elif [[ -v bashopts_optprop_default[$op] ]]; then\n+                    if [[ \"${bashopts_optprop_type[$op]}\" =~ ^(string|enumeration)$ ]]; then\n+                        echo -n \", default:\\\"${bashopts_optprop_default[$op]//\\\"/\\\\\\\"}\\\"\"\n+                    else\n+                        echo -n \", default:${bashopts_optprop_default[$op]}\"\n+                    fi\n+                else\n+                    elts=\")\"\n+                fi\n+                if [ \"${bashopts_optprop_type[$op]}\" == \"enumeration\" ]; then\n+                    echo -n \", accepted values:$(\n+                        while read -r line; do\n+                            echo -n \" '${line##*|}'\"\n+                        done <<< \"${bashopts_optprop_enum_values[$op]}\"\n+                    )\"\n+                fi\n+                echo -n \")\"\n+            fi\n+        )\"\n+    done\n+    test \"$1\" != \"-e\" || exit $2\n+}\n+\n+# Enable help display on option process\n+bashopts_diplay_help_delayed() {\n+    __BASHOPTS_DISPLAY_HELP__=\"true\"\n+}\n+\n+# display all otions values and properties\n+bashopts_diplay_summary() {\n+    local elts desc_max_len=0 val dval\n+    declare -A optargs\n+    for op in \"${bashopts_optlist[@]}\"; do\n+        desc_max_len=$(bashopts_math_max $desc_max_len ${#bashopts_optprop_description[$op]})\n+    done\n+    for op in \"${bashopts_optlist[@]}\"; do\n+        if ! [[ $op =~ ^__.*__$ ]]; then\n+            printf \"* %-${desc_max_len}s : $(bashopts_dump_value $op)\\n\" \"${bashopts_optprop_description[$op]}\"\n+        fi\n+    done\n+}\n+\n+# STEP 3: parse arg\n+bashopts_parse_args() {\n+    local op arg val args is_arg short_opts long_opts\n+\n+    # split argument into two arrays: normal and extra arguments\n+    is_arg=1\n+    args=()\n+    for arg in \"$@\"; do\n+        if [ $is_arg -eq 1 ]; then\n+            if [ \"$arg\" == \"--\" ]; then is_arg=0; continue; fi\n+            args+=(\"$arg\")\n+        else\n+            bashopts_extra_args+=(\"$arg\")\n+        fi\n+    done\n+\n+    # build the long and short getopt option list from the options\n+    short_opts=\"\"\n+    long_opts=()\n+    for op in \"${bashopts_optlist[@]}\"; do\n+        if [[ -v bashopts_optprop_short_opt[$op] ]]; then\n+            short_opts=\"${short_opts}${bashopts_optprop_short_opt[$op]}:$(test \"${bashopts_optprop_type[$op]}\" != \"boolean\" || echo \":\")\"\n+        fi\n+        if [[ -v bashopts_optprop_long_opt[$op] ]]; then\n+            long_opts+=(\"${bashopts_optprop_long_opt[$op]}:$(test \"${bashopts_optprop_type[$op]}\" != \"boolean\" || echo \":\")\")\n+        fi\n+    done\n+    long_opts=$(bashopts_join_by , ${long_opts[@]})\n+\n+    # call the getopt\n+    if ! args=$(getopt -o $short_opts -l \"$long_opts\" -n \"$bashopts_tool_name\" -- \"${args[@]}\"); then\n+        >&2 bashopts_diplay_help\n+        exit 1\n+    fi\n+    eval set -- \"$args\";\n+\n+    # store the arguments value part\n+    while true; do\n+        arg=$1\n+        shift\n+        case $arg in\n+            --)\n+                # end of the argument part\n+                break\n+                ;;\n+            -*)\n+                val=\"$1\"\n+                shift\n+                op=${bashopts_arg2op[$arg]}\n+                if [ -z \"$val\" ]; then\n+                    if [ \"${bashopts_optprop_type[$op]}\" == \"boolean\" ]; then\n+                        # boolean argument with no value is considered as true\n+                        val=\"true\"\n+                    else\n+                        # empty value tell to unset the value or clear the array\n+                        unset $op\n+                        continue\n+                    fi\n+                fi\n+                val=\"$(${bashopts_optprop_check[$op]} \"$val\")\" || exit 1\n+                case \"${bashopts_optprop_method[$op]}\" in\n+                    set)\n+                        # normal case: override the value\n+                        eval \"$op=$(declare -p val | sed -E 's/^declare\\s[^=]*=//g')\"\n+                        ;;\n+                    add)\n+                        # array case: add the value\n+                        eval \"$op+=($(declare -p val | sed -E 's/^declare\\s[^=]*=//g'))\"\n+                        ;;\n+                esac\n+                ;;\n+            *)\n+                bashopts_log C \"Fatal error: args\"\n+                ;;\n+        esac\n+    done\n+\n+    # store the command part\n+    bashopts_commands=(\"$@\")\n+}\n+\n+# display an array: [val1, val2, ...]\n+bashopts_dump_array() {\n+    local type=$1\n+    shift || bashopts_log C \"Usage: bashopts_dump_array type elt1 [elt2...]\"\n+    echo -n \"[\"\n+    if [ \"$type\" == \"string\" ]; then\n+        echo -n \"\\\"${1//\\\"/\\\\\\\"}\\\"\"\n+    else\n+        echo -n \"${1}\"\n+    fi\n+    shift || true\n+    while [ -n \"$1\" ]; do\n+        if [ \"$type\" == \"string\" ]; then\n+            echo -n \", \\\"${1//\\\"/\\\\\\\"}\\\"\"\n+        else\n+            echo -n \", ${1}\"\n+        fi\n+        shift\n+    done\n+    echo -n \"]\"\n+}\n+\n+bashopts_read_json_array() {\n+    local line\n+    while read -r line; do\n+        eval \"$1+=($line)\"\n+    done <<< \"$(jq '.[]' <<< \"$2\")\" && return 0 || \\\n+    bashopts_log E \"Invalid JSON array\"\n+    return 1\n+}\n+\n+# Process a specified option\n+bashopts_process_option() {\n+    local dval tval ival op arg arglist check val_req edit_req\n+    if ! arglist=$(getopt -o \"n:k:r\" -n \"bashopts_process_option \" -- \"$@\"); then\n+        bashopts_log C \"Usage bashopts_process_opt\" \\\n+            \"        -n <val>  property name\" \\\n+            \"        -k <val>  override value check function\" \\\n+            \"        -r        At least one value required\"\n+    fi\n+    eval set -- \"$arglist\";\n+    # parse all the parameters\n+    while true; do\n+        arg=$1\n+        shift\n+        case \"$arg\" in\n+            -n) op=$1; shift;;\n+            -k) check=$1; shift;;\n+            -r) val_req=\"true\";;\n+            --) break;;\n+            *)  bashopts_log C \"Fatal error\";;\n+        esac\n+    done\n+    test -n \"$op\" || \\\n+        bashopts_log C \"bashopts_process_option: missing -n option\"\n+    if [ -z \"$check\" ]; then\n+        check=\"${bashopts_optprop_check[$op]}\"\n+    fi\n+    if [ \"${bashopts_optprop_req_value[$op]}\" == \"true\" ]; then\n+        val_req=\"true\"\n+    fi\n+\n+    # eval or get default value\n+    if [[ -v bashopts_optprop_expression[$op] ]]; then\n+        eval \"dval=${bashopts_optprop_expression[$op]}\"\n+    elif [ \"${bashopts_optprop_method[$op]}\" == \"add\" ]; then\n+        dval=()\n+    else\n+        dval=\"${bashopts_optprop_default[$op]}\"\n+    fi\n+    # Init edit_req\n+    edit_req=${bashopts_optprop_interactive[$op]}\n+    if [[ -v $op ]]; then\n+        # Extract value from option name\n+        eval \"tval=$(bashopts_get_def $op)\"\n+        # Edition no more really required if already defined\n+        edit_req=\"false\"\n+    elif [ \"${bashopts_optprop_setting[$op]}\" == \"true\" ] \\\n+        && [ -f \"$(readlink -m \"$bashopts_tool_settings_path\")\" ] \\\n+        && grep -E -q \"^$op=\" $bashopts_tool_settings_path; then\n+        eval \"tval=$(grep -E \"^${op}=\" $bashopts_tool_settings_path | sed -E \"s/^[^=]+=//g\")\"\n+    fi\n+    if [[ -v tval ]]; then\n+        # Check current value(s)\n+        for (( i=0; i<${#tval[@]}; i++)); do\n+            if ! $check \"${tval[$i]}\" > /dev/null; then\n+                if [ \"$BASHOPTS_INTERACTIVE\" != \"true\" ]; then\n+                    bashopts_log C \"Non interactive mode: Exit due to one or more error\"\n+                fi\n+                # (re)enable edition\n+                edit_req=\"true\"\n+                break\n+            fi\n+        done\n+    elif [ \"$val_req\" == \"true\" ] && [ \"$__BASHOPTS_DISPLAY_HELP__\" != \"true\" ]; then\n+        bashopts_log E \"At least one value required\"\n+        if [ \"$BASHOPTS_INTERACTIVE\" != \"true\" ]; then\n+            bashopts_log C \"Non interactive mode: Exit due to one or more error\"\n+        fi\n+        # (re)enable edition\n+        edit_req=\"true\"\n+    fi\n+    if ! [[ -v tval ]] || [ \"$edit_req\" == \"true\" ]; then\n+        if [[ ! -v tval ]] && [ -n \"$dval\" ]; then\n+            # set default value\n+            eval \"tval=$(bashopts_get_def dval)\"\n+        fi\n+        if [ \"$edit_req\" == \"true\" ]; then\n+            if [ \"$BASHOPTS_INTERACTIVE\" == \"true\" ]; then\n+                # interactive edition\n+                while true; do\n+                    # Display the property description\n+                    echo \"* ${bashopts_optprop_description[$op]}$(\n+                        # Add possible value list for enumeration type\n+                        if [ \"${bashopts_optprop_type[$op]}\" == \"enumeration\" ]; then\n+                            echo -n \" (accepted values:$(\n+                                while read -r line; do\n+                                    echo -n \" '${line##*|}'\"\n+                                done <<< \"${bashopts_optprop_enum_values[$op]}\"\n+                            )\"\n+                            echo -n \")\"\n+                        fi\n+                    )\"\n+                    # Add info for array properties\n+                    if [ \"${bashopts_optprop_method[$op]}\" == \"add\" ]; then\n+                        echo \" -> List property format: 'single val.' or BASH array '(v1 v2 v3)' or JSON array '[v1, v2, v3]'\"\n+                    fi\n+                    echo -n \"    $(bashopts_dump_array {bashopts_optprop_type[$op]} \"${tval[@]}\"): \"\n+                    read ival || bashopts_log C \"Unexpected error, aborting...\"\n+                    if [ -n \"$ival\" ]; then\n+                        if [ \"${bashopts_optprop_method[$op]}\" == \"add\" ]; then\n+                            # array value\n+                            tval=()\n+                            case \"${ival:0:1}\" in\n+                                '[')\n+                                    bashopts_read_json_array tval \"$ival\" || continue\n+                                    ;;\n+                                '(')\n+                                    if ! eval \"tval=$ival\" 2>/dev/null; then\n+                                        bashopts_log E \"Invalid BASH array\"\n+                                        continue\n+                                    fi\n+                                    ;;\n+                                *)\n+                                    tval+=(\"$ival\")\n+                                    ;;\n+                            esac\n+                        else\n+                            # non array/normal value\n+                            tval=$ival\n+                        fi\n+                    elif [ \"${bashopts_optprop_method[$op]}\" == \"add\" ] && ! [[ -v tval ]]; then\n+                        tval=()\n+                    fi\n+                    # check format\n+                    if [ \"${#tval[@]}\" -eq 0 ] && [ \"$val_req\" == \"true\" ]; then\n+                        bashopts_log E \"At least one value required\"\n+                        unset tval\n+                        continue\n+                    fi\n+                    if [ \"${bashopts_optprop_method[$op]}\" == \"add\" ]; then\n+                        # array value\n+                        for (( i=0; i<${#tval[@]}; i++)); do\n+                            if ! tval[$i]=\"$($check \"${tval[$i]}\")\"; then\n+                                unset tval\n+                                break\n+                            fi\n+                        done\n+                    else\n+                        # non array/normal value\n+                        if ! tval=\"$($check \"$tval\")\"; then\n+                            unset tval\n+                        fi\n+                    fi\n+                    if declare -p tval > /dev/null 2>&1; then\n+                        # edit OK, break\n+                        break\n+                    fi\n+                    # otherwise, loop...\n+                done\n+            fi\n+        fi\n+    fi\n+    if [[ -v tval ]]; then\n+        eval \"$op=$(bashopts_get_def tval)\"\n+    fi\n+    if [ \"${bashopts_optprop_setting[$op]}\" == \"true\" ]; then\n+        if [ -n \"$bashopts_tool_settings_path\" ]; then\n+            # vrite the value to the setting file\n+            (\n+                test -d \"$(dirname $bashopts_tool_settings_path)\" || \\\n+                    mkdir -p \"$(dirname $bashopts_tool_settings_path)\"\n+                if [ -f \"$bashopts_tool_settings_path\" ]; then\n+                    # remove old value\n+                    sed -i \"/^$op=/d\" $bashopts_tool_settings_path\n+                fi\n+                if [ \"$bashopts_tool_settings_force_write\" == \"true\" ] \\\n+                    || [ \"$(bashopts_get_def $op)\" != \"$(bashopts_get_def dval)\" ]; then\n+                    # append the new value to the file if the value is not the default or \n+                    # force_write is true\n+                    echo \"$(bashopts_get_def_full $op)\" >> $bashopts_tool_settings_path\n+                fi\n+            ) || bashopts_log W \"Please check the settings file\"\n+        else\n+            bashopts_log W \"No settings file specified\"\n+        fi\n+    fi\n+    if [ \"$op\" == \"BASHOPTS_NON_INTERACTIVE\" ] && ! [[ -v BASHOPTS_INTERACTIVE ]]; then\n+        if [ \"$BASHOPTS_NON_INTERACTIVE\" == \"true\" ]; then\n+            BASHOPTS_INTERACTIVE=\"false\"\n+        else\n+            BASHOPTS_INTERACTIVE=\"true\"\n+        fi\n+    fi\n+}\n+\n+# STEP 4: process arg\n+bashopts_process_opts() {\n+    local op\n+    if [ \"$__BASHOPTS_DISPLAY_HELP__\" == \"true\" ]; then\n+        BASHOPTS_INTERACTIVE=\"false\"\n+    fi\n+    for op in \"${bashopts_optlist[@]}\"; do\n+        bashopts_process_option -n $op\n+    done\n+    if [ \"$__BASHOPTS_DISPLAY_HELP__\" == \"true\" ]; then\n+        bashopts_diplay_help\n+        exit 0\n+    fi\n+}\n+\n+# Export all option variables\n+bashopts_export_opts() {\n+    for op in \"${bashopts_optlist[@]}\"; do\n+        if [[ -v $op ]]; then\n+            export $op\n+        fi\n+    done\n+}\n",
          "commitId": "6d8343b6a739a8d09744f699ab8bb5330c62c494"
        },
        {
          "id": 3598,
          "oldPath": "tools/gitlab-ci/citbx.properties",
          "newPath": "tools/gitlab-ci/citbx.properties",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,33 @@\n+# CI toolbox for Gitlab - properties\n+#\n+# Default CI registry\n+DEFAULT_CI_REGISTRY=\"registry.gitlab.com\"\n+#\n+# Default docker-login mode (enabled, disabled or auto)\n+CITBX_DEFAULT_DOCKER_LOGIN_MODE=disabled\n+#\n+# Settings file path\n+#CITBX_RC_PATH=\"$HOME/.config/myciprojectrc\"\n+#\n+# bashopts.sh tool path\n+#BASHOPTS_FILE_PATH=\"$CITBX_ABS_DIR/3rdparty/bashopts.sh\"\n+#\n+# Default job SHELL\n+CITBX_DEFAULT_JOB_SHELL=\"/bin/bash\"\n+#\n+# Set service dockers in privileged mode as default\n+CITBX_DEFAULT_SERVICE_DOCKER_PRIVILEGED=\"true\"\n+#\n+# Enable support of git lfs\n+#CITBX_GIT_LFS_SUPPORT_ENABLED=\"true\"\n+#\n+# Enable git lfs by default\n+#CITBX_DEFAULT_GIT_LFS_ENABLED=\"true\"\n+#\n+# Default DNS list\n+# * OpenDNS:\n+CITBX_DOCKER_DEFAULT_DNS=(208.67.222.123 208.67.220.123)\n+# * Quad9\n+#CITBX_DOCKER_DEFAULT_DNS=(9.9.9.9)\n+# * Google\n+#CITBX_DOCKER_DEFAULT_DNS=(8.8.8.8 8.8.4.4)\n",
          "commitId": "6d8343b6a739a8d09744f699ab8bb5330c62c494"
        },
        {
          "id": 3599,
          "oldPath": "tools/gitlab-ci/env-setup/common.sh",
          "newPath": "tools/gitlab-ci/env-setup/common.sh",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,75 @@\n+\n+sudo_sponge() {\n+    local out=${1:-/dev/stdout}\n+    _sudo awk -v o=\"${out}\" '\n+        {\n+            b = (NR > 1 ? b\"\"ORS\"\"$0 : $0);\n+        }\n+        END{\n+            print b > o;\n+        }'\n+}\n+\n+if [ $(id -u) -eq 0 ]; then\n+    _sudo() {\n+        \"$@\"\n+    }\n+else\n+    if ! which sudo > /dev/null 2>&1; then\n+        print_critical \"In user mode, sudo with suitable system rights is required\"\n+    fi\n+    _sudo() {\n+        sudo \"$@\"\n+    }\n+fi\n+\n+write_daemon_json() {\n+    bashopts_process_option -n CITBX_DOCKER_DNS_LIST -r\n+\n+    # Setup docker0 bridge with:\n+    # - NET: 192.168.255.0/24 (by default)\n+    # - DNS: Use system dns instead of Google one\n+    _sudo mkdir -p /etc/docker\n+    if ! jq '' /etc/docker/daemon.json > /dev/null 2>&1; then\n+        if [ -f /etc/docker/daemon.json ]; then\n+            _sudo mv /etc/docker/daemon.json{,.bak}\n+            print_warning \"Invalid file /etc/docker/daemon.json, moving it to /etc/docker/daemon.json.bak\"\n+        fi\n+        _sudo bash -c 'echo {} > /etc/docker/daemon.json'\n+    fi\n+    for dns in $CITBX_DOCKER_DNS_LIST; do\n+        if [ -n \"$dnslist\" ]; then\n+            dnslist=\"$dnslist, \\\"$dns\\\"\"\n+        else\n+            dnslist=\"\\\"$dns\\\"\"\n+        fi\n+    done\n+\n+    _sudo cat /etc/docker/daemon.json |\n+    jq '. + {\n+        \"bip\": \"'\"$CITBX_DOCKER_BIP\"'\",\n+        \"fixed-cidr\": \"'\"$CITBX_DOCKER_FIXED_CIDR\"'\",\n+        \"dns\": '\"$(bashopts_dump_array \"string\" \"${CITBX_DOCKER_DNS_LIST[@]}\")\"',\n+        \"storage-driver\": \"'\"$CITBX_DOCKER_STORAGE_DRIVER\"'\"\n+    }' | sudo_sponge /etc/docker/daemon.json\n+}\n+\n+install_ci_toolbox() {\n+    curl -ksL https://gitlab.com/ercom/citbx4gitlab/raw/master/tools/gitlab-ci/citbx4gitlab/bashcomp \\\n+        | sed 's/\\bcitbx4gitlab\\b/'\"$CITBX_TOOLBOX_NAME\"'/' \\\n+        | sudo_sponge /etc/bash_completion.d/$CITBX_TOOLBOX_NAME\n+    _sudo curl -ksLo /usr/local/bin/$CITBX_TOOLBOX_NAME https://gitlab.com/ercom/citbx4gitlab/raw/master/tools/gitlab-ci/citbx4gitlab/citbx4gitlab\n+    _sudo chmod +x /usr/local/bin/$CITBX_TOOLBOX_NAME\n+}\n+\n+install_ca_certificates_system() {\n+    test -d $CITBX_ABS_DIR/ca-certificates || return 0\n+    _sudo cp $CITBX_ABS_DIR/ca-certificates/*.crt /usr/local/share/ca-certificates/\n+    _sudo update-ca-certificates\n+}\n+\n+install_ca_certificates_docker() {\n+    test -d $CITBX_ABS_DIR/ca-certificates || return 0\n+    _sudo mkdir -p /etc/docker/certs.d\n+    _sudo cp $CITBX_ABS_DIR/ca-certificates/*.crt /etc/docker/certs.d/\n+}\n",
          "commitId": "6d8343b6a739a8d09744f699ab8bb5330c62c494"
        },
        {
          "id": 3600,
          "oldPath": "tools/gitlab-ci/env-setup/gentoo.sh",
          "newPath": "tools/gitlab-ci/env-setup/gentoo.sh",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,54 @@\n+. $CITBX_ABS_DIR/env-setup/common.sh\n+\n+INSTALL_PKGS=()\n+\n+if setup_component_enabled base-pkgs; then\n+    for pkg in app-emulation/docker sys-apps/gawk dev-python/pyyaml app-misc/jq app-misc/ca-certificates; do\n+        if ! equery -q list $pkg > /dev/null; then\n+            INSTALL_PKGS+=($pkg)\n+        fi\n+    done\n+fi\n+if setup_component_enabled git-lfs \\\n+    && [ \"$CITBX_GIT_LFS_SUPPORT_ENABLED\" == \"true\" ]; then\n+    if ! equery -q list dev-vcs/git-lfs > /dev/null; then\n+        INSTALL_PKGS+=(dev-vcs/git-lfs)\n+    fi\n+    INSTALL_PKGS+=(git-lfs)\n+fi\n+if [ \"${#INSTALL_PKGS[@]}\" -gt 0 ]; then\n+    print_info \"Installing packages...\"\n+    _sudo emerge -av \"${INSTALL_PKGS[@]}\"\n+fi\n+\n+if setup_component_enabled base-pkgs; then\n+    if [ \"${USER}\" != \"root\" ]; then\n+        _sudo gpasswd -a ${USER} docker\n+    fi\n+fi\n+\n+if setup_component_enabled ca-certs; then\n+    print_info \"Installing CA certificates...\"\n+    # Add custom SSL ROOT CAs\n+    install_ca_certificates_system\n+    install_ca_certificates_docker\n+fi\n+\n+if setup_component_enabled docker-cfg; then\n+    print_info \"Configuring docker...\"\n+\n+    write_daemon_json\n+\n+    # Put in comment the docker default options\n+    if grep -q '^DOCKER_OPTS=.*' /etc/conf.d/docker \\\n+        && ! grep -q '^DOCKER_OPTS=\"\"$' /etc/conf.d/docker; then\n+        _sudo sed -i 's/^DOCKER_OPTS=.*$/DOCKER_OPTS=\"\"/g' /etc/conf.d/docker\n+    fi\n+    _sudo ip link del docker0 2>/dev/null || true\n+    _sudo /etc/init.d/docker restart\n+fi\n+\n+if setup_component_enabled ci-toolbox; then\n+    print_info \"Installing the CI toolbox $CITBX_TOOLBOX_NAME...\"\n+    install_ci_toolbox\n+fi\n",
          "commitId": "6d8343b6a739a8d09744f699ab8bb5330c62c494"
        },
        {
          "id": 3601,
          "oldPath": "tools/gitlab-ci/env-setup/ubuntu.sh",
          "newPath": "tools/gitlab-ci/env-setup/ubuntu.sh",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,97 @@\n+. $CITBX_ABS_DIR/env-setup/common.sh\n+\n+ubuntu_is_installed() {\n+    if [ \"$(dpkg -s \"$1\" 2>/dev/null | grep -o 'installed' | head -n 1)\" == \"installed\" ]; then\n+        return 0\n+    fi\n+    return 1\n+}\n+\n+INSTALL_PKGS=()\n+\n+if setup_component_enabled base-pkgs; then\n+    INSTALL_PKGS+=(docker-ce gawk python-yaml jq)\n+\n+    # remove old versions...\n+    if ubuntu_is_installed docker.io; then\n+        print_note \"Removing old docker.io package...\"\n+        _sudo /etc/init.d/docker stop\n+        _sudo apt-get remove -y --allow-change-held-packages docker.io\n+    fi\n+    if ubuntu_is_installed docker-engine; then\n+        print_note \"Removing old docker-engine package...\"\n+        _sudo /etc/init.d/docker stop\n+        _sudo apt-get remove -y --allow-change-held-packages docker-engine\n+    fi\n+    _sudo apt-get update\n+    _sudo apt-get install -y aufs-tools \\\n+        apt-transport-https \\\n+        ca-certificates \\\n+        curl \\\n+        software-properties-common\n+    if grep -qr 'download.docker.com' /etc/apt/; then\n+        print_note \"Docker apt repository is already present.\"\n+    else\n+        print_note \"Adding docker apt repository...\"\n+        # setup - pre install\n+        # add docker repo\n+        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | _sudo apt-key add -\n+        _sudo add-apt-repository \\\n+            \"deb [arch=amd64] http://download.docker.com/linux/ubuntu \\\n+            $(lsb_release -cs) \\\n+            stable\"\n+        _sudo apt-get update\n+    fi\n+fi\n+\n+if setup_component_enabled git-lfs \\\n+    && [ \"$CITBX_GIT_LFS_SUPPORT_ENABLED\" == \"true\" ]; then\n+    if grep -qr 'git-lfs' /etc/apt/; then\n+        print_note \"GIT LFS apt repository is already present.\"\n+    else\n+        print_note \"Adding GIT LFS apt repository...\"\n+        curl -fsSL https://packagecloud.io/github/git-lfs/gpgkey | _sudo apt-key add -\n+        _sudo add-apt-repository \\\n+            \"deb [arch=amd64] http://packagecloud.io/github/git-lfs/ubuntu \\\n+            $(lsb_release -cs) \\\n+            main\"\n+        _sudo apt-get update\n+    fi\n+    INSTALL_PKGS+=(git-lfs)\n+fi\n+\n+if [ \"${#INSTALL_PKGS[@]}\" -gt 0 ]; then\n+    print_info \"Installing packages...\"\n+    _sudo apt-get -y install \"${INSTALL_PKGS[@]}\"\n+fi\n+\n+if setup_component_enabled base-pkgs; then\n+    if [ \"${USER}\" != \"root\" ]; then\n+        _sudo gpasswd -a ${USER} docker\n+    fi\n+fi\n+\n+if setup_component_enabled ca-certs; then\n+    print_info \"Installing CA certificates...\"\n+    # Add custom SSL ROOT CAs\n+    install_ca_certificates_system\n+    install_ca_certificates_docker\n+fi\n+\n+if setup_component_enabled docker-cfg; then\n+    print_info \"Configuring docker...\"\n+\n+    write_daemon_json\n+\n+    # Put in comment the docker default options\n+    if grep -q '^ *\\<DOCKER_OPTS\\>' /etc/default/docker; then\n+        _sudo sed '/^ *\\<DOCKER_OPTS\\>/s/^/#/' -i /etc/default/docker\n+    fi\n+    _sudo ip link del docker0 2>/dev/null || true\n+    _sudo service docker restart\n+fi\n+\n+if setup_component_enabled ci-toolbox; then\n+    print_info \"Installing the CI toolbox $CITBX_TOOLBOX_NAME...\"\n+    install_ci_toolbox\n+fi\n",
          "commitId": "6d8343b6a739a8d09744f699ab8bb5330c62c494"
        },
        {
          "id": 3602,
          "oldPath": "tools/gitlab-ci/run.sh",
          "newPath": "tools/gitlab-ci/run.sh",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,1027 @@\n+#!/bin/bash -e\n+# citbx4gitlab: CI toolbox for Gitlab\n+# Copyright (C) 2017 ERCOM - Emeric Verschuur <emeric@mbedsys.org>\n+# \n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+CITBX_VERSION=3.3.1\n+\n+############################################################\n+#                  ### COMMON PART ###\n+#  All environments: Gitlab-CI runner & local workstation\n+############################################################\n+\n+# display a message\n+print_log() {\n+    local level=$1;\n+    shift || print_log C \"Usage print_log <level> message\"\n+    case \"${level,,}\" in\n+        c|critical)\n+            >&2 printf \"\\e[91m[CRIT] %s\\e[0m\\n\" \"$@\"\n+            exit 1\n+            ;;\n+        e|error)\n+            >&2 printf \"\\e[91m[ERRO] %s\\e[0m\\n\" \"$@\"\n+            ;;\n+        w|warning)\n+            >&2 printf \"\\e[93m[WARN] %s\\e[0m\\n\" \"$@\"\n+            ;;\n+        n|note)\n+            printf \"[NOTE] %s\\n\" \"$@\"\n+            ;;\n+        i|info)\n+            printf \"\\e[92m[INFO] %s\\e[0m\\n\" \"$@\"\n+            ;;\n+        *)\n+            print_log C \"Invalid log level: $level\"\n+            ;;\n+    esac\n+}\n+\n+# Print an error message and exit with error status 1\n+print_critical() {\n+    >&2 printf \"\\e[91m[CRIT] %s\\e[0m\\n\" \"$@\"\n+    exit 1\n+}\n+\n+# Print an error message\n+print_error() {\n+    >&2 printf \"\\e[91m[ERRO] %s\\e[0m\\n\" \"$@\"\n+}\n+\n+# Print a warning message\n+print_warning() {\n+    >&2 printf \"\\e[93m[WARN] %s\\e[0m\\n\" \"$@\"\n+}\n+\n+# Print a note message\n+print_note() {\n+    printf \"[NOTE] %s\\n\" \"$@\"\n+}\n+\n+# Pring an info message\n+print_info() {\n+    printf \"\\e[92m[INFO] %s\\e[0m\\n\" \"$@\"\n+}\n+\n+# Get the real core number\n+ncore() {\n+    lscpu | awk -F ':' '\n+        /^Core\\(s\\) per socket/ {\n+            nc=$2;\n+        }\n+        /^Socket\\(s\\)/ {\n+            ns=$2;\n+        }\n+        END {\n+            print nc*ns;\n+        }'\n+}\n+\n+# Check bash\n+if [ ! \"${BASH_VERSINFO[0]}\" -ge 4 ]; then\n+    print_critical \"This script needs BASH version 4 or greater\"\n+fi\n+\n+# ci-tools base directory bath\n+CITBX_ABS_DIR=$(dirname $(readlink -f $0))\n+# Extract project specific values\n+if [ -f $CITBX_ABS_DIR/citbx.properties ]; then\n+    . $CITBX_ABS_DIR/citbx.properties\n+fi\n+if [ -z \"$CI_PROJECT_DIR\" ]; then\n+    # Find the project directory\n+    CI_PROJECT_DIR=\"$(git rev-parse --show-toplevel 2>/dev/null || true)\"\n+    if [ -z \"$CI_PROJECT_DIR\" ]; then\n+        print_critical \"Unable to find the project root directory\"\n+    fi\n+fi\n+# Current job script relative directory path\n+CITBX_DIR=${CITBX_ABS_DIR#${CI_PROJECT_DIR}/}\n+\n+citbx_register_handler() {\n+    local list=\"citbx_job_stage_${2}\"\n+    local func=\"${1}_${2}\"\n+    if [[ \"$(type -t $func)\" != \"function\" ]]; then\n+        return 0\n+    fi\n+    local pattern='\\b'\"$func\"'\\b'\n+    if [[ \"${!list}\" =~ $pattern ]]; then\n+        return 0\n+    fi\n+    case \"$2\" in\n+        define|setup|before|main)\n+            eval \"${list}=\\\"${!list} $func\\\"\"\n+            ;;\n+        after)\n+            eval \"${list}=\\\"$func ${!list}\\\"\"\n+            ;;\n+        *)\n+            print_critical \"Use: citbx_register_handler <prefix> define|setup|before|main|after\"\n+            ;;\n+    esac\n+}\n+\n+declare -A CITBX_USE_LIST\n+# Add module in the use list\n+citbx_use() {\n+    local module=$1\n+    if [ -z \"$module\" ]; then\n+        print_critical \"Usage: citbx_use <module_name>\"\n+    fi\n+    if [ \"${CITBX_USE_LIST[$module]}\" == \"true\" ]; then\n+        return 0\n+    fi\n+    if [ ! -f \"$CITBX_ABS_DIR/modules/${module}.sh\" ]; then\n+        print_critical \"Module ${module} not found!\"\n+    fi\n+    . $CITBX_ABS_DIR/modules/${module}.sh\n+    CITBX_USE_LIST[$module]=\"true\"\n+    for h in $module_handler_list; do\n+        citbx_register_handler \"citbx_module_${module}\" $h\n+    done\n+}\n+\n+citbx_local() {\n+    if [ -f $CITBX_ABS_DIR/citbx.local ]; then\n+        . $CITBX_ABS_DIR/citbx.local\n+    fi\n+}\n+\n+# Job end handler\n+citbx_job_finish() {\n+    local CITBX_EXIT_CODE=$?\n+    if [ \"$CITBX_JOB_FINISH_CALLED\" != \"true\" ]; then\n+        CITBX_JOB_FINISH_CALLED=\"true\"\n+    else\n+        return 0\n+    fi\n+    for hook in $citbx_job_stage_after; do\n+        $citbx_before_script\n+        cd $CI_PROJECT_DIR\n+        $hook $CITBX_EXIT_CODE\n+        $citbx_after_script\n+    done\n+    if [ \"$CITBX_EXIT_CODE\" == \"0\" ]; then\n+        print_info \"CI job success!\"\n+    else\n+        print_error \"CI job failure with exit code $CITBX_EXIT_CODE\"\n+    fi\n+    print_note \"Job execution time: $(date +\"%H hour(s) %M minute(s) and %S second(s)\" -ud @$(($(date +%s) - $CITBX_JOB_START_TIME)))\"\n+}\n+\n+############################################################\n+#               ### GITLAB-RUNNER PART ###\n+# If running inside the suitable docker / on gitlab runner\n+############################################################\n+if [ \"$GITLAB_CI\" == \"true\" ]; then\n+    # Load job\n+    citbx_local\n+    CITBX_JOB_RUN_FILE_NAME=${CITBX_JOB_RUN_FILE_NAME:-\"$CI_JOB_NAME.sh\"}\n+    module_handler_list=\"before after\"\n+    CITBX_JOB_RUN_FILE_PATH=\"$CITBX_ABS_DIR/run.d/${CITBX_JOB_RUN_FILE_NAME}\"\n+    if [ ! -f \"$CITBX_JOB_RUN_FILE_PATH\" ]; then\n+        print_critical \"Job definition file $CITBX_JOB_RUN_FILE_PATH not found\"\n+    fi\n+    . \"$CITBX_JOB_RUN_FILE_PATH\"\n+    citbx_register_handler \"job\" \"main\"\n+    citbx_register_handler \"job\" \"after\"\n+    if [ \"$CITBX_DEBUG_SCRIPT_ENABLED\" == \"true\" ]; then\n+        citbx_before_script=\"set -x\"\n+        citbx_after_script=\"set +x\"\n+    else\n+        citbx_before_script=\"\"\n+        citbx_after_script=\"\"\n+    fi\n+    for hook in $citbx_job_stage_before; do\n+        $citbx_before_script\n+        cd $CI_PROJECT_DIR\n+        $hook\n+        $citbx_after_script\n+    done\n+    CITBX_JOB_START_TIME=$(date +%s)\n+    trap citbx_job_finish EXIT SIGINT SIGTERM\n+    print_info \"CI job begin\"\n+    if [ -z \"$citbx_job_stage_main\" ]; then\n+        print_critical \"Funtion job_main not found in the file $CITBX_JOB_RUN_FILE_PATH\"\n+    fi\n+    for hook in $citbx_job_stage_main; do\n+        $citbx_before_script\n+        cd $CI_PROJECT_DIR\n+        $hook\n+        $citbx_after_script\n+    done\n+    exit 0\n+fi\n+\n+############################################################\n+#               ### WORKSTATION PART ###\n+#      The following line until the end of this file\n+# is specific and only applicable to the local workstation\n+############################################################\n+\n+# Force use citbx_run_ext_job to run another job\n+if [ \"$CITBX\" == \"true\" ]; then\n+    print_critical \"You cannot call another CI script (i.e. other external job) into a CI script\" \\\n+        \"Please use citbx_run_ext_job instead\"\n+fi\n+export CITBX=\"true\"\n+\n+# YAML to JSON convertion\n+yaml2json() {\n+    cat \"$@\" | python -c 'import sys, yaml, json; json.dump(yaml.load(sys.stdin), sys.stdout)'\n+}\n+\n+# Collect the missing binaries and other dependencies\n+CITBX_MISSING_PKGS=()\n+for bin in gawk jq dockerd; do\n+    if ! which $bin > /dev/null 2>&1; then\n+        CITBX_MISSING_PKGS+=($bin)\n+    fi\n+done\n+if [ \"$(echo \"true\" | yaml2json 2>/dev/null)\" != \"true\" ]; then\n+    CITBX_MISSING_PKGS+=(\"python-yaml\")\n+fi\n+if [ \"$CITBX_GIT_LFS_SUPPORT_ENABLED\" == \"true\" ] && ! git lfs version > /dev/null 2>&1; then\n+    CITBX_MISSING_PKGS+=(\"git-lfs\")\n+fi\n+\n+if [ ! -f $CI_PROJECT_DIR/.gitlab-ci.yml ]; then\n+    print_critical \"$CI_PROJECT_DIR/.gitlab-ci.yml file not found\"\n+fi\n+if [ ${#CITBX_MISSING_PKGS[@]} -eq 0 ]; then\n+    GITLAB_CI_JSON=$(yaml2json $CI_PROJECT_DIR/.gitlab-ci.yml)\n+else\n+    print_warning \"System setup required (command '$CITBX_TOOL_NAME setup')\"\n+fi\n+\n+gitlab_ci_query() {\n+    jq \"$@\" <<< \"$GITLAB_CI_JSON\"\n+}\n+\n+# Check environment and run setup\n+citbx_check_env() {\n+    local os_id\n+    if [ \"$1\" != \"true\" ]; then\n+        if [ ${#CITBX_MISSING_PKGS[@]} -gt 0 ]; then\n+            print_critical \"System setup needed (binary(ies)/component(s) '${CITBX_MISSING_PKGS[*]}' missing): please execute '$CITBX_TOOL_NAME setup' first\"\n+        fi\n+        return 0\n+    fi\n+    if which lsb_release > /dev/null 2>&1; then\n+        os_id=$(lsb_release --id --short)\n+    elif [ -f /etc/os-release ]; then\n+        eval \"$(sed 's/^NAME=/os_id=/;tx;d;:x' /etc/os-release)\"\n+    fi\n+    local setupsh=\"$CITBX_ABS_DIR/env-setup/${os_id,,}.sh\"\n+    if [ ! -f \"$setupsh\" ]; then\n+        print_critical \"OS variant '$os_id' not supported (missing $setupsh)\"\n+    fi\n+    check_dns() {\n+        case \"$1\" in\n+            ::1|127.*)\n+                print_error \"Local $1 DNS server cannot be used with docker containers\"\n+                return 1\n+                ;;\n+            *)\n+                echo \"$1\"\n+                ;;\n+        esac\n+    }\n+    setup_component_enabled() {\n+        local pattern='\\b'\"$1\"'\\b'\n+        if [[ \"${CITBX_SETUP_COMPONENT[*]}\" =~ $pattern ]]; then\n+            return 0\n+        fi\n+        return 1\n+    }\n+    bashopts_process_option -n CITBX_DOCKER_DNS_LIST -r -k check_dns\n+    . \"$setupsh\"\n+    print_info \"System setup complete\" \"On a first install, a system reboot may be necessary\"\n+    exit 0\n+}\n+\n+# Get the job list\n+citbx_job_list() {\n+    local prefix outcmd arg\n+    prefix='[^\\.]'\n+    outcmd='print $0'\n+    if ! arglist=$(getopt -o \"f:p:s\" -n \"citbx_list \" -- \"$@\"); then\n+        print_critical \"Usage citbx_list: [options]\" \\\n+            \"        -f <val>  Output gawk command (default: 'print $0')\" \\\n+            \"        -s        Suffix list (same as -f 'printf(\\\" %s\\\", f[1]);')\" \\\n+            \"        -p <val>  Prefix string\"\n+    fi\n+    eval set -- \"$arglist\";\n+    while true; do\n+        arg=$1\n+        shift\n+        case \"$arg\" in\n+            -f) outcmd=$1;  shift;;\n+            -p) prefix=$1;  shift;;\n+            -s) outcmd='printf(\" %s\", f[1]);';;\n+            --) break;;\n+            *)  print_critical \"Fatal error\";;\n+        esac\n+    done\n+    gitlab_ci_query -r 'paths | select(.[-1] == \"script\") | .[0]' \\\n+        | gawk 'match($0, /^'\"$prefix\"'(.*)$/, f) {'\"$outcmd\"'}'\n+}\n+\n+declare -A CITBX_SHELL_ENV\n+# fetch YAML variables\n+gitlab_ci_variables() {\n+    local node=$1\n+    local value\n+    test -n \"$node\" \\\n+        || print_critical \"Usage: gitlab_ci_variables <node path>\"\n+    local node_type=\"$(gitlab_ci_query -r \"$node | type\")\"\n+    case \"$node_type\" in\n+        null)\n+            return 1\n+            ;;\n+        object)\n+            for k in $(gitlab_ci_query -r \"$node | keys[]\"); do\n+                if ! [[ \"$(gitlab_ci_query -r \"${node}.$k | type\")\" =~ ^(string|number)$ ]]; then\n+                    print_critical \"Invalid $node variable (type=$(gitlab_ci_query -r \"${node}.$k | type\"): $k)\"\n+                fi\n+                value=$(\n+                    eval \"$k=$(gitlab_ci_query \"${node}.$k\")\"\n+                    declare | grep \"^$k=\" | sed -E 's/^[^=]+=//g'\n+                )\n+                case \"$k\" in\n+                    CITBX_*|GIT_*|CI_*)\n+                        eval \"export $k=$value\"\n+                esac\n+                CITBX_SHELL_ENV[$k]=$value\n+                CITBX_DOCKER_RUN_ARGS+=(-e \"$k=$(eval echo \"$value\")\")\n+            done\n+            ;;\n+        *)\n+            print_critical \"Invalid $node type\"\n+            ;;\n+    esac\n+}\n+\n+# put YAML (array or string) node script content indo CITBX_YAML_SCRIPT_ELTS\n+gitlab_ci_script() {\n+    local node=$1\n+    local line\n+    test -n \"$node\" \\\n+        || print_critical \"Usage: gitlab_ci_script <node path>\"\n+    local script_type=\"$(gitlab_ci_query -r \"$node | type\")\"\n+    case \"$script_type\" in\n+        null)\n+            return 1\n+            ;;\n+        string)\n+            CITBX_YAML_SCRIPT_ELTS+=(gitlab_ci_query -r \"${node}\")\n+            ;;\n+        array)\n+            for i in $(seq 0 $(($(gitlab_ci_query \"$node | length\")-1))); do\n+                line=$(gitlab_ci_query -r \"${node}[$i]\")\n+                if [ \"$(gitlab_ci_query -r \"${node}[$i] | type\")\" != \"string\" ]; then\n+                    print_critical \"Invalid $node line: $line\"\n+                fi\n+                CITBX_YAML_SCRIPT_ELTS+=(\"$line\")\n+            done\n+            ;;\n+        *)\n+            print_critical \"Invalid $node type\"\n+            ;;\n+    esac\n+}\n+\n+# Run an other job\n+citbx_run_ext_job() {\n+    local job_name=$1\n+    test -n \"$job_name\" \\\n+        || print_critical \"Usage: citbx_run_ext_job <job name>\"\n+    print_note \"Starting job $job_name\"\n+    (\n+        set -e\n+        unset CITBX\n+        unset CITBX_COMMAND\n+        unset CITBX_JOB_RUN_FILE_NAME\n+        unset CITBX_GIT_CLEAN\n+        bashopts_export_opts\n+        export CI_JOB_NAME=$job_name\n+        exec $0 \"$@\"\n+    )\n+}\n+\n+# Export an variable to the job environment\n+citbx_export() {\n+    CITBX_ENV_EXPORT_LIST+=(\"$@\")\n+}\n+\n+# Add docker run arguments\n+citbx_docker_run_add_args() {\n+    CITBX_JOB_DOCKER_RUN_ARGS+=(\"$@\")\n+}\n+\n+# Load bashopts\n+BASHOPTS_FILE_PATH=${BASHOPTS_FILE_PATH:-\"$CITBX_ABS_DIR/3rdparty/bashopts.sh\"}\n+if [ ! -f \"$BASHOPTS_FILE_PATH\" ]; then\n+    print_critical \"Missing requered file $BASHOPTS_FILE_PATH [\\$BASHOPTS_FILE_PATH]\"\n+fi\n+bashopts_log_handler=\"print_log\"\n+. $BASHOPTS_FILE_PATH\n+# Enable backtrace dusplay on error\n+trap 'bashopts_exit_handle' ERR\n+\n+# Set the setting file path\n+if [ -z \"$CITBX_RC_PATH\" ]; then\n+    CITBX_RC_PATH=\"/dev/null\"\n+fi\n+\n+if [ ${#CITBX_MISSING_PKGS[@]} -eq 0 ]; then\n+    eval \"$(citbx_job_list -f 'printf(\"CITBX_JOB_LIST+=(\\\"%s\\\");\", $0);')\"\n+fi\n+\n+CITBX_TOOL_NAME=${CITBX_TOOL_NAME:-$0}\n+\n+bashopts_setup -n \"$(basename $CITBX_TOOL_NAME)\" \\\n+    -d \"Gitlab-CI job runner tool (version $CITBX_VERSION)\" \\\n+    -s \"$CITBX_RC_PATH\"\n+\n+if [ \"$CITBX_BASHCOMP\" == \"commands\" ]; then\n+    echo -e \"\\\"help\\\"\\n\\\"setup\\\"\\n\\\"update\\\"\"\n+    for j in \"${CITBX_JOB_LIST[@]}\"; do echo \"\\\"$j\\\"\"; done | sort -u\n+    exit 0\n+fi\n+\n+command=$1\n+shift || true\n+case \"$command\" in\n+    ''|h|help|-h|--help)\n+        bashopts_tool_usage=\"$CITBX_TOOL_NAME command [command options] [arguments...]\n+  => type '$CITBX_TOOL_NAME command -h' to display the contextual help\n+\n+COMMANDS:\n+    help      : Display this help\n+    setup     : Setup the environment\n+    update    : Update this tool (fetch the last version from https://gitlab.com/ercom/citbx4gitlab)\n+    ... or a job from the job list\n+\n+JOBS:\n+$(for j in \"${CITBX_JOB_LIST[@]}\"; do echo \"    $j\"; done | sort -u)\"\n+        bashopts_diplay_help_delayed\n+        ;;\n+    setup)\n+        bashopts_tool_usage=\"$CITBX_TOOL_NAME $command [arguments...]\n+  => type '$CITBX_TOOL_NAME help' to display the global help\"\n+        bashopts_declare -n CITBX_SETUP_COMPONENT -l component \\\n+            -t enum -m add -d \"Setup only specified components\" \\\n+            -e base-pkgs -e docker-cfg -e git-lfs -e ca-certs -e ci-toolbox \\\n+            -x '(base-pkgs docker-cfg git-lfs ca-certs ci-toolbox)'\n+        check_tool_name() {\n+            if [[ \"$1\" =~ ^[a-zA-Z0-9_-]+$ ]]; then\n+                echo $1\n+                return 0\n+            fi\n+            bashopts_log E \"'$1' is not a valid tool name\"\n+            return 1\n+        }\n+        bashopts_declare -n CITBX_TOOLBOX_NAME -l toolbox-name \\\n+            -t string -d \"CI toolbox name\" -k check_tool_name -v ci-toolbox\n+        bashopts_declare -n CITBX_DOCKER_BIP -l docker-bip -v \"$(\n+            val=$(jq -r '.bip' /etc/docker/daemon.json 2> /dev/null || true)\n+            echo ${val:-\"192.168.255.254/24\"}\n+        )\" -t string -d \"Local docker network IPV4 host adress\"\n+        bashopts_declare -n CITBX_DOCKER_FIXED_CIDR -l docker-cdir -v \"$(\n+            val=$(jq -r '.\"fixed-cidr\"' /etc/docker/daemon.json 2> /dev/null || true)\n+            echo ${val:-\"192.168.255.0/24\"}\n+        )\" -t string -d \"Local docker network IPV4 prefix\"\n+        bashopts_declare -n CITBX_DOCKER_DNS_LIST -l docker-dns -m add \\\n+            -x \"($(\n+                if [ \"0$(jq -e '.dns | length' /etc/docker/daemon.json 2> /dev/null || true)\" -gt 0 ]; then\n+                    jq -r '.dns[]' /etc/docker/daemon.json 2> /dev/null | tr '\\n' ' '\n+                else\n+                    RESOLV_CONF_DNS=\"$(cat /etc/resolv.conf | awk '/^nameserver/ {\n+                        if ($2 !~ /^127\\..*/ && $2 != \"::1\" ) {\n+                            printf(\" %s\", $2);\n+                        }\n+                    }' 2> /dev/null || true)\"\n+                    echo \"${RESOLV_CONF_DNS:-${CITBX_DOCKER_DEFAULT_DNS[*]}}\"\n+                fi\n+                ) )\" \\\n+            -t string -d \"Docker DNS\"\n+        bashopts_declare -n CITBX_DOCKER_STORAGE_DRIVER -l docker-storage-driver -v \"$(\n+            val=$(jq -r '.\"storage-driver\"' /etc/docker/daemon.json 2> /dev/null || true)\n+            echo ${val:-\"overlay2\"}\n+        )\" -e 'o|overlay2' -e 'overlay' -e 'a|aufs' -e 'd|devicemapper' -e 'b|btrfs' -e 'z|zfs' \\\n+            -t enum -d \"Docker storage driver\"\n+        ;;\n+    update)\n+        ;;\n+    *)\n+        # Properties check\n+        CITBX_DEFAULT_JOB_SHELL=${CITBX_DEFAULT_JOB_SHELL:-/bin/sh}\n+        CITBX_DEFAULT_SERVICE_DOCKER_PRIVILEGED=${CITBX_DEFAULT_SERVICE_DOCKER_PRIVILEGED:-false}\n+        CITBX_DEFAULT_GIT_LFS_ENABLED=${CITBX_DEFAULT_GIT_LFS_ENABLED:-false}\n+        # Command check\n+        pattern='\\b'\"$command\"'\\b'\n+        if ! [[ \"${CITBX_JOB_LIST[*]}\" =~ $pattern ]]; then\n+            print_critical \"Unreconized command; type '$CITBX_TOOL_NAME help' to display the help\"\n+        fi\n+        CI_JOB_NAME=$command\n+        citbx_local\n+        CITBX_JOB_RUN_FILE_NAME=${CITBX_JOB_RUN_FILE_NAME:-\"$CI_JOB_NAME.sh\"}\n+        # Read Image property\n+        for p in '.\"'\"$CI_JOB_NAME\"'\"' ''; do\n+            case \"$(gitlab_ci_query -r \"$p.image | type\")\" in\n+                object)\n+                    if [ \"$(gitlab_ci_query -r \"$p.image.name | type\")\" == \"string\" ]; then\n+                        CITBX_DEFAULT_DOCKER_IMAGE=$(gitlab_ci_query -r \"$p.image.name\")\n+                        if [ \"$(gitlab_ci_query -r \"$p.image.entrypoint | type\")\" == \"array\" ]; then\n+                            for i in $(seq 0 $(gitlab_ci_query -r \"$p.image.entrypoint | length - 1\")); do\n+                                CITBX_DEFAULT_DOCKER_ENTRYPOINT+=(\"$(gitlab_ci_query -r \"$p.image.entrypoint[$i]\")\")\n+                            done\n+                        fi\n+                        break\n+                    fi\n+                    ;;\n+                string)\n+                    CITBX_DEFAULT_DOCKER_IMAGE=$(gitlab_ci_query -r \"$p.image\")\n+                    break\n+                    ;;\n+                *)\n+                    ;;\n+            esac\n+        done\n+        # Read the gitlab-ci variables\n+        gitlab_ci_variables \".\\\"variables\\\"\" || true\n+        gitlab_ci_variables \".\\\"$CI_JOB_NAME\\\".\\\"variables\\\"\" || true\n+        # Define job usage\n+        bashopts_tool_usage=\"$CITBX_TOOL_NAME $command [arguments...]\n+  => type '$CITBX_TOOL_NAME help' to display the global help\"\n+        # Define the generic options\n+        bashopts_declare -n GIT_SUBMODULE_STRATEGY -l submodule-strategy \\\n+            -d \"Git submodule strategy (none, normal or recursive)\" -t enum -v \"${GIT_SUBMODULE_STRATEGY:-none}\" \\\n+            -e 'none' -e 'normal' -e 'recursive'\n+        bashopts_declare -n CITBX_GIT_CLEAN -l git-clean -o c \\\n+            -d \"Perfom a git clean -fdx in the main project and submodules\" -t boolean\n+        if [ \"$CITBX_GIT_LFS_SUPPORT_ENABLED\" == \"true\" ]; then\n+            bashopts_declare -n CITBX_GIT_LFS_ENABLED -l git-lfs -v \"$CITBX_DEFAULT_GIT_LFS_ENABLED\" \\\n+                -d \"Enable git LFS support\" -t boolean\n+        fi\n+        declare_opts=()\n+        if [ -n \"$DEFAULT_CI_REGISTRY\" ]; then\n+            declare_opts+=(-v \"$DEFAULT_CI_REGISTRY\")\n+        fi\n+        bashopts_declare -n CI_REGISTRY -l docker-registry -d \"Docker registry\" -t string -s \"${declare_opts[@]}\"\n+        unset declare_opts\n+        bashopts_declare -n CITBX_DOCKER_LOGIN_MODE -l docker-login -d \"Execute docker login\" -t enum \\\n+            -e \"enabled\" -e \"disabled\" -e \"auto\" -v \"${CITBX_DEFAULT_DOCKER_LOGIN_MODE:-auto}\"\n+        bashopts_declare -n CITBX_JOB_EXECUTOR -l job-executor -o e \\\n+            -d \"Job executor type (only docker or shell is sypported yet)\" -t enum \\\n+            -v \"$(test -n \"$CITBX_DEFAULT_DOCKER_IMAGE\" && echo \"docker\" || echo \"shell\" )\" \\\n+            -e 's|shell' -e 'd|docker'\n+        bashopts_declare -n CITBX_DOCKER_IMAGE -l docker-image -d \"Docker image name\" -t string \\\n+            -x \"\\\"$CITBX_DEFAULT_DOCKER_IMAGE\\\"\"\n+        bashopts_declare -n CITBX_DOCKER_ENTRYPOINT -l docker-entrypoint -d \"Docker entrypoint\" -t string -m add \\\n+            -x \"$(bashopts_get_def CITBX_DEFAULT_DOCKER_ENTRYPOINT)\"\n+        bashopts_declare -n CITBX_UID -l uid -t number \\\n+            -d \"Start this script as a specific uid (0 for root)\" -v \"$(id -u)\"\n+        CITBX_USER_GROUPS=(adm plugdev)\n+        bashopts_declare -n CITBX_USER_GROUPS -l group -t string -m add \\\n+            -d \"User group list\"\n+        bashopts_declare -n CITBX_DEBUG_SCRIPT_ENABLED -o x -l debug-script -t boolean \\\n+            -d \"Enable SHELL script debug (set -e)\"\n+        citbx_export CITBX_DEBUG_SCRIPT_ENABLED\n+        bashopts_declare -n CITBX_RUN_SHELL -o s -l run-shell -t boolean \\\n+            -d \"Run a shell instead of run the default command (override CITBX_COMMAND option)\"\n+        bashopts_declare -n CITBX_JOB_SHELL -l shell -t string -v \"$CITBX_DEFAULT_JOB_SHELL\" \\\n+            -d \"Use a specific shell to run the job\"\n+        bashopts_declare -n CITBX_WAIT_FOR_SERVICE_START -l wait-srv-started -t number -v 0 \\\n+            -d \"Wait for service start (time in seconds)\"\n+        bashopts_declare -n CITBX_DISABLED_SERVICES -l disable-service -t string \\\n+            -d \"Disable a service\" -m add\n+        bashopts_declare -n CITBX_SERVICE_DOCKER_PRIVILEGED -l service-privileged -t boolean \\\n+            -d \"Start service docker container in privileged mode\" -v \"$CITBX_DEFAULT_SERVICE_DOCKER_PRIVILEGED\"\n+        CITBX_DOCKER_USER=${CITBX_DOCKER_USER:-root}\n+\n+        # Load job \n+        module_handler_list=\"define setup\"\n+        if [ -f \"$CITBX_ABS_DIR/run.d/$CITBX_JOB_RUN_FILE_NAME\" ]; then\n+            . \"$CITBX_ABS_DIR/run.d/$CITBX_JOB_RUN_FILE_NAME\"\n+            citbx_register_handler \"job\" \"define\"\n+            citbx_register_handler \"job\" \"setup\"\n+        fi\n+        for hook in $citbx_job_stage_define; do\n+            cd $CI_PROJECT_DIR\n+            $hook\n+        done\n+        ;;\n+esac\n+\n+if [ -n \"$CITBX_BASHCOMP\" ]; then\n+    # ### BASH completion specific part ###\n+    # Used only by the bashcomp tool to generate completion words\n+    case \"$CITBX_BASHCOMP\" in\n+        opts)\n+            for o in \"${bashopts_optprop_short_opt[@]}\"; do\n+                echo \"\\\"-$o\\\"\"\n+            done | sort -u\n+            for o in \"${bashopts_optprop_long_opt[@]}\"; do\n+                echo \"\\\"--$o\\\"\"\n+            done | sort -u\n+            ;;\n+        longopts)\n+            for o in \"${bashopts_optprop_long_opt[@]}\"; do\n+                echo \"\\\"--$o\\\"\"\n+            done | sort -u\n+            ;;\n+        --docker-image)\n+            while read -r line; do\n+                echo \"\\\"$line\\\"\"\n+            done <<< \"$(docker images | tail -n +2 \\\n+                | awk '($1 != \"<none>\" && $2 != \"<none>\") {print $1\":\"$2}')\"\n+            ;;\n+        -*)\n+            bashopts_get_valid_value_list $CITBX_BASHCOMP\n+            ;;\n+    esac\n+    exit 0\n+fi\n+\n+# Parse arguments\n+bashopts_parse_args \"$@\"\n+\n+# Process argument\n+bashopts_process_opts\n+\n+# check the environment\n+citbx_check_env $(test \"$command\" != \"setup\" || echo \"true\")\n+\n+if [ \"$command\" == \"update\" ]; then\n+    tmpdir=$(mktemp -d)\n+    version=${bashopts_commands[0]:-\"master\"}\n+    print_note \"Downloading $version archive from gitlab.com...\"\n+    curl -fSsL https://gitlab.com/ercom/citbx4gitlab/repository/$version/archive.tar.bz2 | tar -C $tmpdir -xj\n+    srcdir=\"$tmpdir/$(ls -1 $tmpdir)\"\n+    cp -av $srcdir/tools/gitlab-ci/run.sh $CITBX_ABS_DIR/run.sh\n+    chmod +x $CITBX_ABS_DIR/run.sh\n+    mkdir -p $CITBX_ABS_DIR/env-setup\n+    cp -av $srcdir/tools/gitlab-ci/env-setup/* $CITBX_ABS_DIR/env-setup/\n+    cp -av $srcdir/tools/gitlab-ci/3rdparty/bashopts.sh $BASHOPTS_FILE_PATH\n+    rm -rf $tmpdir\n+    print_info \"Update done!\"\n+    exit 0\n+fi\n+\n+if [ \"$(gitlab_ci_query -r '.\"'\"$CI_JOB_NAME\"'\".script | type')\" == \"null\" ]; then\n+    print_critical \"Unable to find a valid job with tne name \\\"$CI_JOB_NAME\\\" in the .gitlab-ci.yml\"\n+fi\n+\n+# Login to the registry if needed\n+if [ -n \"$CI_REGISTRY\" ] \\\n+    && ( ( [ -z \"$(jq -r '.\"auths\".\"'$CI_REGISTRY'\" | select(.auth != null)' $HOME/.docker/config.json 2> /dev/null)\" ] \\\n+            && [ \"$CITBX_DOCKER_LOGIN_MODE\" == \"auto\" ] ) \\\n+        || [ \"$CITBX_DOCKER_LOGIN_MODE\" == \"enabled\" ] ); then\n+    print_info \"You seem to be not authenticated against the gitlab docker registry\" \\\n+        \"> You can disable this feature by using --docker-login=disabled\" \\\n+        \"> Or force this feature permanently by setting CITBX_DEFAULT_DOCKER_LOGIN_MODE into $CITBX_ABS_DIR/citbx.properties\" \\\n+        \"Please enter your gitlab user id and password:\"\n+    docker login $CI_REGISTRY\n+fi\n+\n+# Compute commands from before_script script and after_script\n+CITBX_JOB_SCRIPT='\n+if [ -f $HOME/.bashrc ]; then\n+    . $HOME/.bashrc\n+fi\n+print_info() {\n+    printf \"\\e[1m\\e[92m%s\\e[0m\\n\" \"$@\"\n+}\n+print_error() {\n+    printf \"\\e[1m\\e[91m%s\\e[0m\\n\" \"$@\"\n+}\n+print_cmd() {\n+    printf \"\\e[1m\\e[92m$ %s\\e[0m\\n\" \"$@\"\n+}\n+'$(if [ \"$CITBX_DEBUG_SCRIPT_ENABLED\" == \"true\" ]; then\n+    echo \"set -x\"\n+fi)'\n+__job_exit_code__=0\n+(\n+'\n+gitlab_ci_script \".\\\"$CI_JOB_NAME\\\".\\\"before_script\\\"\" \\\n+    || gitlab_ci_script \".\\\"before_script\\\"\" \\\n+    || true\n+gitlab_ci_script \".\\\"$CI_JOB_NAME\\\".\\\"script\\\"\" \\\n+    || print_critical \"script \\\"$CI_JOB_NAME\\\".script node nor found!\"\n+for line in \"${CITBX_YAML_SCRIPT_ELTS[@]}\"; do\n+    CITBX_JOB_SCRIPT=\"$CITBX_JOB_SCRIPT\n+print_cmd $(bashopts_get_def line)\n+$line || exit \\$?\n+\"\n+done\n+CITBX_JOB_SCRIPT=\"$CITBX_JOB_SCRIPT\"'\n+) || __job_exit_code__=$?\n+'\n+unset CITBX_YAML_SCRIPT_ELTS\n+if gitlab_ci_script \".\\\"$CI_JOB_NAME\\\".\\\"after_script\\\"\" \\\n+    || gitlab_ci_script \".\\\"after_script\\\"\"; then\n+\n+    CITBX_JOB_SCRIPT=\"$CITBX_JOB_SCRIPT\"'\n+print_info \"Running after script...\"\n+'\n+    for line in \"${CITBX_YAML_SCRIPT_ELTS[@]}\"; do\n+        CITBX_JOB_SCRIPT=\"$CITBX_JOB_SCRIPT\n+print_cmd $(bashopts_get_def line)\n+$line\n+\"\n+    done\n+fi\n+CITBX_JOB_SCRIPT=\"$CITBX_JOB_SCRIPT\"'\n+if [ $__job_exit_code__ -eq 0 ]; then\n+    print_info \"Job succeeded\"\n+else\n+    print_error \"ERROR: Job failed: exit code $__job_exit_code__\"\n+fi\n+exit $__job_exit_code__\n+'\n+CITBX_JOB_SCRIPT=\"'\"${CITBX_JOB_SCRIPT//\\'/\\'\\\\\\'\\'}\"'\"\n+\n+# Fetch git submodules\n+if [ \"$GIT_SUBMODULE_STRATEGY\" != \"none\" ]; then\n+    GIT_SUBMODULE_ARGS=()\n+    case \"$GIT_SUBMODULE_STRATEGY\" in\n+        normal)\n+            ;;\n+        recursive)\n+            GIT_SUBMODULE_ARGS+=(\"--recursive\")\n+            ;;\n+        *)\n+            print_critical \"Invalid value for GIT_SUBMODULE_STRATEGY: $GIT_SUBMODULE_STRATEGY\"\n+            ;;\n+    esac\n+    print_info \"Fetching git submodules...\"\n+    git submodule --quiet sync \"${GIT_SUBMODULE_ARGS[@]}\"\n+    git submodule update --init \"${GIT_SUBMODULE_ARGS[@]}\"\n+fi\n+\n+if [ \"$CITBX_GIT_CLEAN\" == \"true\" ]; then\n+    git clean -fdx\n+    if [ \"$GIT_SUBMODULE_STRATEGY\" != \"none\" ]; then\n+        git submodule --quiet foreach \"${GIT_SUBMODULE_ARGS[@]}\" git clean -fdx\n+    fi\n+fi\n+\n+# TODO: seems to be not needed anymore with recent git version\n+if [ \"$CITBX_GIT_LFS_ENABLED\" == \"true\" ]; then\n+    git lfs pull\n+    if [ \"$GIT_SUBMODULE_STRATEGY\" != \"none\" ]; then\n+        git submodule --quiet foreach \"${GIT_SUBMODULE_ARGS[@]}\" git lfs pull\n+    fi\n+fi\n+\n+# Git SHA1\n+CI_COMMIT_REF_NAME=${CI_COMMIT_REF_NAME:-$(cd $CI_PROJECT_DIR && git rev-parse --abbrev-ref HEAD)}\n+CITBX_JOB_DOCKER_RUN_ARGS+=(-e CI_COMMIT_REF_NAME=\"$CI_COMMIT_REF_NAME\")\n+\n+# If not set, fill the CI_SERVER_TLS_CA_FILE with local CA certificates\n+if ! [[ -v CITBX_TLS_CA_SEARCH_DIR_LIST ]]; then\n+    CITBX_TLS_CA_SEARCH_DIR_LIST=(\"/usr/local/share/ca-certificates/\")\n+fi\n+if ! [[ -v CI_SERVER_TLS_CA_FILE ]]; then\n+    CI_SERVER_TLS_CA_FILE=\"$(\n+        for dir in \"${CITBX_TLS_CA_SEARCH_DIR_LIST[@]}\"; do\n+            test ! -d \"$dir\" \\\n+                || find \"$dir\" -iregex '.*\\.\\(pem\\|crt\\)$' -exec openssl x509 -in '{}' \\;\n+        done\n+    )\"\n+fi\n+\n+# Add variable to the environment list\n+CITBX_ENV_EXPORT_LIST+=(CI_JOB_NAME CI_REGISTRY CI_PROJECT_DIR CI_SERVER_TLS_CA_FILE)\n+\n+if [ \"$CITBX_DEBUG_SCRIPT_ENABLED\" == \"true\" ]; then\n+    citbx_before_script=\"set -x\"\n+    citbx_after_script=\"set +x\"\n+else\n+    citbx_before_script=\"\"\n+    citbx_after_script=\"\"\n+fi\n+\n+# Run the job setup hooks\n+for hook in $citbx_job_stage_setup; do\n+    $citbx_before_script\n+    $hook\n+    $citbx_after_script\n+done\n+\n+case \"$CITBX_JOB_EXECUTOR\" in\n+    shell)\n+        print_info \"Running the job \\\"$CI_JOB_NAME\\\" into the shell $CITBX_JOB_SHELL...\"\n+        (\n+            unset CITBX\n+            export GITLAB_CI=true\n+            for e in ${CITBX_ENV_EXPORT_LIST[@]}; do\n+                export $e\n+            done\n+            for e in \"${!CITBX_SHELL_ENV[@]}\"; do\n+                eval \"export $e=${CITBX_SHELL_ENV[$e]}\"\n+            done\n+            eval \"$CITBX_JOB_SHELL -c $CITBX_JOB_SCRIPT\"\n+        )\n+        ;;\n+    docker)\n+        # Setup docker environment\n+        if [ -z \"$CITBX_DOCKER_IMAGE\" ] || [ \"$CITBX_DOCKER_IMAGE\" == \"null\" ]; then\n+            print_critical \"No image property found in .gitlab-ci.yml for the job \\\"$CI_JOB_NAME\\\"\"\n+        fi\n+        CITBX_ID=$(head -c 8 /dev/urandom | od -t x8 -An | grep -oE '\\w+')\n+        CITBX_DOCKER_PREFIX=\"citbx-$CITBX_ID\"\n+        if [ -f \"$HOME/.docker/config.json\" ]; then\n+            CITBX_JOB_DOCKER_RUN_ARGS+=(-v $HOME/.docker/config.json:/root/.docker/config.json:ro)\n+        fi\n+        CITBX_JOB_SHELL=${CITBX_JOB_SHELL:-\"/bin/sh\"}\n+        if [ \"$CITBX_UID\" -eq 0 ] || [ \"$CITBX_DOCKER_USER\" != \"root\" ]; then\n+            if [ \"$CITBX_RUN_SHELL\" == \"true\" ]; then\n+                CITBX_COMMANDS=$CITBX_JOB_SHELL\n+            else\n+                CITBX_COMMANDS=\"$CITBX_JOB_SHELL -c $CITBX_JOB_SCRIPT\"\n+            fi\n+        else\n+            if [ -f \"$HOME/.docker/config.json\" ]; then\n+                CITBX_JOB_DOCKER_RUN_ARGS+=(-v $HOME/.docker/config.json:$HOME/.docker/config.json:ro)\n+            fi\n+            CITBX_COMMANDS='\n+                if which useradd > /dev/null 2>&1; then\n+                    useradd -o -u '\"$CITBX_UID\"' -s /bin/sh -d '\"$HOME\"' -M ci-user;\n+                elif readlink -f \"$(which adduser)\" | grep -q /busybox$ > /dev/null 2>&1; then\n+                    busybox adduser -u '\"$CITBX_UID\"' -s /bin/sh -h '\"$HOME\"' -H -D ci-user\n+                else\n+                    echo \"[!!] No usual tool found to add an user\"\n+                    exit 1\n+                fi\n+                chown '\"$CITBX_UID\"':'\"$CITBX_UID\"' '\"$HOME\"'\n+                for group in '\"${CITBX_USER_GROUPS[*]}\"'; do\n+                    if grep -q ^$group /etc/group; then\n+                        addgroup ci-user $group > /dev/null;\n+                    fi;\n+                done;\n+                if [ -f /etc/sudoers ]; then\n+                    sed -i \"/^ci-user /d\" /etc/sudoers;\n+                    echo \"ci-user ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers;\n+                fi;\n+                echo \"export PATH=\\\"$PATH\\\"\" >> \"'\"$HOME\"'/.bashrc\"\n+                su ci-user -s '\"$CITBX_JOB_SHELL\"' '\"$( test \"$CITBX_RUN_SHELL\" == \"true\" \\\n+                    || echo \"-c $CITBX_JOB_SCRIPT\" )\"';\n+            '\n+        fi\n+\n+        if [ -n \"$CITBX_DOCKER_USER\" ]; then\n+            CITBX_JOB_DOCKER_RUN_ARGS+=(-u \"$CITBX_DOCKER_USER\")\n+        fi\n+\n+        # Compute the environment variables\n+        for e in ${CITBX_ENV_EXPORT_LIST[@]}; do\n+            CITBX_DOCKER_RUN_ARGS+=(-e $e=\"${!e}\")\n+        done\n+\n+        CITBX_PRE_COMMANDS=()\n+        # Entrypoint override management\n+        if [ -n \"$CITBX_DOCKER_ENTRYPOINT\" ]; then\n+            CITBX_JOB_DOCKER_RUN_ARGS+=(--entrypoint \"$CITBX_DOCKER_ENTRYPOINT\")\n+            for e in \"${CITBX_DOCKER_ENTRYPOINT[@]:1}\"; do\n+                CITBX_PRE_COMMANDS+=(\"$e\")\n+            done\n+        fi\n+\n+        # hook executed on exit\n+        executor_docker_exit_hook() {\n+            test -n \"$CITBX_DOCKER_PREFIX\" || print_critical \"Assert: empty CITBX_DOCKER_PREFIX\"\n+            for d in $(docker ps -a --filter \"label=$CITBX_DOCKER_PREFIX\" -q); do\n+                docker rm -f $d > /dev/null 2>&1 || true\n+            done\n+        }\n+        trap executor_docker_exit_hook EXIT SIGINT SIGTERM\n+\n+        wait_before_run_job=0\n+\n+        # Start a service\n+        start_docker_service() {\n+            local args=()\n+            local image=$1\n+            local name=$2\n+            local ip\n+            local pattern='\\b'\"$name\"'\\b'\n+            if [[ \"${CITBX_DISABLED_SERVICES[*]}\" =~ $pattern ]]; then\n+                print_note \"Skipping $name service start\"\n+                return 0\n+            fi\n+            args+=(--name \"$CITBX_DOCKER_PREFIX-$name\" --label \"$CITBX_DOCKER_PREFIX\")\n+            shift 2\n+            if [ -n \"$1\" ]; then\n+                args+=(--entrypoint \"$1\")\n+            fi\n+            if [ \"$CITBX_SERVICE_DOCKER_PRIVILEGED\" == \"true\" ]; then\n+                args+=(--privileged)\n+            fi\n+            shift || true\n+            print_info \"Starting service $name...\"\n+            docker run -d \"${args[@]}\" \"${CITBX_DOCKER_RUN_ARGS[@]}\" \"$image\" \"$@\"\n+            # Get container IP and add --add-host options\n+            ip=$(docker inspect $CITBX_DOCKER_PREFIX-$name | jq -r .[0].NetworkSettings.Networks.bridge.IPAddress)\n+            CITBX_JOB_DOCKER_RUN_ARGS+=(--add-host \"$name:$ip\")\n+            wait_before_run_job=$CITBX_WAIT_FOR_SERVICE_START\n+        }\n+\n+        # Start services\n+        for p in '.\"'\"$CI_JOB_NAME\"'\"' ''; do\n+            for s in $([ \"$(gitlab_ci_query -r \"$p.services | type\")\" != \"array\" ] \\\n+                || seq 0 $(($(gitlab_ci_query -r \"$p.services | length\") - 1))); do\n+                unset service_image service_alias service_commands\n+                service_commands=()\n+                case \"$(gitlab_ci_query -r \"$p.services[$s] | type\")\" in\n+                    object)\n+                        # Read the service name/image property\n+                        if [ \"$(gitlab_ci_query -r \"$p.services[$s].name | type\")\" == \"string\" ]; then\n+                            service_image=\"$(eval echo \"$(gitlab_ci_query \"$p.services[$s].name\")\")\"\n+                        else\n+                            print_critical \"$s: property 'name' not found\"\n+                        fi\n+                        # Read entrypoint property\n+                        if [ \"$(gitlab_ci_query -r \"$p.services[$s].entrypoint | type\")\" == \"array\" ]; then\n+                            for i in $(seq 0 $(gitlab_ci_query -r \"$p.services[$s].entrypoint | length - 1\")); do\n+                                service_commands+=(\"$(eval echo \"$(gitlab_ci_query \"$p.services[$s].entrypoint[$i]\")\")\")\n+                            done\n+                        else\n+                            # Empty: NO entrypoint\n+                            service_commands+=(\"\")\n+                        fi\n+                        # Read command property\n+                        if [ \"$(gitlab_ci_query -r \"$p.services[$s].command | type\")\" == \"array\" ]; then\n+                            for i in $(seq 0 $(gitlab_ci_query -r \"$p.services[$s].command | length - 1\")); do\n+                                service_commands+=(\"$(eval echo \"$(gitlab_ci_query \"$p.services[$s].command[$i]\")\")\")\n+                            done\n+                        fi\n+                        # Read service alias property\n+                        if [ \"$(gitlab_ci_query -r \"$p.services[$s].alias | type\")\" == \"string\" ]; then\n+                            service_alias=\"$(eval echo \"$(gitlab_ci_query \"$p.services[$s].alias\")\")\"\n+                        else\n+                            service_alias=\"$(echo \"$service_image\" | sed -E 's/:[^:\\/]+//g' | sed -E 's/[^a-zA-Z0-9\\._-]/__/g')\"\n+                        fi\n+                        # Start service\n+                        start_docker_service \"$service_image\" \"$service_alias\" \"${service_commands[@]}\"\n+                        ;;\n+                    string)\n+                        service_image=\"$(eval echo \"$(gitlab_ci_query \"$p.services[$s]\")\")\"\n+                        # Start service\n+                        start_docker_service \"$service_image\" \"$(echo \"$service_image\" | sed -E 's/:[^:\\/]+//g' | sed -E 's/[^a-zA-Z0-9\\._-]/__/g')\"\n+                        ;;\n+                    *)\n+                        ;;\n+                esac\n+            done\n+        done\n+\n+        # Wait time\n+        if [ $wait_before_run_job -gt 0 ]; then\n+            print_note \"Waiting $wait_before_run_job seconds before run the job...\"\n+            sleep $wait_before_run_job\n+        fi\n+\n+        # Add project dir mount\n+        CITBX_JOB_DOCKER_RUN_ARGS+=(-v \"$CI_PROJECT_DIR:$CI_PROJECT_DIR:rw\")\n+        GIRDIR_PATH=$(readlink -f $(git rev-parse --git-common-dir))\n+        if [ \"${GIRDIR_PATH#$CI_PROJECT_DIR}\" == \"$GIRDIR_PATH\" ]; then\n+            # If the git dir is ouside the project dir\n+            CITBX_JOB_DOCKER_RUN_ARGS+=(-v \"$GIRDIR_PATH:$GIRDIR_PATH:rw\")\n+        fi\n+\n+        if [ \"$CITBX_RUN_SHELL\" == \"true\" ]; then\n+            print_info \"Running a shell into the $CITBX_DOCKER_IMAGE docker container...\"\n+            CITBX_JOB_DOCKER_RUN_ARGS+=(-w \"$PWD\")\n+        else\n+            print_info \"Running the job \\\"$CI_JOB_NAME\\\" into the $CITBX_DOCKER_IMAGE docker container...\"\n+            CITBX_JOB_DOCKER_RUN_ARGS+=(-w \"$CI_PROJECT_DIR\")\n+        fi\n+\n+        # Run the docker\n+        docker run --rm -ti --name=\"$CITBX_DOCKER_PREFIX-build\" --hostname=\"$CITBX_DOCKER_PREFIX-build\" \\\n+            -e CI=true -e GITLAB_CI=true -v /var/run/docker.sock:/var/run/docker.sock \\\n+            \"${CITBX_DOCKER_RUN_ARGS[@]}\" --label \"$CITBX_DOCKER_PREFIX\" \"${CITBX_JOB_DOCKER_RUN_ARGS[@]}\" \\\n+            -e DOCKER_RUN_EXTRA_ARGS=\"$(bashopts_get_def bashopts_extra_args)\" \"${bashopts_extra_args[@]}\" \\\n+            $CITBX_DOCKER_IMAGE \"${CITBX_PRE_COMMANDS[@]}\" $CITBX_JOB_SHELL -c \"$CITBX_COMMANDS\" \\\n+            || exit $?\n+        ;;\n+    *)\n+        print_critical \"Invalid or unsupported '$CITBX_JOB_EXECUTOR' executor\"\n+        ;;\n+esac\n",
          "commitId": "6d8343b6a739a8d09744f699ab8bb5330c62c494"
        }
      ]
    },
    {
      "id": "8b9801b5b1cfe8dc32704df1bbaf81f19213e610",
      "title": "Add LICENSE file",
      "created_at": "2017-12-18T08:58:51.000Z",
      "message": "Add LICENSE file\n",
      "author_name": "Emeric Verschuur",
      "diffs": [
        {
          "id": 3603,
          "oldPath": "LICENSE",
          "newPath": "LICENSE",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1,675 @@\n+                    GNU GENERAL PUBLIC LICENSE\n+                       Version 3, 29 June 2007\n+\n+ Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n+ Everyone is permitted to copy and distribute verbatim copies\n+ of this license document, but changing it is not allowed.\n+\n+                            Preamble\n+\n+  The GNU General Public License is a free, copyleft license for\n+software and other kinds of works.\n+\n+  The licenses for most software and other practical works are designed\n+to take away your freedom to share and change the works.  By contrast,\n+the GNU General Public License is intended to guarantee your freedom to\n+share and change all versions of a program--to make sure it remains free\n+software for all its users.  We, the Free Software Foundation, use the\n+GNU General Public License for most of our software; it applies also to\n+any other work released this way by its authors.  You can apply it to\n+your programs, too.\n+\n+  When we speak of free software, we are referring to freedom, not\n+price.  Our General Public Licenses are designed to make sure that you\n+have the freedom to distribute copies of free software (and charge for\n+them if you wish), that you receive source code or can get it if you\n+want it, that you can change the software or use pieces of it in new\n+free programs, and that you know you can do these things.\n+\n+  To protect your rights, we need to prevent others from denying you\n+these rights or asking you to surrender the rights.  Therefore, you have\n+certain responsibilities if you distribute copies of the software, or if\n+you modify it: responsibilities to respect the freedom of others.\n+\n+  For example, if you distribute copies of such a program, whether\n+gratis or for a fee, you must pass on to the recipients the same\n+freedoms that you received.  You must make sure that they, too, receive\n+or can get the source code.  And you must show them these terms so they\n+know their rights.\n+\n+  Developers that use the GNU GPL protect your rights with two steps:\n+(1) assert copyright on the software, and (2) offer you this License\n+giving you legal permission to copy, distribute and/or modify it.\n+\n+  For the developers' and authors' protection, the GPL clearly explains\n+that there is no warranty for this free software.  For both users' and\n+authors' sake, the GPL requires that modified versions be marked as\n+changed, so that their problems will not be attributed erroneously to\n+authors of previous versions.\n+\n+  Some devices are designed to deny users access to install or run\n+modified versions of the software inside them, although the manufacturer\n+can do so.  This is fundamentally incompatible with the aim of\n+protecting users' freedom to change the software.  The systematic\n+pattern of such abuse occurs in the area of products for individuals to\n+use, which is precisely where it is most unacceptable.  Therefore, we\n+have designed this version of the GPL to prohibit the practice for those\n+products.  If such problems arise substantially in other domains, we\n+stand ready to extend this provision to those domains in future versions\n+of the GPL, as needed to protect the freedom of users.\n+\n+  Finally, every program is threatened constantly by software patents.\n+States should not allow patents to restrict development and use of\n+software on general-purpose computers, but in those that do, we wish to\n+avoid the special danger that patents applied to a free program could\n+make it effectively proprietary.  To prevent this, the GPL assures that\n+patents cannot be used to render the program non-free.\n+\n+  The precise terms and conditions for copying, distribution and\n+modification follow.\n+\n+                       TERMS AND CONDITIONS\n+\n+  0. Definitions.\n+\n+  \"This License\" refers to version 3 of the GNU General Public License.\n+\n+  \"Copyright\" also means copyright-like laws that apply to other kinds of\n+works, such as semiconductor masks.\n+\n+  \"The Program\" refers to any copyrightable work licensed under this\n+License.  Each licensee is addressed as \"you\".  \"Licensees\" and\n+\"recipients\" may be individuals or organizations.\n+\n+  To \"modify\" a work means to copy from or adapt all or part of the work\n+in a fashion requiring copyright permission, other than the making of an\n+exact copy.  The resulting work is called a \"modified version\" of the\n+earlier work or a work \"based on\" the earlier work.\n+\n+  A \"covered work\" means either the unmodified Program or a work based\n+on the Program.\n+\n+  To \"propagate\" a work means to do anything with it that, without\n+permission, would make you directly or secondarily liable for\n+infringement under applicable copyright law, except executing it on a\n+computer or modifying a private copy.  Propagation includes copying,\n+distribution (with or without modification), making available to the\n+public, and in some countries other activities as well.\n+\n+  To \"convey\" a work means any kind of propagation that enables other\n+parties to make or receive copies.  Mere interaction with a user through\n+a computer network, with no transfer of a copy, is not conveying.\n+\n+  An interactive user interface displays \"Appropriate Legal Notices\"\n+to the extent that it includes a convenient and prominently visible\n+feature that (1) displays an appropriate copyright notice, and (2)\n+tells the user that there is no warranty for the work (except to the\n+extent that warranties are provided), that licensees may convey the\n+work under this License, and how to view a copy of this License.  If\n+the interface presents a list of user commands or options, such as a\n+menu, a prominent item in the list meets this criterion.\n+\n+  1. Source Code.\n+\n+  The \"source code\" for a work means the preferred form of the work\n+for making modifications to it.  \"Object code\" means any non-source\n+form of a work.\n+\n+  A \"Standard Interface\" means an interface that either is an official\n+standard defined by a recognized standards body, or, in the case of\n+interfaces specified for a particular programming language, one that\n+is widely used among developers working in that language.\n+\n+  The \"System Libraries\" of an executable work include anything, other\n+than the work as a whole, that (a) is included in the normal form of\n+packaging a Major Component, but which is not part of that Major\n+Component, and (b) serves only to enable use of the work with that\n+Major Component, or to implement a Standard Interface for which an\n+implementation is available to the public in source code form.  A\n+\"Major Component\", in this context, means a major essential component\n+(kernel, window system, and so on) of the specific operating system\n+(if any) on which the executable work runs, or a compiler used to\n+produce the work, or an object code interpreter used to run it.\n+\n+  The \"Corresponding Source\" for a work in object code form means all\n+the source code needed to generate, install, and (for an executable\n+work) run the object code and to modify the work, including scripts to\n+control those activities.  However, it does not include the work's\n+System Libraries, or general-purpose tools or generally available free\n+programs which are used unmodified in performing those activities but\n+which are not part of the work.  For example, Corresponding Source\n+includes interface definition files associated with source files for\n+the work, and the source code for shared libraries and dynamically\n+linked subprograms that the work is specifically designed to require,\n+such as by intimate data communication or control flow between those\n+subprograms and other parts of the work.\n+\n+  The Corresponding Source need not include anything that users\n+can regenerate automatically from other parts of the Corresponding\n+Source.\n+\n+  The Corresponding Source for a work in source code form is that\n+same work.\n+\n+  2. Basic Permissions.\n+\n+  All rights granted under this License are granted for the term of\n+copyright on the Program, and are irrevocable provided the stated\n+conditions are met.  This License explicitly affirms your unlimited\n+permission to run the unmodified Program.  The output from running a\n+covered work is covered by this License only if the output, given its\n+content, constitutes a covered work.  This License acknowledges your\n+rights of fair use or other equivalent, as provided by copyright law.\n+\n+  You may make, run and propagate covered works that you do not\n+convey, without conditions so long as your license otherwise remains\n+in force.  You may convey covered works to others for the sole purpose\n+of having them make modifications exclusively for you, or provide you\n+with facilities for running those works, provided that you comply with\n+the terms of this License in conveying all material for which you do\n+not control copyright.  Those thus making or running the covered works\n+for you must do so exclusively on your behalf, under your direction\n+and control, on terms that prohibit them from making any copies of\n+your copyrighted material outside their relationship with you.\n+\n+  Conveying under any other circumstances is permitted solely under\n+the conditions stated below.  Sublicensing is not allowed; section 10\n+makes it unnecessary.\n+\n+  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n+\n+  No covered work shall be deemed part of an effective technological\n+measure under any applicable law fulfilling obligations under article\n+11 of the WIPO copyright treaty adopted on 20 December 1996, or\n+similar laws prohibiting or restricting circumvention of such\n+measures.\n+\n+  When you convey a covered work, you waive any legal power to forbid\n+circumvention of technological measures to the extent such circumvention\n+is effected by exercising rights under this License with respect to\n+the covered work, and you disclaim any intention to limit operation or\n+modification of the work as a means of enforcing, against the work's\n+users, your or third parties' legal rights to forbid circumvention of\n+technological measures.\n+\n+  4. Conveying Verbatim Copies.\n+\n+  You may convey verbatim copies of the Program's source code as you\n+receive it, in any medium, provided that you conspicuously and\n+appropriately publish on each copy an appropriate copyright notice;\n+keep intact all notices stating that this License and any\n+non-permissive terms added in accord with section 7 apply to the code;\n+keep intact all notices of the absence of any warranty; and give all\n+recipients a copy of this License along with the Program.\n+\n+  You may charge any price or no price for each copy that you convey,\n+and you may offer support or warranty protection for a fee.\n+\n+  5. Conveying Modified Source Versions.\n+\n+  You may convey a work based on the Program, or the modifications to\n+produce it from the Program, in the form of source code under the\n+terms of section 4, provided that you also meet all of these conditions:\n+\n+    a) The work must carry prominent notices stating that you modified\n+    it, and giving a relevant date.\n+\n+    b) The work must carry prominent notices stating that it is\n+    released under this License and any conditions added under section\n+    7.  This requirement modifies the requirement in section 4 to\n+    \"keep intact all notices\".\n+\n+    c) You must license the entire work, as a whole, under this\n+    License to anyone who comes into possession of a copy.  This\n+    License will therefore apply, along with any applicable section 7\n+    additional terms, to the whole of the work, and all its parts,\n+    regardless of how they are packaged.  This License gives no\n+    permission to license the work in any other way, but it does not\n+    invalidate such permission if you have separately received it.\n+\n+    d) If the work has interactive user interfaces, each must display\n+    Appropriate Legal Notices; however, if the Program has interactive\n+    interfaces that do not display Appropriate Legal Notices, your\n+    work need not make them do so.\n+\n+  A compilation of a covered work with other separate and independent\n+works, which are not by their nature extensions of the covered work,\n+and which are not combined with it such as to form a larger program,\n+in or on a volume of a storage or distribution medium, is called an\n+\"aggregate\" if the compilation and its resulting copyright are not\n+used to limit the access or legal rights of the compilation's users\n+beyond what the individual works permit.  Inclusion of a covered work\n+in an aggregate does not cause this License to apply to the other\n+parts of the aggregate.\n+\n+  6. Conveying Non-Source Forms.\n+\n+  You may convey a covered work in object code form under the terms\n+of sections 4 and 5, provided that you also convey the\n+machine-readable Corresponding Source under the terms of this License,\n+in one of these ways:\n+\n+    a) Convey the object code in, or embodied in, a physical product\n+    (including a physical distribution medium), accompanied by the\n+    Corresponding Source fixed on a durable physical medium\n+    customarily used for software interchange.\n+\n+    b) Convey the object code in, or embodied in, a physical product\n+    (including a physical distribution medium), accompanied by a\n+    written offer, valid for at least three years and valid for as\n+    long as you offer spare parts or customer support for that product\n+    model, to give anyone who possesses the object code either (1) a\n+    copy of the Corresponding Source for all the software in the\n+    product that is covered by this License, on a durable physical\n+    medium customarily used for software interchange, for a price no\n+    more than your reasonable cost of physically performing this\n+    conveying of source, or (2) access to copy the\n+    Corresponding Source from a network server at no charge.\n+\n+    c) Convey individual copies of the object code with a copy of the\n+    written offer to provide the Corresponding Source.  This\n+    alternative is allowed only occasionally and noncommercially, and\n+    only if you received the object code with such an offer, in accord\n+    with subsection 6b.\n+\n+    d) Convey the object code by offering access from a designated\n+    place (gratis or for a charge), and offer equivalent access to the\n+    Corresponding Source in the same way through the same place at no\n+    further charge.  You need not require recipients to copy the\n+    Corresponding Source along with the object code.  If the place to\n+    copy the object code is a network server, the Corresponding Source\n+    may be on a different server (operated by you or a third party)\n+    that supports equivalent copying facilities, provided you maintain\n+    clear directions next to the object code saying where to find the\n+    Corresponding Source.  Regardless of what server hosts the\n+    Corresponding Source, you remain obligated to ensure that it is\n+    available for as long as needed to satisfy these requirements.\n+\n+    e) Convey the object code using peer-to-peer transmission, provided\n+    you inform other peers where the object code and Corresponding\n+    Source of the work are being offered to the general public at no\n+    charge under subsection 6d.\n+\n+  A separable portion of the object code, whose source code is excluded\n+from the Corresponding Source as a System Library, need not be\n+included in conveying the object code work.\n+\n+  A \"User Product\" is either (1) a \"consumer product\", which means any\n+tangible personal property which is normally used for personal, family,\n+or household purposes, or (2) anything designed or sold for incorporation\n+into a dwelling.  In determining whether a product is a consumer product,\n+doubtful cases shall be resolved in favor of coverage.  For a particular\n+product received by a particular user, \"normally used\" refers to a\n+typical or common use of that class of product, regardless of the status\n+of the particular user or of the way in which the particular user\n+actually uses, or expects or is expected to use, the product.  A product\n+is a consumer product regardless of whether the product has substantial\n+commercial, industrial or non-consumer uses, unless such uses represent\n+the only significant mode of use of the product.\n+\n+  \"Installation Information\" for a User Product means any methods,\n+procedures, authorization keys, or other information required to install\n+and execute modified versions of a covered work in that User Product from\n+a modified version of its Corresponding Source.  The information must\n+suffice to ensure that the continued functioning of the modified object\n+code is in no case prevented or interfered with solely because\n+modification has been made.\n+\n+  If you convey an object code work under this section in, or with, or\n+specifically for use in, a User Product, and the conveying occurs as\n+part of a transaction in which the right of possession and use of the\n+User Product is transferred to the recipient in perpetuity or for a\n+fixed term (regardless of how the transaction is characterized), the\n+Corresponding Source conveyed under this section must be accompanied\n+by the Installation Information.  But this requirement does not apply\n+if neither you nor any third party retains the ability to install\n+modified object code on the User Product (for example, the work has\n+been installed in ROM).\n+\n+  The requirement to provide Installation Information does not include a\n+requirement to continue to provide support service, warranty, or updates\n+for a work that has been modified or installed by the recipient, or for\n+the User Product in which it has been modified or installed.  Access to a\n+network may be denied when the modification itself materially and\n+adversely affects the operation of the network or violates the rules and\n+protocols for communication across the network.\n+\n+  Corresponding Source conveyed, and Installation Information provided,\n+in accord with this section must be in a format that is publicly\n+documented (and with an implementation available to the public in\n+source code form), and must require no special password or key for\n+unpacking, reading or copying.\n+\n+  7. Additional Terms.\n+\n+  \"Additional permissions\" are terms that supplement the terms of this\n+License by making exceptions from one or more of its conditions.\n+Additional permissions that are applicable to the entire Program shall\n+be treated as though they were included in this License, to the extent\n+that they are valid under applicable law.  If additional permissions\n+apply only to part of the Program, that part may be used separately\n+under those permissions, but the entire Program remains governed by\n+this License without regard to the additional permissions.\n+\n+  When you convey a copy of a covered work, you may at your option\n+remove any additional permissions from that copy, or from any part of\n+it.  (Additional permissions may be written to require their own\n+removal in certain cases when you modify the work.)  You may place\n+additional permissions on material, added by you to a covered work,\n+for which you have or can give appropriate copyright permission.\n+\n+  Notwithstanding any other provision of this License, for material you\n+add to a covered work, you may (if authorized by the copyright holders of\n+that material) supplement the terms of this License with terms:\n+\n+    a) Disclaiming warranty or limiting liability differently from the\n+    terms of sections 15 and 16 of this License; or\n+\n+    b) Requiring preservation of specified reasonable legal notices or\n+    author attributions in that material or in the Appropriate Legal\n+    Notices displayed by works containing it; or\n+\n+    c) Prohibiting misrepresentation of the origin of that material, or\n+    requiring that modified versions of such material be marked in\n+    reasonable ways as different from the original version; or\n+\n+    d) Limiting the use for publicity purposes of names of licensors or\n+    authors of the material; or\n+\n+    e) Declining to grant rights under trademark law for use of some\n+    trade names, trademarks, or service marks; or\n+\n+    f) Requiring indemnification of licensors and authors of that\n+    material by anyone who conveys the material (or modified versions of\n+    it) with contractual assumptions of liability to the recipient, for\n+    any liability that these contractual assumptions directly impose on\n+    those licensors and authors.\n+\n+  All other non-permissive additional terms are considered \"further\n+restrictions\" within the meaning of section 10.  If the Program as you\n+received it, or any part of it, contains a notice stating that it is\n+governed by this License along with a term that is a further\n+restriction, you may remove that term.  If a license document contains\n+a further restriction but permits relicensing or conveying under this\n+License, you may add to a covered work material governed by the terms\n+of that license document, provided that the further restriction does\n+not survive such relicensing or conveying.\n+\n+  If you add terms to a covered work in accord with this section, you\n+must place, in the relevant source files, a statement of the\n+additional terms that apply to those files, or a notice indicating\n+where to find the applicable terms.\n+\n+  Additional terms, permissive or non-permissive, may be stated in the\n+form of a separately written license, or stated as exceptions;\n+the above requirements apply either way.\n+\n+  8. Termination.\n+\n+  You may not propagate or modify a covered work except as expressly\n+provided under this License.  Any attempt otherwise to propagate or\n+modify it is void, and will automatically terminate your rights under\n+this License (including any patent licenses granted under the third\n+paragraph of section 11).\n+\n+  However, if you cease all violation of this License, then your\n+license from a particular copyright holder is reinstated (a)\n+provisionally, unless and until the copyright holder explicitly and\n+finally terminates your license, and (b) permanently, if the copyright\n+holder fails to notify you of the violation by some reasonable means\n+prior to 60 days after the cessation.\n+\n+  Moreover, your license from a particular copyright holder is\n+reinstated permanently if the copyright holder notifies you of the\n+violation by some reasonable means, this is the first time you have\n+received notice of violation of this License (for any work) from that\n+copyright holder, and you cure the violation prior to 30 days after\n+your receipt of the notice.\n+\n+  Termination of your rights under this section does not terminate the\n+licenses of parties who have received copies or rights from you under\n+this License.  If your rights have been terminated and not permanently\n+reinstated, you do not qualify to receive new licenses for the same\n+material under section 10.\n+\n+  9. Acceptance Not Required for Having Copies.\n+\n+  You are not required to accept this License in order to receive or\n+run a copy of the Program.  Ancillary propagation of a covered work\n+occurring solely as a consequence of using peer-to-peer transmission\n+to receive a copy likewise does not require acceptance.  However,\n+nothing other than this License grants you permission to propagate or\n+modify any covered work.  These actions infringe copyright if you do\n+not accept this License.  Therefore, by modifying or propagating a\n+covered work, you indicate your acceptance of this License to do so.\n+\n+  10. Automatic Licensing of Downstream Recipients.\n+\n+  Each time you convey a covered work, the recipient automatically\n+receives a license from the original licensors, to run, modify and\n+propagate that work, subject to this License.  You are not responsible\n+for enforcing compliance by third parties with this License.\n+\n+  An \"entity transaction\" is a transaction transferring control of an\n+organization, or substantially all assets of one, or subdividing an\n+organization, or merging organizations.  If propagation of a covered\n+work results from an entity transaction, each party to that\n+transaction who receives a copy of the work also receives whatever\n+licenses to the work the party's predecessor in interest had or could\n+give under the previous paragraph, plus a right to possession of the\n+Corresponding Source of the work from the predecessor in interest, if\n+the predecessor has it or can get it with reasonable efforts.\n+\n+  You may not impose any further restrictions on the exercise of the\n+rights granted or affirmed under this License.  For example, you may\n+not impose a license fee, royalty, or other charge for exercise of\n+rights granted under this License, and you may not initiate litigation\n+(including a cross-claim or counterclaim in a lawsuit) alleging that\n+any patent claim is infringed by making, using, selling, offering for\n+sale, or importing the Program or any portion of it.\n+\n+  11. Patents.\n+\n+  A \"contributor\" is a copyright holder who authorizes use under this\n+License of the Program or a work on which the Program is based.  The\n+work thus licensed is called the contributor's \"contributor version\".\n+\n+  A contributor's \"essential patent claims\" are all patent claims\n+owned or controlled by the contributor, whether already acquired or\n+hereafter acquired, that would be infringed by some manner, permitted\n+by this License, of making, using, or selling its contributor version,\n+but do not include claims that would be infringed only as a\n+consequence of further modification of the contributor version.  For\n+purposes of this definition, \"control\" includes the right to grant\n+patent sublicenses in a manner consistent with the requirements of\n+this License.\n+\n+  Each contributor grants you a non-exclusive, worldwide, royalty-free\n+patent license under the contributor's essential patent claims, to\n+make, use, sell, offer for sale, import and otherwise run, modify and\n+propagate the contents of its contributor version.\n+\n+  In the following three paragraphs, a \"patent license\" is any express\n+agreement or commitment, however denominated, not to enforce a patent\n+(such as an express permission to practice a patent or covenant not to\n+sue for patent infringement).  To \"grant\" such a patent license to a\n+party means to make such an agreement or commitment not to enforce a\n+patent against the party.\n+\n+  If you convey a covered work, knowingly relying on a patent license,\n+and the Corresponding Source of the work is not available for anyone\n+to copy, free of charge and under the terms of this License, through a\n+publicly available network server or other readily accessible means,\n+then you must either (1) cause the Corresponding Source to be so\n+available, or (2) arrange to deprive yourself of the benefit of the\n+patent license for this particular work, or (3) arrange, in a manner\n+consistent with the requirements of this License, to extend the patent\n+license to downstream recipients.  \"Knowingly relying\" means you have\n+actual knowledge that, but for the patent license, your conveying the\n+covered work in a country, or your recipient's use of the covered work\n+in a country, would infringe one or more identifiable patents in that\n+country that you have reason to believe are valid.\n+\n+  If, pursuant to or in connection with a single transaction or\n+arrangement, you convey, or propagate by procuring conveyance of, a\n+covered work, and grant a patent license to some of the parties\n+receiving the covered work authorizing them to use, propagate, modify\n+or convey a specific copy of the covered work, then the patent license\n+you grant is automatically extended to all recipients of the covered\n+work and works based on it.\n+\n+  A patent license is \"discriminatory\" if it does not include within\n+the scope of its coverage, prohibits the exercise of, or is\n+conditioned on the non-exercise of one or more of the rights that are\n+specifically granted under this License.  You may not convey a covered\n+work if you are a party to an arrangement with a third party that is\n+in the business of distributing software, under which you make payment\n+to the third party based on the extent of your activity of conveying\n+the work, and under which the third party grants, to any of the\n+parties who would receive the covered work from you, a discriminatory\n+patent license (a) in connection with copies of the covered work\n+conveyed by you (or copies made from those copies), or (b) primarily\n+for and in connection with specific products or compilations that\n+contain the covered work, unless you entered into that arrangement,\n+or that patent license was granted, prior to 28 March 2007.\n+\n+  Nothing in this License shall be construed as excluding or limiting\n+any implied license or other defenses to infringement that may\n+otherwise be available to you under applicable patent law.\n+\n+  12. No Surrender of Others' Freedom.\n+\n+  If conditions are imposed on you (whether by court order, agreement or\n+otherwise) that contradict the conditions of this License, they do not\n+excuse you from the conditions of this License.  If you cannot convey a\n+covered work so as to satisfy simultaneously your obligations under this\n+License and any other pertinent obligations, then as a consequence you may\n+not convey it at all.  For example, if you agree to terms that obligate you\n+to collect a royalty for further conveying from those to whom you convey\n+the Program, the only way you could satisfy both those terms and this\n+License would be to refrain entirely from conveying the Program.\n+\n+  13. Use with the GNU Affero General Public License.\n+\n+  Notwithstanding any other provision of this License, you have\n+permission to link or combine any covered work with a work licensed\n+under version 3 of the GNU Affero General Public License into a single\n+combined work, and to convey the resulting work.  The terms of this\n+License will continue to apply to the part which is the covered work,\n+but the special requirements of the GNU Affero General Public License,\n+section 13, concerning interaction through a network will apply to the\n+combination as such.\n+\n+  14. Revised Versions of this License.\n+\n+  The Free Software Foundation may publish revised and/or new versions of\n+the GNU General Public License from time to time.  Such new versions will\n+be similar in spirit to the present version, but may differ in detail to\n+address new problems or concerns.\n+\n+  Each version is given a distinguishing version number.  If the\n+Program specifies that a certain numbered version of the GNU General\n+Public License \"or any later version\" applies to it, you have the\n+option of following the terms and conditions either of that numbered\n+version or of any later version published by the Free Software\n+Foundation.  If the Program does not specify a version number of the\n+GNU General Public License, you may choose any version ever published\n+by the Free Software Foundation.\n+\n+  If the Program specifies that a proxy can decide which future\n+versions of the GNU General Public License can be used, that proxy's\n+public statement of acceptance of a version permanently authorizes you\n+to choose that version for the Program.\n+\n+  Later license versions may give you additional or different\n+permissions.  However, no additional obligations are imposed on any\n+author or copyright holder as a result of your choosing to follow a\n+later version.\n+\n+  15. Disclaimer of Warranty.\n+\n+  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\n+APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\n+HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\n+OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\n+THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n+PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\n+IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\n+ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n+\n+  16. Limitation of Liability.\n+\n+  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\n+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\n+THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\n+GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\n+USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\n+DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\n+PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\n+EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\n+SUCH DAMAGES.\n+\n+  17. Interpretation of Sections 15 and 16.\n+\n+  If the disclaimer of warranty and limitation of liability provided\n+above cannot be given local legal effect according to their terms,\n+reviewing courts shall apply local law that most closely approximates\n+an absolute waiver of all civil liability in connection with the\n+Program, unless a warranty or assumption of liability accompanies a\n+copy of the Program in return for a fee.\n+\n+                     END OF TERMS AND CONDITIONS\n+\n+            How to Apply These Terms to Your New Programs\n+\n+  If you develop a new program, and you want it to be of the greatest\n+possible use to the public, the best way to achieve this is to make it\n+free software which everyone can redistribute and change under these terms.\n+\n+  To do so, attach the following notices to the program.  It is safest\n+to attach them to the start of each source file to most effectively\n+state the exclusion of warranty; and each file should have at least\n+the \"copyright\" line and a pointer to where the full notice is found.\n+\n+    livebootp\n+    Copyright (C) 2017 ERCOM - Emeric Verschuur <emeric@mbedsys.org>\n+\n+    This program is free software: you can redistribute it and/or modify\n+    it under the terms of the GNU General Public License as published by\n+    the Free Software Foundation, either version 3 of the License, or\n+    (at your option) any later version.\n+\n+    This program is distributed in the hope that it will be useful,\n+    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+    GNU General Public License for more details.\n+\n+    You should have received a copy of the GNU General Public License\n+    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+Also add information on how to contact you by electronic and paper mail.\n+\n+  If the program does terminal interaction, make it output a short\n+notice like this when it starts in an interactive mode:\n+\n+    livebootp\n+    Copyright (C) 2017 ERCOM - Emeric Verschuur <emeric@mbedsys.org>\n+    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n+    This is free software, and you are welcome to redistribute it\n+    under certain conditions; type `show c' for details.\n+\n+The hypothetical commands `show w' and `show c' should show the appropriate\n+parts of the General Public License.  Of course, your program's commands\n+might be different; for a GUI interface, you would use an \"about box\".\n+\n+  You should also get your employer (if you work as a programmer) or school,\n+if any, to sign a \"copyright disclaimer\" for the program, if necessary.\n+For more information on this, and how to apply and follow the GNU GPL, see\n+<http://www.gnu.org/licenses/>.\n+\n+  The GNU General Public License does not permit incorporating your program\n+into proprietary programs.  If your program is a subroutine library, you\n+may consider it more useful to permit linking proprietary applications with\n+the library.  If this is what you want to do, use the GNU Lesser General\n+Public License instead of this License.  But first, please read\n+<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n",
          "commitId": "8b9801b5b1cfe8dc32704df1bbaf81f19213e610"
        }
      ]
    },
    {
      "id": "5ca6ceb6bcc98ed2ad59f467a7ec2797628ce176",
      "title": "Initial commit",
      "created_at": "2017-12-07T16:40:32.000Z",
      "message": "Initial commit\n",
      "author_name": "Emeric Verschuur",
      "diffs": [
        {
          "id": 3604,
          "oldPath": "README.md",
          "newPath": "README.md",
          "newFile": true,
          "renamedFile": false,
          "deletedFile": false,
          "diff": "@@ -0,0 +1 @@\n+## PXE image builder\n",
          "commitId": "5ca6ceb6bcc98ed2ad59f467a7ec2797628ce176"
        }
      ]
    }
  ]
}